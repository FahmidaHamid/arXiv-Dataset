Towards Physarum Binary Adders

arXiv:1005.2303v1 [nlin.PS] 13 May 2010

Jeff Jones and Andrew Adamatzky
Unconventional Computing Centre, University of the West of England, Bristol,
United Kingdom

Abstract
Plasmodium of Physarum polycephalum is a single cell visible by unaided eye. The
plasmodium’s foraging behaviour is interpreted in terms of computation. Input data
is a configuration of nutrients, result of computation is a network of plasmodium’s
cytoplasmic tubes spanning sources of nutrients. Tsuda et al (2004) experimentally
demonstrated that basic logical gates can be implemented in foraging behaviour
of the plasmodium. We simplify the original designs of the gates and show — in
computer models — that the plasmodium is capable for computation of two-input
two-output gate hx, yi → hxy, x+yi and three-input two-output hx, y, zi → hxyz, x+
y + zi. We assemble the gates in a binary one-bit adder and demonstrate validity
of the design using computer simulation.
Keywords: nonlinear dynamical systems, logical gate, Physarum polycephalum, chemical computers, biological computers

1

Introduction

A plasmodium is a vegetative state of acellular slime mould Physarum polycephalum. The plasmodium feeds on microscopic food particles, including microbial life forms. The plasmodium placed in an environment with distributed
nutrients develops a network of protoplasmic tubes spanning the nutrients’
sources. Te topology of the plasmodium’s protoplasmic network optimizes the
plasmodium’s harvesting on the scattered sources of nutrients and makes more
efficient flow and transport of intra-cellular components [8,9,10,11].
The plasmodium is capable for approximation of shortest path [10], computation of planar proximity graphs [2] and plane tessellations [13], primitive
memory [12], basic logical computing [15], and control of robot navigation [16].
The plasmodium can be considered as a general-purpose computer because the
plasmodium simulates Kolmogorov-Uspenskii machine — the storage modification machine operating on a colored set of graph nodes [1].
Preprint submitted to Elsevier Science

27 June 2012

The paper is structured as follows. In Sect. 2 we introduce the experimental
gates invented in [15] and re-interpret the gates as multi-output logical gates.
We analyse asynchronism and reversibility of the gates in Sects. 3 and 4. We
simulate the gates in a particle-swarm model in Sect. 5. We assemble the gates
in the one-bit half-adder and simulate the adder’s behaviour in Sect. 6.

2

Physarum gates

Physarum gates constructed in [15] were made of agar gel channels. Presence
of a plasmodium in an input channel represents logical input Truth (’1’)
and absence of plasmodium — logical input False (’0’). Values of signal in
output channels are encoded similarly. Sources of chemo-attractants (glucose)
are placed near exits of output channels. The chemo-attractants diffusing in
the agar gel channels establish gradients which guide the plasmodia towards
closest sources of attractants.
In experiments discussed in [15] plasmodia inoculated in different input channels exhibited an aversion toward each other. They did not merge. If propagating plasmodium p1 encountered another plasmodium p2 in a channel p1
wanted to travel in the plasmodium p1 chosen another route of propagation.
The fact that two ‘colliding’ plasmodia do not merge was also supported by
our experiments on constructing Voronoi diagram by plasmodia inoculated
on nutrient-rich agar [2,13]. Approaching wave-fronts of growing plasmodia
usually ‘freeze’ for an up 16 hours, when collide, however later the fronts
merge. Outcomes of interaction between two localized (i.e. propagating as
wave-fragments) plasmodia depends on many factors, and ’elastic’ collision is
just one amongst many scenarios of the plasmodia interactions.
In paper [15] some output channels of Physarum gates were considered as
buffers. Let us now slightly redesign the gates [15] and interpret all outputs
of the gates as Boolean logic values.
Consider G1 gate in (Fig 1a). Physical structure of the gate satisfies the following constraints |xb| = |yc| and |bd| > |bc|+|ce| (Fig 1a). Chemo-attractants
are placed in sites d and e. We assume strength of attraction to d (e) at point
p is proportional to distance |pd| (|pe|) (Fig 1a).
Situations corresponding to input values (0, 0), (0, 1) and (1, 0) are simple.
When no plasmodia are inoculated in x and y nothing appears at outputs d
and e (Fig 1b). When plasmodium is placed only in site y the plasmodium
follows the route (yc)(ce) (Fig 1c). If plasmodium inoculated only in site x
the plasmodium follows the route (xb)(bc)(ce) (Fig 1d).
2

0

0

0

1

1

1

0

0

1

1

1

y

x

1
x+y

(a)

0

0

0

(b)

(c)

1

(d)

xy

(e)

(f)

Fig. 1. Scheme of G1 gate: (a) landmark points are shown; (b)–(e) configuration
of plasmodia in gates for all combinations of input values — x = 0, y = 0 (b),
x = 0, y = 1 (c), x = 1, y = 0 (d), x = 1, y = 1 (e), the plasmodia bodies
are shown by thick lines; (f) input-output logical function realized by the gate.
Chemo-attractants are placed in sites marked by solid black discs.

The main trick of the gate is in how input values x = 1 and y = 1 are handled.
The plasmodia are inoculated in sites x and y (Fig 1d). The plasmodium
growing from site y follows route (yc)(ce). The plasmodium growing from site
x tends to follow route (xb)(bc)(ce), however part of the route (ce) is already
occupied by another plasmodium. Therefore the plasmodium, starting in x,
grows along the route (xb)(bd) (Fig 1d).
A table of transformation hx, yi → hd, ei shows that the gate G1 (Fig 1f)
implements logical conjunction and logical disjunctions hx, yi → hxy, x + yi
at the same time but on two different outputs.
Geometrical structure of G2 gate is shown in Fig. 2. Chemo-attractants are
placed in sites c and d and plasmodia can be inoculated in sites x, y and
z (Fig. 2a). Lengths of channels in the gate satisfy the following conditions:
|xc| < |xd|, |ac| < |ad|, |bc| < |bd|, and |zb| + |bc| < |ya| + |ac|.
In [15] input channels y and z (Fig. 2a) were assigned to constant Truth
inputs an output channel c to a buffer (unused output to collect ‘excess’ of
plasmodium). Let consider scenario when all three input can take values ‘0’
and ’1’ and both outputs have a meaning.
If plasmodium placed in site z it propagates toward closest attractant-site
c (Fig. 2c); similarly a plasmodium inoculated in site y propagates towards
attractant-site c (Fig. 2d). When plasmodia are placed in sites y and z simultaneously, the plasmodium from the site z follows the route (zb)(bc) and
thus blocks the way for plasmodium propagating from y (Fig. 2e)). Therefore the plasmodium originating in y moves to attractant-site d (Fig. 2e). The
situations sketched in Fig. 2g–j can be described similarly. Considering the
transformations hx, y, i → hc, di we find that the gate implements the following logical function hx, yi → hx, xyi. If y- and z-iputs are constant Truth,
3

y

0

0

z

x

a b

1

0

c 0

1

1

0 0

0

1 0

1

1 0

1

d

0

0

0

1

(a)

(b)

(c)

(d)

(e)

0

0

1

0

1

1 1

1

1 1

y

1

0

z

1

x+y+z

1 x

1 1

0

1

0

0

( x)yz
(¬x)yz

(f)

(g)

(h)

(i)

(j)

Fig. 2. Scheme of G2 gate. (a) landmark points are shown; (b)–(i) configuration
of plasmodia in gates for all values of input tuple hx, y, zi: (b) h000i, (c) h001i,
(d) h010i, (e) h011i, (f) h100i, (g) h101i, (h) h110i, (i) h111i, the plasmodia bodies
are shown by thick lines; (j) input-output logical function realized by the gate. Input
are marked with circles, outputs with solid discs. Chemo-attractants are placed in
sites marked by solid black discs.

y = 1 and z = 1, the gate G2 is a negation (this how it was initially designed
in [15]).

Physarum gates G1 and G2 can be cascaded by linking output gel-channels of
one gate to input gel-channels of another gate. An example of such cascading
in a form of one-bit half adder is shown in Fig. 3. Four pieces of plasmodium
are fed in input channels as constant Truth. The plasmodia representing
Boolean variables x and y are multiplied or branched and fed into gate G1
and two copies of gate G2 . Output channels of gates G2 are fed into data
channels of another gate G1 . In addition to results we are looking for — xy
and x ⊕ y — the circuit (Fig. 3) produces several byproducts: x + y, (¬x)(¬y)
and two copies of constants Truth. These signals can be used further down
in the chain of computation or routed in the buffer zones (plasmodium pool).
Plasmodia representing constant Truth can be also rerouted back to control
inputs of gates G2 .
4

x

y
1

1

1

1

1 1
x+y

xy

(¬x)(¬y)

x y

Fig. 3. Scheme of P hysarum one-bit half-adder. Input variables are x and y, 1
on input channels represent constant Truth. Carry value xy and sum x ⊕ y are
highlighted by dotted rectangle, unused outputs x + y, 1 and (¬x)(¬y) by dotted
ellipses.

3

Asynchronism

Synchronization of signals is amongst key factors in proper functioning of
logical circuits. Architecture of Physarum gates allow for a certain degree of
asynchronism. Let us evaluate a degree of asynchronism of gates G1 and G2 .
Assume outputs of gate G1 are read in w ≥ |xb| + |bc| + |bd| time units after
on the plasmodia entered its data channel. Let plasmodia representing logical
variables x and y enter their channels at time steps τx and τy . Let x = 1 and
y = 1. Then x-plasmodium must reach site c of gate G1 (Fig. 1a) after the site
c is occupied by y-plasmodium. That is τx + |xb| ≥ τy + |yc|. Due to |xb| = |yc|
(Fig. 1a) we have τx ≥ τy . If x = 1 the x-plasmodium must reach exit of
the output channel (xd) before ‘signal reading’ time-window closed. Therefore
we have τy ≤ τx ≤ α1 = w − |xd| + |bc|. The parameter α1 is a degree of
asynchronism of gate G1 . In the same manner we obtain a constraint on timing
τx , τy and τz of signals x, y and z in gate G2 : τz ≤ τy ≤ τx ≤ w − |ya| − |ad|.
Thus degree of asynchronism of gate G2 is α2 = w − |ya| − |ad|.
Architectures of Physarum gates G2 (Fig. 2) and G1 (Fig. 1) assume gradients of chemo-attractants from output sites (where sources of attractants) are
5

y

x

c

b

x+y

z
x

e

0

y

y

x

a b

c

y

xy

y

d

x

(a)

(b)

d

(c)

x

(d)

Fig. 4. Gates G1 (a)(b) and G2 (c)(d). Landmarks are shown in (a) and (c), the gates
functional schemes in (b) and (d). Inputs are marked with circles, outputs with solid
discs. Chemo-attractants are placed in sites marked by solid black discs.

placed to input sites (solid black discs in Figs. 2 and 1). What will happen if
we reverse the gradients and place sources of chemo-attractants in input sites
of original gates and consider output sites of original gates as inputs of new
gates (Fig. 4)? We will write gates G1 and G2 with reversed gradients and
input-outputs as G1 and G2 .

4

Outcomes of reversing gradients of chemo-attractants

Let us consider gate G1 . If plasmodium placed in site d (Fig. 4a) it propagates
towards site b (because it is the only choice) and then follows gradients towards
closest source of chemo-attractants, site x. Plasmodium inoculated in site e
travels along the route (ec)(cy). Two plasmodium placed in sites d and e
simultaneously, do not interact. This shows that gate G1 : hx, yi → hx, yi acts
as a simple conductor of signals when polarity of chemo-attractant gradients
is reversed (Fig. 4b).
In gate G2 plasmodium placed in site c always propagates towards closest
source of attractants, site z. Plasmodium placed in site x if |xa| > |zb| but
the plasmodium propagates to site z if |xa| < |zb| (Fig. 4c). The plasmodium
placed in c and/or d never reaches site y, therefore output marked ‘y’ is always
’0’. Analysis of all combinations of input signals demonstrate that for |xa| <
|zb| we have G2 : hx, yi → hx, yi, and for |xa| > |zb| we have G2 : hx, yi →
hxy, x + yi (Fig. 4d).
In summary, when gradients of chemo-attractants and input-output swapped
in gates G1 and G2 the gate G1 becomes a simple conductor and the gate G2
becomes gate G1 .
6

5

Computational modelling of Physarum gate behaviours

To model the Physarum gate behaviours the three physical criteria identified
in [15] and utilised in the design of the logic gates need to be implemented.
The criteria can be summarised as:
1. Physarum grows and moves towards nutrient chemoattractant gradients.
2. If two plasmodium fragments encounter each other, they will avoid contact
where other routes exist.
3. If two plasmodium fragments cannot avoid contact, the plasmodia will fuse.

We employed the particle model of emergent transport network formation and
evolution introduced in [6] to implement the gate behaviours, where a population of very simple mobile particles with chemotaxis-like sensory behaviour
were used to construct and minimise spatially represented emergent transport
networks in a diffusive environment. The particle approximation corresponds
to a particle approximation of LALI (Local Activation Long-range Inhibition)
reaction-diffusion pattern formation processes and exhibits a complex range
of patterning by varying particle sensory parameters [7]. We assume that each
particle in the collective represents a hypothetical unit of Physarum plasmodium gel/sol interaction which includes the effect of chemoattractant gradients
on the plasmodium membrane (sensory behaviour) and the flow of protoplasmic sol within the plasmodium (motor behaviour). The summation of particle
positions corresponds to a static snapshot of network structure whilst the collective movement of the particles in the network corresponds to protoplasmic
flow within the network.
Although the model is very simple in its assumptions and implementation it is
capable of reproducing some of the spontaneous network formation, network
foraging, oscillatory behaviour, bi-directional shuttle streaming, and network
adaptation seen in Physarum, using only simple, local functionality to generate the emergent behaviours. Details of the particle morphology, sensory
and motor behavioural algorithms can be found in [5] and in this paper we
use an extension of the basic model (without utilising oscillatory behaviour)
to include plasmodium growth and adaptation (growth and shrinkage of the
collective).
The environment is represented by a greyscale image where different values
correspond to different environmental features (for example, habitable areas,
inhabitable areas, nutrient sources). The particles move about their environment (a two-dimensional lattice) and sample sensory chemoattractant data
from an isomorphic diffusion map. When particles move about their environment they deposit chemoattractant to the same structure. Chemoattractant
gradients were represented by projection of chemoattractant to the diffusion
7

map at the locations indicated on the gate schematic illustrations. The projection weight was set at 20 multiplied by the chemoattractant pixel value (255).
The weight factor is high as chemoattractant is deemed to be completely absorbed when it encounters the edges of the chamber and a large weight value
is necessary to ensure the required propagation distance. The diffusion kernel
was a 7×7 window for all experiments. Diffusion was achieved by the mean of
the local window at each location in the diffusion map and damped at 10−4
(i.e. new value is equal to the mean multiplied by 1-10−4). We assumed that
diffusion of chemoattractant from a nutrient source was suppressed when the
source was engulfed by particles. The suppression was implemented by checking each pixel of the food source and reducing the projection value (concentration of chemoattractants) by multiplying it by 10−3 if there was a particle
within a 9×9 neighbourhood surrounding the pixel. Particle sensor offset was
5 pixels, angle of rotation set to 45 degrees, and sensor angle was 45 degrees.
Growth and adaptation of the particle model population is currently implemented using a simple method based upon local measures of space availability (growth) and overcrowding (adaptation, or shrinkage, by population reduction). This is undoubtedly a gross simplification of the complex factors
involved in growth and adaptation of the real organism (such as metabolic influences, nutrient concentration, waste concentration, slime capsule coverage,
bacterial contamination etc.). However the simplification renders the population growth and adaptation more computationally tractable and the specific
parameters governing growth and shrinkage are at least loosely based upon
real environmental constraints of space and nutrient availability. Growth and
shrinkage states are iterated separately for each particle and the results for
each particle are indicated by tagging Boolean values to the particles. The
growth and shrinkage tests were executed every three scheduler steps and the
method employed is specified as follows. If there are 1 to 10 particles in a 9×9
neighbourhood of a particle, and the particle has moved forwards successfully,
the particle attempts to divide into two (i.e. a new particle is created) if there
is an empty location in the immediate neighbourhood surrounding the particle. If there are 0 to 20 particles in a 5×5 neighbourhood of a particle the
particle survives, otherwise it is annihilated.

5.1 Modelling individual gates

To implement the gates using the model, the schematic illustrations in Fig. 1
and Fig. 2 were transformed into the spatial representations shown in Fig. 5.
The spatial pattern and greyscale encoding (boundaries, nutrient sources) is
used to configure the diffusive map.
Particles were introduced (depending on logical input conditions) at the areas
8

Input 2
Input 3
Input 1
Input 2

Input 1
Output 2

Output 2
Output 1
Output 1

Fig. 5. Spatial implementation of logic gates G1 and G2 used in the particle model

indicated by solid circles at the top of the gates. Strong sources of chemoattractant were introduced at the outputs indicated as enclosed by dashed circles.
The chemoattractant diffused from the output locations along channels etched
into the gate configurations (white areas) and chemoattractant was removed
immediately on contact with boundaries of the channels (light grey areas). The
particle population was inoculated at identical times at the inputs, sensing,
growing and moving towards the propagating diffusion gradients. To ‘anchor’
the growing paths to the start positions a very small amount of chemoattractant was also deposited at the respective start positions (the amount chosen
was the lowest level needed to anchor the position without affecting the actual gate computation). Population inoculation and chemoattractant diffusion
occurred at the same time and there was little or no directed growth of the
population until the chemoattractants reached the source of inoculation.
The operation of the gates occurs due to the complex interactions between the
chemoattractant diffusion gradients. Because there is a quantitative aspect to
the chemoattractant gradient (i.e. particles sense not only the presence but
also the strength of the diffusion), the gradient concentration is affected by the
length and width of the gate channels [4]. The point at which the competing
wave fronts meet is a spatial interface which delineates path choices in a similar
way to those observed in chemical reaction-diffusion computations [14]. Thus,
the environment is partially responsible for the initial selection of path choice.
This ‘background processing’ by the environment satisfies the first of the three
aforementioned criteria for plasmodium gate construction.
Two more factors add to the complexity of gradient interactions: Firstly when
the particle representation of the plasmodium engulfs a food source, the diffusion of chemoattractant from that source is suppressed (reduced by a factor
of one thousand). This alters the strength of the gradient field from the engulfed source and the interface position where competing fronts meet shifts
to reflect the new gradient field. Secondly, the collective movement of the
particle population also results in local chemoattractant deposition along the
path (this deposition is responsible for the local recruitment of particles by
9

positive feedback and also acts to maintain the cohesiveness of the particle
swarm). The local deposition of chemoattractant is also subject to the same
diffusion as that which affects the food sources (in fact it is represented computationally as the same ‘substance’) and the diffusion away from the particle
population also acts to generate a dynamical interface which competes with
the food source gradients.
Suppression of food source gradients and local modification of gradients by
the particle collective represents a highly dynamical spatial computation in
which both local and distant sources of information (food source location,
path availability) are integrated by both environmental and collective swarm
computation. It can also be seen that the local modification of the gradient by
the particle collective indirectly satisfies the second criterion for plasmodium
gate construction — attempted avoidance of local plasmodia. The dynamical
gradient interface represents a fragile boundary between two separate swarms,
two separate food gradients or a combination of both swarm and food gradients. The third criterion — fusion of plasmodia can be represented in the
particle model when movement of separate particle paths is limited and perturbation of the dynamic boundary occurs. This can result in fusion of network
paths which corresponds to fusion of plasmodia.
The complex evolution of gradient fields can be seen in an example run of
G2 with the inputs 011 in Fig. 6. The top row shows the particle positions
and the bottom row shows the chemoattractant gradient field enhanced by
a local method of dynamic contrast enhancement. The first column shows
the propagation of chemoattractant gradient from the two food sources and
the interfacial region (dashed arcs). Note that the gradient from the right
suppresses the gradient from the bottom source. The second column shows
the effect of suppression of the rightmost food source when engulfed by the
particle population which has migrated towards it. Because the bottom food
source is not suppressed the gradient from this source is stronger than the
right side and the interface boundary shifts to the right of the T-junction.
Note that there is also a weaker interface boundary between the diffusion
gradient emanating from the bottom food source and the chemoattractant
deposition from the particle population in the long vertical column. The third
column shows the result of the competition between the food gradient and the
population gradient — the food gradient is stronger and the population grows
and migrates downwards to the food node.
When the bottom node is suppressed the two separate paths remain stable
and do not fuse. A fragile interfacial boundary can be seen between the two
network paths (dashed arc) and, as long as the particles do not cross the
‘buffer’ space between the two paths, the paths will not fuse.
Results using the particle model for gates G1 and G2 are shown in Fig. 7
10

Fig. 6. Evolution of ‘plasmodium’ positions and interaction fronts in the particle model for the G2 gate with inputs 011. Top Row: Particle positions. Bottom
Row: Chemoattractant gradient. Arrows indicate propagation of gradient from food
sources. Dashed arcs represent boundary regions separating competing gradients.
Dashed circles represent diffusion from food sources suppressed by engulfment See
text for explanation.

and Fig. 8 . The G1 gate achieved 90% reliability and the G2 gate achieved
98.57% reliability. The input conditions 0-0 were not included with the results
because the output result for these inputs is guaranteed regardless of gate
design. For the G1 gate we see that the shorter path to the right food source
attracts the simulated plasmodium in both 0-1 and 1-0 condition. Note that
no branching occurs from the plasmodium to the left nutrient source when
the right source is connected. This is because the movement of particles (and
their deposition to the diffusion map) creates a local diffusion field around
the particle collective. The strength of this locally generated field is enough
to suppress the field emanating from the left food source and no branching is
observed. If the strength of the local field were less than that of the nutrient
source then branching and growth to the left nutrient source would indeed
occur.
The errors in the G1 gate all occurred in the 1-1 input condition. The ‘pattern’
of the error is that the left particle stream did not continue downwards to the
food source, but fused with the right side particle stream (indicated by dashed
box). Analysis of all of the results found that whenever the growing particle
plasmodium encountered a junction in a gate an apparent ‘hesitation’ was
seen. The growth tip appeared to be indecisive as to which direction to take.
When a direction was eventually chosen the growth speed increased when the
growth tip moved past the junction. The hesitation, and indeed some of the
11

Inputs:

00

01

10

11

01
(20/20)

01
(20/20)

11
(41/50)

Success:

Failure:

Outputs:
00
Success:
(N/A)
Total Success: 81/90 (90 %)

Fig. 7. Summary of results for particle approximation of Physarum based logic gate
G1

gate errors, was caused by disturbances in the diffusion field near the tip of
the growing plasmodium. The diffusion gradient emanating from the nutrient
sources is relatively uniform whereas the gradient from the plasmodium tip
is more intermittent in quality (because the tip growth is non uniform and
changeable in form). In contrast the gradient from a moving straight part
of the particle plasmodium was more uniform. The fragility of the gradient
field at the growth tip was further perturbed by the spatial changes in the
environment at the junctions. This, coupled with increased possible choices of
directions, led to what we describe as junctional errors. The junctional errors
are characterised by failures in searching of the growing plasmodium tip and
were responsible for all of the failure instances of the G1 gate.
The G2 gate, although more complex in design, was more reliable than G1 and
the only errors which occurred were a single junctional error in the 011 input
condition and an error in the 111 input condition. This error was classed as a
timing error and was caused by different growth rates from the two left-side
inputs. Ideally the two particle streams should meet and fuse but differences in
the growth of the two separate streams led to non fusion and errors in output.
To illustrate the transient dynamical nature of growth tip hesitation at junctions, junctional and timing errors, please refer to the supplementary video
12

Inputs:

000

001

010

011

100

101

110

111

Success:

Failure:

Outputs:
00
01
Success:
(N/A)
(20/20)
Total Success: 138/140 (98.57%)

01
(20/20)

11
(19/20)

01
(20/20)

11
(20/20)

01
(20/20)

01
(19/20)

Fig. 8. Summary of results for particle approximation of Physarum based logic gate
G2

recordings at: (http://uncomp.uwe.ac.uk/jeff/gates.htm).

6

Modelling the half adder

To implement the half adder based on gates G1 and G2 with the particle
model the scheme of the half adder in Fig. 3 was slightly modified as shown in
Fig. 9. The G2 gate combination was simplified by ‘sharing’ the food source
between both gates. Constant Truth inputs (‘1’) were provided as some of the
gate inputs to implement the desired function. The outputs of the combined
G2 gates were fed to act as inputs to the lower G1 gate. To ensure that the
particle population continued to the input positions of the lower gate synthetic
chemoattractant stimuli (small dots) were placed to guide any plasmodium
along the channel to the input positions. The ‘G2 G2 G1 ’ triplet combination
acted as the XOR (summation) part of the half adder. The and section of the
half adder (carry computation) was implemented as a single G1 gate (Fig. 9,
left). In the simulations the branching of initial X and Y signals to provide
the inputs to both sections of the half adder was not implemented in an effort
to simplify the design and the relevant X and Y inputs were introduced to the
gate manually.
The use of constant Truth inputs to the half adder introduces errors in gate
output when inputs are 0-0. This is because the outermost truth signals at the
inputs of the G2 G2 gates travel down through the gates and into the lower G1
gate. This would result in the ‘no input’ condition actually causing an erroneous output. Apart from redesigning the gate this presents an opportunity to
consider possible use of error checking signals in the gate design. One possible
error checking signal is the ‘EA’ output in the left side of the circuit (Fig. 9,
left). It can be seen that this flag should be set whenever any of the inputs are
set to true. It would therefore be possible to use the absence of the EA output
13

Fig. 9. Spatial representation of half adder based on combinations of G1 and G2 . X
and Y: Inputs to half adder, 1: constant Truth signals, S: Sum output, C: Carry
output. Solid discs are food sources and small dots are small food sources to feed
outputs towards lower gate inputs. EA and EB: Error checking flags (see text)
Inputs:

Typical
Output:

00

S1 C0
EA0 EB1

Success:
(N/A)
Total Success: 38/60 (63%)

01

10

S1 C0
EA1 EB0

S1 C0
EA1 EB0

(15/20)

(15/20)

11

S0 C1
EA1 EB0

(8/20)

Fig. 10. Examples of input and output conditions for the particle approximation of
the half adder

to indicate a 0-0 input to the half adder, and thus indicate erroneous output
from the constant Truth inputs to G2 G2 . Another possible use of outputs
to indicate error conditions is the ‘EB’ output from the left G1 portion of
the G2 G2 G1 triplet (Fig. 9, bottom). It can be seen (Fig. 10) that the EB flag
should never be set unless the 0-0 condition caused by constant Truth inputs
occurs. This flag could be combined with the lack of EA output to indicate
errors. When the EB flag is set without the presence of EA then a fault can
be assumed to have occurred within the half adder G2 G2 G1 triplet. Of course
the addition paths and mechanisms to make use of these error checking flags
adds another layer of complexity to the circuitry which is out of the scope for
this paper. The results of the half adder approximation can be seen in Fig. 10
14

The failure rate for the half adder approximation, even when not including
the difficulty posed by the 0-0 configuration, was significantly higher than for
the single gates. The majority of the failures were caused by timing errors,
which occurred when the outermost inputs to the G2 G2 combined gate did
not fuse correctly with the constant Truth inputs and, instead, travelled
down towards the lower gate. Junctional errors also occurred three times in
the left G1 gate for the 1-1 input condition.
The combination and extension of the individual gates appeared to compound
the errors in the individual gates. Although no definitive answer can be given as
to why the unreliability increased, we speculate that the combining of the gates
subtly affected the propagation and profile of the chemoattractant gradients.

7

Discussion

The results from the computational approximation of Physarum support the
findings of [15] that the organism can be used to construct simple logic gates,
and also the computing schemes within this paper which explored the creation
of more complex combined gates and half adder circuitry. The findings suggest
that, although such circuits can indeed be built, the presence of both timing
errors and junctional (search) errors would severely limit the effectiveness and
practicality with even more complex circuits.
The matter of errors of the gate operations (timing errors and junctional
errors) requires further consideration. The term ‘error’ depends on the perspective taken. From an experimental viewpoint the occasionally unreliable
operation of the gates is erroneous. But the notion of externally applied - by
the experimenter - environment conditions and metrics of success cannot be
easily applied to the behaviour of a living (or even simulated) collective organism, whose sole imperative is the location and connection of food sources for
survival. By following the biological imperative the organism is not actually
doing anything ‘wrong’.
Ascribing such obviously successful survival strategies as erroneous behaviour
merely because they do not suit the experimenter’s demands seems to do a
disservice to the organism. At the risk of further anthropomorphism it seems
as if the collective is hampered by a double-bind caused by conflicting biological and computational requirements: “Please forage successfully, but not too
successfully”.
It appears that this conflict could not easily be resolved from an engineering
perspective because, on one hand, we cannot lessen the requirements of digital circuit operation to accept logically incorrect output. Nor is it possible to
15

reign-in the natural foraging ability of the plasmodium. Although it is possible to track the logical errors by using spare signal channels (as noted in
the half-adder circuit), acknowledging that there is an internal problem does
not actually rectify the problem. Simple logic gates form the basis of complex circuits whose reliability must be total so that they may be considered as
‘black box’ interchangeable components in hardware design. They are designed
from the ‘top-down’ to achieve their reliability and unpredictable or emergent
results cannot be tolerated using this design approach. Physarum-based computing uses the opposite approach — simple low-level interactions generate
complex and unpredictable emergent computing abilities from the ‘bottomup’. Although we cannot guarantee the low-level reliability of the output of
foraging in the Physarum plasmodium we can state that the plasmodium will
forage and that the resultant emergent behaviour will be complex and unpredictable. Harnessing this spatial and temporal unpredictability, for example
in a manner as suggested by [3], may prove to be a more suitable application
of the computational properties of Physarum.
Although the use of Physarum for classical logical gates indeed makes use
of its intrinsic properties (gradient oriented growth, avoidance, fusion), the
confinement of this naturally amorphous, dynamic and flexible organism into
architectures which require precise timing and predictable path traversal does
not utilise the natural advantages which the organism possesses. The increasing failure rate when circuit complexity is scaled upwards may — perhaps fancifully — be interpreted as the embodiment of an internal frustration by the
plasmodium at such confinement and control. It appears likely that Physarum
may be more naturally suited to device implementations which harness its
abilities in integrating complex, noisy, unpredictable, spatial and temporal
signals. In such devices the concept of rigid control of behaviour will be reduced to an influence on behaviour, where the influence is applied as a +ve
or -ve stimuli which affects behaviour. Suggested lines of inquiry lie in pattern recognition, signal generators (oscillators), signal filtration and memory
storage. We plan to investigate such devices in a further study.

8

Acknowledgment

This research is funded by the Leverhulme Trust project F/00577/I “Mould
intelligence: biological amorphous robots”.
16

References
[1] Adamatzky, A. Physarum machine: implementation of a Kolmogorov-Uspensky
machine on a biological substrate. Parallel Processing Letters 17 (2007) 455–
467.
[2] Adamatzky A. Developing proximity graphs by Physarum Polycephalum: Does
the plasmodium follow Toussaint hierarchy? Parallel Processing Letters 19
(2008) 105–127.
[3] Aono M., Hirata Y., Hara M., Aihara K. Amoeba-based chaotic
neurocomputing: Combinatorial optimization by coupled biological oscillators.
New Generation Computing 27 (2009) 129–157.
[4] Jones J. Passive vs active approaches in particle approximations of reactiondiffusion computing. Int. Jnl. of Nanotechnology and Molecular Computation,
1 (3) 37–63 (2009).
[5] Jones J. Approximating the Behaviours of Physarum polycephalum for
the Construction and Minimisation of Synthetic Transport Networks,
Unconventional Computation 2009, Springer LNCS 5715, 191–208 (2009).
[6] Jones J. The Emergence and Dynamical Evolution of Complex Transport
Networks from Simple Low-Level Behaviours, Int. J. Unconventional
Computing, 6 (2) 125–144 (2010).
[7] Jones J. Characteristics of Pattern Formation and Evolution in Approximations
of Physarum Transport Networks, Artificial Life, 16 (2) 127–153 (2010).
[8] Nakagaki T., Yamada H., Ueda T. Interaction between cell shape and
contraction pattern in the Physarum plasmodium, Biophysical Chemistry 84
(2000) 195–204.
[9] Nakagaki T., Smart behavior of true slime mold in a labyrinth. Research in
Microbiology 152 (2001) 767-770.
[10] Nakagaki T., Yamada H., and Toth A., Path finding by tube morphogenesis in
an amoeboid organism. Biophysical Chemistry 92 (2001) 47-52.
[11] Nakagaki T., Iima M., Ueda T., Nishiura y., Saigusa T., Tero A., Kobayashi R.,
Showalter K. Minimum-risk path finding by an adaptive amoeba network.
Physical Review Letters 99 (2007) 068104.
[12] Saigusa T., Tero A., Nakagaki T., Kuramoto Y. Amoebae anticipate periodic
events. Phys Rev Lett. 2008 (100) 018101.
[13] Shirakawa T., Adamatzky A., Gunji Y.-P., Miyake Y. On simultaneous
construction of Voronoi diagram and Delaunay triangulation by Physarum
polycephalum. Int. J. Bifurcation and Chaos 19 (2009) 31093117.
[14] Steinbock O., Toth A., Showalter K. Navigating complex labyrinths: optimal
paths from chemical waves. Science, 267, 868-871, (1995).

17

[15] Tsuda S., Aono M., Gunji Y.-P. Robust and emergent Physarum logicalcomputing. Biosystems 73 (2004) 45–55.
[16] Tsuda S, Zauner K.-P., Gunji Y.-P. Robot control with bio-logical cells.
BioSystems 87 (2007) 215–223.

18

