VALID PLANE TREES: COMBINATORIAL MODELS FOR RNA
SECONDARY STRUCTURES WITH WATSON-CRICK BASE PAIRS

arXiv:1501.03238v1 [math.CO] 14 Jan 2015

FRANCIS BLACK, ELIZABETH DRELLICH, AND JULIANNA TYMOCZKO
Abstract. The combinatorics of RNA plays a central role in biology. Mathematical biologists have several commonly-used models for RNA: words in a fixed alphabet (representing
the primary sequence of nucleotides) and plane trees (representing the secondary structure,
or folding of the RNA sequence). This paper considers an augmented version of the standard model of plane trees, one that incorporates some observed constraints on how the
folding can occur. In particular we assume the alphabet consists of complementary pairs,
for instance the Watson-Crick pairs A-U and C-G of RNA.
Given a word in the alphabet, a valid plane tree is a tree for which, when the word is
folded around the tree, each edge matchs two complementary letters. Consider the graph
whose vertices are valid plane trees for a fixed word and whose edges are given by Condon,
Heitsch, and Hoos’s local moves. We prove this graph is connected.
We give an explicit algorithm to construct a valid plane tree from a primary sequence,
assuming that at least one valid plane tree exists. The tree produced by our algorithm has
other useful characterizations, including a uniqueness condition defined by local moves. We
also study enumerative properties of valid plane trees, analyzing how the number of valid
plane trees depends on the choice of sequence length and alphabet size. Finally we show
that words with at least one valid plane tree are unusual, in the sense that the proportion
of words with at least one valid plane tree goes to zero as the word size increases. Open
questions and conjectures are given throughout the document.

1. Introduction
DNA has as its core a fundamental combinatorial object: words in a finite sequence, on
which permutations act, with biologically significant output. Until fairly recently RNA was
considered a mute cousin of DNA, important primarily as a stepping stone. Unlike the famous double helix, it has a single strand. Because this strand has many nucleotides, it tends
to fold onto itself like a too-long piece of tape. The base pairs created by this folding define
secondary structure. And it turns out that these secondary structures (and the tertiary
structures—namely the embedding of the secondary structure into 3-dimensional space) determine many other functional aspects of RNA, for instance whether RNA transcribes and
interprets the code in DNA, builds proteins, sends messages, or even even rewrites genetic
code.
In this paper we study a combinatorial model for RNA secondary structures consisting of
plane trees, which are rooted planar trees whose half-edges are ordered counterclockwise
from the root, like those shown in Figure 1. The plane tree model is well-established
[JS14, Rus13, HSS98] and plane trees are conveniently one of the many sets of objects
enumerated by the Catalan numbers [ALW14, McC06]. Though other sets enumerated
by Catalan numbers–including non-crossing matchings and balanced parentheses–are also
1

2

FRANCIS BLACK, ELIZABETH DRELLICH, AND JULIANNA TYMOCZKO

used by mathematical biologists to model RNA secondary structures, plane trees have the
advantage of depicting a simplified shape of the observed RNA secondary structure.
However the standard plane tree model does not incorporate information about base pairs.
In this paper we assume an alphabet consisting of pairs of complementary letters and add
the constraint that a letter can only pair with its complement. For instance we might take
the alphabet to consist of the four nucleotides {A, C, G, U} and the complementary pairs
to be the Watson-Crick complements A-U and C-G.
1 4

1

4
2

3

2 3

Figure 1. The two plane trees with two edges
A primary structure P is a word in our alphabet. Given a primary structure P , a plane tree
S is called P -valid if folding P into the shape S leaves every letter in P matched with its
complement (see Definition 2.4). Condon, Heitsch, and Hoos defined an operation on the
set of plane trees called local moves, which “unzip” two adjacent edges and “rezip” them
in another arrangement (see Definition 2.2). We refine this to consider valid local moves,
which require both initial and final plane tree to be valid plane trees.
B B

B

B

B B

B

B

Figure 2. Only the plane tree on the right is valid for P = BBBB.
We then answer a collection of questions about primary sequences P and their P -valid
plane trees. The first set assume we are given a primary structure and ask about the
possible secondary structures:
• Can we find a valid plane tree for P if one exists? (Yes, by a greedy algorithm
described in Definition 3.1.)
• Given a primary sequence P with at least one valid plane tree, how many orbits does
it have under the action of valid local moves? (Just one, by Theorem 3.5.)
• Valid local moves of type 2 are a kind of collapsing operation on valid plane trees.
When can we apply valid local moves of type 2? (On all trees except the tree
produced by the greedy algorithm; see Corollary 3.7.)
The second set of questions asks about the possible primary sequences that satisfy various
constraints:
• How many sequences have exactly k valid plane trees? (See Proposition 4.2, which
says none if k > Cn , and Proposition 4.5, which says none if Cn−1 < k < Cn , and
other results in Section 4.)

VALID PLANE TREES

3

• How does the number of valid plane trees depend on the choice of sequence length
2n and alphabet size 2m? (See Section 4 for some results.)
• How many sequences P have a valid plane tree? (Relatively few–Theorem 5.3 shows
that the ratio of sequences with a valid plane tree to all sequences approaches zero
as the size of the plane tree increases.)
Many open questions are also included throughout the document.
2. Valid plane trees and valid local moves
A plane tree is a rooted tree for which the children of each vertex are ordered. For example
these two trees are different plane trees:

We label the half-edges of a plane tree 1 through 2n starting on the left side of the leftmost
edge adjacent to the root, and walking around the tree counter-clockwise. The edges of the
tree are called e(i, j) where i and j are the labels on the left and right sides of the edge,
respectively. For example this tree contains the edges e(1, 2), e(3, 6) and e(4, 5):
6

1

3

2

5
4

In the classical plane tree model of RNA-folding, the sequence of half-edges corresponds to
the primary structure. The plane tree model as presented by Condon, Heitsch, and Hoos
assumed that each half-edge corresponded to a string of six Gs or six Cs, all of which are
paired [Hei, see Section 4]. Hairpin loops, bulges, and most other unmatched biological
structures are omitted in the graph. (In fact RNA secondary structure always contains
unpaired nucleotides since a hairpin loop with at least three unpaired nucleotides is needed
for any pairs to bond.)
Plane trees are also important combinatorial objects. We note three classical properties
that are useful in proofs.
Proposition 2.1. Properties of plane trees:
(1) (Non-crossing condition) No edges e(i, j) and e(i′ , j ′ ) have i < i′ < j < j ′ .
(2) For each edge e(i, j) the half-edges labeled {i + 1, i + 2, . . . , j − 1} form a subtree, as
do the half-edges labeled {1, 2, . . . , i − 1, j + 1, j + 2, . . . , n}.
(3) For each edge e(i, j), the half-edges i and j are of opposite parity.
Proof. The non-crossing condition follows from the construction of plane trees. The second
property follows from the non-crossing condition. The third property follows from the
second.


4

FRANCIS BLACK, ELIZABETH DRELLICH, AND JULIANNA TYMOCZKO

Condon, Heitsch, and Hoos defined local moves to be the following operation on pairs of
edges in a plane tree, which corresponds to an unfolding-and-refolding operation on nearby
base pairs in a strand of RNA [Hei, Definition 8].
Definition 2.2. Let i < j < i′ < j ′ and fix a plane tree S. The two local moves are
• type 1: if e(i, j) and e(i′ , j ′ ) are adjacent edges in S then e(i, j), e(i′ , j ′ ) are replaced
by e(i, j ′ ), e(j, i′ ).
• type 2: if e(i, j ′ ) and e(j, i′ ) are adjacent edges in S then e(i, j ′ ), e(j, i′ ) are replaced
by e(i, j), e(i′ , j ′ ).
A local move results in a new plane tree S ′ .
Figure 3 shows the local moves. Note that local moves can be performed on edges without
any successively-labeled half-edges, namely with i < j − 1 and j < i′ − 1 and i′ < j ′ − 1. In
other words there can be many other edges incident to the vertices in Figure 3, including
edges that come between the edges sketched in the schematic.
type 1 move
′

j

i

i j′

i

′

j

type 2 move

j i′

Figure 3. Local moves
We define plane trees for sequences other than Cordon, Heitsch, and Hoos’ (GC)n . We are
motivated by the example of RNA but an arbitrary alphabet consisting of complementary
pairs is more mathematically natural.
Definition 2.3. A set A is a complementary alphabet if for every letter B ∈ A there is a
unique complement B ∈ A.
Though the collection of nucleotides {C, G, A, U} is our foundational example, it is in fact
not a complementary alphabet. The so-called Watson-Crick pairs C − G and A − U form
the strongest and second-strongest bonds respectively. However G − U pairs, called wobble
pairs, also bond in nature, though more weakly than the others.
The next definition introduces one of the key objects in this paper: valid plane trees. Valid
plane trees improve upon the plane tree model by considering whether, using only the
Watson-Crick pairs, the primary structure of the RNA could actually form the secondary
structure of the plane tree.
Definition 2.4 (P -valid plane trees). Let S be a plane tree in Tn and let P = p1 p2 · · · p2n
be a word in a complementary alphabet A. We say S is a P -valid plane tree if for every
edge e(i, j) in S the letters pi and pj are a complementary pair in A. We may refer to S as
a valid plane tree if P is clear from context.
Every P -valid plane tree S induces a perfect matching on the letters p1 p2 · · · p2n = P of the
word P . If pi and pj label the two half-edges of a single edge in S then we refer to pi and

VALID PLANE TREES

5

pj either as a match or as a pair. We tend to use the word pair in biological contexts and
to discuss the alphabet, and match to describe the mathematical matching itself (in total
or in part).
We only consider local moves that send P -valid plane trees to other P -valid plane trees.
More precisely we have the following definition.
Definition 2.5. Fix a primary sequence and let S be a P -valid plane tree. A valid local
move on S is a local move on S such that the resulting plane tree S ′ is also P -valid.
The following two claims are immediate since local moves are invertible.
Proposition 2.6. A local move of type 1 is valid if and only if the inverse local move of
type 2 is valid.
Corollary 2.7. The following conditions are necessary and sufficient to guarantee the existence of a valid local move:
• There is a valid type 1 local move on adjacent edges e(i, j) and e(i′ , j ′ ) if and only if
half-edges i and j ′ are labeled B and j, i′ are labeled B.
• There is a valid type 2 move on adjacent edges e(i, j) and e(i′ , j ′ ) if and only if
half-edges i and i′ are labeled B and j, j ′ are labeled B.
The previous results imply that we can use valid plane trees and local moves to create a
graph. This graph, defined in the next corollary, is a central object of study in the next
sections.
Corollary 2.8. Fix a primary structure P . Let GP be the graph whose vertices are P -valid
plane trees and with an edge between two valid plane trees if they are connected by a valid
local move. Then GP is a well-defined undirected graph.

Figure 4. The graph GP for P = AAAABBBB

6

FRANCIS BLACK, ELIZABETH DRELLICH, AND JULIANNA TYMOCZKO

3. Graph of valid plane trees: Global Structure
Given a primary structure P this section considers the overall structure of the graph GP of
P -valid plane trees. We give an algorithm that produces a P -valid plane tree from P exactly
when the graph GP is nonempty. The algorithm is greedy in the sense that it matches letters
in P opportunistically as it reads through the word. Theorem 3.5 shows that the graph GP
is connected. Define a graph GP+ by directing each edge in GP consistently with its type 2
move. Corollary 3.7 proves that GP+ has a unique sink. This 2-sink is characterized in a
number of different combinatorial ways in Corollary 3.10, including as the tree produced by
the greedy algorithm.
We begin with the algorithm.
Definition 3.1 (The greedy algorithm). Given a primary structure P = p1 p2 · · · pn the
greedy algorithm matches letters together as follows. Start at p1 . At each letter pi consider
the most recent unmatched letter pji . (More precisely ji is the maximal integer 1 ≤ ji < i
such that pji is unmatched.) If pi and pji are complements then match them by forming edge
e(i, ji ); otherwise leave them unmatched and proceed to the next letter pi+1 . The algorithm
terminates when each letter in the word P has been considered and either matched or left
unmatched.
If the greedy algorithm produces a valid tree, we call the tree T0 (P ) or T0 when P is clear.
B
B

B B

B
B

B B

Figure 5. T0 for the sequence BBBBBBBB
RNA molecules do not wait patiently to be fully formed before starting to fold. As they grow
longer RNA molecules begin to refold into shapes that minimize free energy [FH08]. The
greedy algorithm models the first folds, before the effects of energy-minimization dominate.
The output of the greedy algorithm satisfies several properties that are reminiscent of Proposition 2.1.
Lemma 3.2. The output of the greedy algorithm satisfies the following properties:
• (Noncrossing property) No edges e(i, j) and e(i′ , j ′ ) produced by the greedy algorithm
have i < i′ < j < j ′ .
• If the greedy algorithm produces an edge e(i, j) then every half-edge i+1, i+2, . . . , j−1
is matched in the output of the greedy algorithm.
• If the greedy algorithm produces an edge e(i, j) then the half edges i+1, i+2, . . . , j −1
form a subtree in the output of the greedy algorithm.
• Suppose the greedy algorithm on the sequence P produces output O that contains a
subtree indexed by half-edges i + 1, i + 2, . . . , j − 1. Let P ′ be the sequence obtained
by erasing the letters indexed by i + 1, i + 2, . . . , j − 1 in P and define O ′ by erasing

VALID PLANE TREES

7

half-edges i + 1, i + 2, . . . , j − 1 from O. Then O ′ is the output of the greedy algorithm
performed on P ′ .
Proof. Suppose that i and i′ are unmatched after the i′th step in the greedy algorithm. Then
by definition the i′th is a more-recent unmatched edge than the ith so the half-edge j will
form an edge e(i′ , j) rather than e(i, j). Moreover if e(i, j) is an edge produced by the greedy
algorithm then none of i + 1, i + 2, . . . , j − 1 can be unmatched, else there was a more-recent
unmatched edge with which j could match. Combining the first two claims shows that the
half-edges {i + 1, . . . , j − 1} form a perfect matching; the resulting collection of edges is
connected and acyclic by construction of the greedy algorithm, and so induces a tree.
The greedy algorithm can only match a half-edge labeled j, j + 1, . . . in P with something
labeled k where k ≥ j or k ≤ i since the half-edges {i + 1, i + 2, . . . , j − 1} are all matched
with each other. In both cases, the greedy algorithm on P ′ will match the corresponding
half-edges. If the greedy algorithm on P cannot match a half-edge labeled with one of
j, j + 1, . . . then the corresponding statement is true for P ′.

In fact if a primary structure has any valid plane tree, then the greedy algorithm will produce
a valid plane tree. The next theorem proves this claim using induction on the length of the
primary structure.
Theorem 3.3. Given a primary structure P , the greedy algorithm produces a valid plane
tree if a valid plane tree exists.
Proof. We induct on the length of P . If P has length two and has a valid plane tree, then
P = BB and the greedy algorithm produces a valid plane tree with one edge. Assume that
if P is a sequence of length at most 2n − 2 that has a valid plane tree, then the greedy
algorithm produces a P -valid plane tree.
Let P be a sequence of length 2n with at least one valid plane tree. Let O be the output of
the greedy algorithm (not necessarily a plane tree) and let T be a P -valid plane tree. We
will find a subtree with at least one edge that is shared by both T and O, say T ′′ . Once we
have T ′′ let P ′ be the sequence obtained by removing the letters corresponding to T ′′ from
P and denote by T ′ and O ′ the result when T ′′ is removed from T and O respectively. Note
that T ′ is a P ′-valid plane tree and O ′ is the output of the greedy algorithm performed on
P ′ by Lemma 3.2. By induction O ′ is a P ′ -valid plane tree so O is a P -valid tree as well.
Thus it suffices to show that O and T share a common subtree. Assume that i labels the
first half-edge at which the two disagree. We show by contradiction that i must be a left-half
of an edge e(i, k) in T . If not then i is a right-half of an edge e(j, i) in T . Both T and O
agree before i so j is also an unmatched left half-edge at the ith step of the greedy algorithm.
Since e(j, i) is not an edge in O we know there is another more recent unmatched half-edge
j ′ with j < j ′ < i. Since T and O agree for the first i − 1 half-edges we know that e(j ′ , k)
is an edge in T for some k > i. But then T has edges e(j, i) and e(j ′ , k) for j < j ′ < i < k
which violates the noncrossing condition.
Since O and T differ at the ith half-edge we conclude that i is a right-half-edge in O. Say
i forms the edge e(j, i) in O. We will find a subtree within the first i half-edges of both O
and another P -valid plane tree.

8

FRANCIS BLACK, ELIZABETH DRELLICH, AND JULIANNA TYMOCZKO

Consider the half-edges j + 1, j + 2, . . . , i − 1 in both O and T . If there are no such edges
then e(j, i) = e(i − 1, i) is a leaf in O while e(i − 1, k ′ ), e(i, k) are edges in T . The valid local
move on edges e(i − 1, k ′ ), e(i, k) in T produces a P -valid plane tree T ′ with leaf e(i − 1, i).
The tree T ′ also agrees with T in half-edges 1, 2, . . . , i since k, k ′ > i. The leaf e(i − 1, i) in
T ′ is the desired common subtree with O.
Otherwise the edges j + 1, j + 2, . . . , i − 1 in O form a subtree by Lemma 3.2. Both O and
T agree on the first i − 1 half-edges so the half-edges {j + 1, j + 2, . . . , i − 1} form a subtree
in T as desired. This proves the claim.

In fact we can say more about the valid plane tree that the greedy algorithm produces: it
cannot have any valid local moves of type 2.
Corollary 3.4. The greedy algorithm produces a valid plane tree with no valid local moves
of type 2.
Proof. Consider the first valid local move of type 2 if you start at the root of T0 and work
clockwise through the half-edges. The first valid local move of type 2 involves two adjacent
edges e(i, j) and e(i′ , j ′ ) such that i < i′ < j ′ < j. If the half-edge i has label B then the
half-edges j and i′ must both be labeled by B while half-edge j ′ is labeled B. When the
greedy algorithm reaches half-edge j then the half-edge i′ is unmatched more recently than
the half-edge i. Since half-edges i and i′ can bond, the greedy algorithm should have bonded
them. Therefore T0 has no valid local moves of type 2.

We now conclude that in fact the graph whose vertices are valid plane trees and whose edges
are local moves is connected.
Theorem 3.5. Fix a primary structure P . The graph GP is connected.
Proof. We induct on the size of the sequence P . The claim is trivial when P has 2 letters
since in that case there is a unique valid plane tree. Suppose that for every primary structure
with at most 2(n − 1) letters, the graph whose vertices are valid plane trees and whose edges
are local moves is connected. Fix a primary structure P with n letters and consider two
distinct P -valid plane trees S and T . Either one edge e(i, j) is in both S and T or they
share no common edges.
If any edge e(i, j) appears in both, then delete that edge. The edges closer to the root than
e(i, j) (namely those indexed e(i′ , j ′ ) for i′ < i and j ′ > j) form a tree S ′ while the edges
farther from the root than e(i, j) (namely those indexed e(i′ , j ′ ) for i < i′ , j ′ < j) form a
tree S ′′ . Similarly we obtain trees T ′ and T ′′ from T . By construction the half-edges in S ′
and T ′ have the same labels, as do the half-edges in S ′′ and T ′′ . Thus S ′ and T ′ are P ′-valid
plane trees, where P ′ is the subsequence of P consisting of the letters in positions i′ for
i′ < i or i′ > j. Similarly S ′′ and T ′′ are P ′′ -valid plane trees, where P ′′ is the subsequence
of P consisting of the letters in positions i′ for i < i′ < j. By induction there are valid local
moves taking S ′ to T ′ and S ′′ to T ′′ . Implement the same local moves on S to get valid local
moves that take S to T .
Now suppose S had T have no common edges. Consider a leaf of S say e(i, i + 1). Since it
is not a leaf in T the half-edges labeled i and i + 1 have one of the following configurations
in T :

VALID PLANE TREES

i j

9

k i+1

(b) i and i + 1 on right

i

1

(a) i and i + 1 on left

j
i+

j i

k

i+1 k

(c) i and i + 1 on peak

Since e(i, i + 1) is an edge of a valid plane tree, edges i and i + 1 are labeled B and
B respectively. Thus the half-edge j must be labeled B and the half-edge k must be B
regardless of the configuration. Each configuration has a valid local move that results in
tree T ′ with leaf e(i, i + 1). By the previous case there is a sequence of valid local moves
between S and T ′ and so there is a sequence of valid local moves between S and T as well.
This proves the claim.


In fact more is true: the tree T0 produced by the greedy algorithm is the only P -valid
plane tree with no valid local moves of type 2. The proof walks through the definitions,
particularly using the non-crossing condition of half-edges in plane trees.
Theorem 3.6. Suppose T is a P -valid plane tree that is not T0 . Then T has a valid local
move of type 2.

Proof. Since T is not T0 we know that there is a first half-edge i that did not match with
the most-recent unmatched edge j when it could have. In other words we can show
• i and j are both left half-edges in T
• that have complementary labels, say B and B respectively, and
• all of the half-edges corresponding to letters pj+1 , pj+2, . . . , pi−1 in P are matched in
T.
The second claim follows from the fact that the ith and j th half-edges could match.
We prove the third claim next: that half-edges indexed j +1, . . . , i−1 are matched with each
other and with no other half-edges. Every left half-edge labeled with one of pj+1, . . . , pi−1
is matched with a right half-edge labeled by one of pj+1 , . . . , pi−1 else j could not be the
most-recent unmatched edge for i. This accounts for all of the right half-edges labeled by
pj+1 , . . . , pi−1 since otherwise some j ′′ ∈ {j + 1, j + 2, . . . , i − 1} matched with a half-edge j ′
with j ′ < j. Then T contains edges e(j ′ , j ′′ ) and e(j, k) where k > i is the half-edge matched
with j in T . This violates the noncrossing condition of plane trees.
Thus all of the half-edges labeled with pj+1 , . . . , pi−1 are matched amongst each other in T .
We claim that these edges form a rooted subtree whose root is incident to both the ith and
j th half-edges as shown in Figure 6.

10

FRANCIS BLACK, ELIZABETH DRELLICH, AND JULIANNA TYMOCZKO

left half-edges match T0

pj = B B

matches T0
pi = B B

Figure 6. If T differs from T0 then T has a type-2 local move.
The proof is by induction on the cardinality |{j + 1, . . . , i − 1}|, which we saw is even. If
the cardinality is zero, the claim is trivial. Now consider the edges e(j ′ , j ′′ ) with j ′ , j ′′ ∈
{j + 1, . . . , i − 1}. The difference j ′′ − j ′ is an odd number by properties of plane trees. If
j ′′ − j ′ is not one then by the noncrossing condition of plane trees there must be at least
one edge e(i′ , i′′ ) with j ′ < i′ < i′′ < j ′′ . Thus the difference i′′ − i′ is less than j ′′ − j ′ .
Since there are only a finite number of edges e(j ′ , j ′′ ) with j ′ , j ′′ ∈ {j + 1, . . . , i − 1} we
conclude that there is at least one edge e(j ′ , j ′′ ) with j ′′ − j ′ = 1. In other words there is at
least one leaf e(j ′ , j ′′ = j ′ + 1) within the set of half-edges {j + 1, . . . , i − 1}. Removing the
leaf e(j ′ , j ′′ ) preserves the property that the edges labeled {j + 1, . . . , i − 1} form a rooted
subtree whose root is a vertex incident to both the ith and j th half-edges. By induction the
claim is proven.
We conclude that the ith and j th half-edges are left edges with complementary labels B and
B that are incident to the same vertex in T . If the edges containing i and j in T are e(i, ki )
and e(j, kj ) then by definition we may perform a valid local move of type 2 on e(i, ki ) and
e(j, kj ) as desired.

In other words consider the graph GP+ in which each edge is directed consistently with local
moves of type 2. Then GP+ has a unique sink, and that sink corresponds to the valid plane
tree T0 .
Corollary 3.7. Fix a primary sequence P with a valid plane tree and let T0 be the valid
plane tree for P produced by the greedy algorithm. Let GP+ denote the graph whose vertices
are valid plane trees for P and with a directed edge T → T ′ if there is a local move of type
2 from T to T ′ .
The valid plane tree T0 is the unique sink in the directed graph GP+ .
Proof. Corollary 3.4 proved that T0 has no edges directed out so T0 is a sink in GP+ . Theorem
3.6 proved that every other tree has at least one edge directed out so there are no other
sinks in the graph GP+ .


VALID PLANE TREES

11

GP+

Remark 3.8. The graph
may have several sources. For instance the graph on the
sequence AABBAABB has two sources and one sink.

Figure 7. The graph of valid plane trees for AABBAABB with type 2 edges.
Corollary 3.9. The graph GP+ has no directed cycles. There is a path consisting only of
type-2 valid local moves from every valid plane tree T in GP+ to T0 .
Proof. Consider the total distance from the root in a valid plane tree, defined as
X
dT =
dist(v, v0 )
v∈T

where v0 is the root. Figure 8 shows that dT drops by at least one with each valid local
move of type 2 (and more if the subtree labeled C in Figure 8 is non-empty).
A

B

A

D

type 2

C
B

D

C
Figure 8. A generic move of type 2
Since the total distance dT can only decrease there are no directed cycles in the graph GP+ .
Moreover Theorem 3.5 proved that the undirected graph GP is connected and hence GP+ has
only one connected component. Consider the following process: given a tree T in the graph
GP+ follow any edge out of T . Repeat until you reach a tree with no edges directed out
within the graph GP+ . Since GP+ has no directed cycles and only finite number of trees, we
know this process terminates. Since T0 is the unique tree with no edges directed out of it
in GP+ we know the process terminates at T0 . Thus there is a path consisting only of type 2
valid local moves from every valid plane tree T to T0 as desired.

We can collect all of this information concisely as follows.
Corollary 3.10. Let P be a primary sequence with at least one P -valid plane tree. The
following are equivalent.

12

FRANCIS BLACK, ELIZABETH DRELLICH, AND JULIANNA TYMOCZKO

• T0 is the unique sink in the graph GP+ .
• T0 is the plane tree produced by the greedy algorithm on P .
• For each plane tree T with root v0 define the total distance dT =
Among the P -valid plane trees T0 has minimum total distance.

P

v∈T

dist(v, v0 ).

4. Number of Valid Plane Trees: the Size of GP
A generic unfolded primary sequence P has two main parameters: the length of the sequence
P and the size of the alphabet from which the letters of P are drawn. The vast majority of
primary sequences have no valid plane trees at all, as we discuss in the next section. This
section gives results showing how the size of GP depends on n and m. It also includes many
conjectures drawn from experimental data.
Some notation makes the discussion in this and following sections easier. Denote the length
of the sequence by 2n. If the alphabet has 2m letters we say it has m complementary
matchs.
Notation 4.1. Given sequences of length 2n in complementary alphabets with m matchs:
• P(n, m) is the set of valid sequences of length 2n in a complementary alphabet with
m pairs, namely sequences P with at least one P -valid plane tree.
• V (P ) is the set of P -valid plane trees for a fixed primary sequence P . These are the
vertices of the graph GP .
• N(n, m, k) is the set of valid sequences P ∈ P(n, m) such that |V (P )| = k.
• R(n, m) is the set of k ∈ Z such that N(n, m, k) is non-empty.
We computed the size of the sets N(n, m, k) for small values of n and m. Figure 9 marks
with an X each (n, k) such that N(n, 1, k) is non-empty for n ≤ 7.
4.1. Describing N(n, m, k). We can bound the k for which N(n, m, k) is nonzero and can
describe N(n, m, k) in the boundary cases.
Proposition 4.2. Fix a length 2n and a complementary alphabet A with m complementary
matchs. Let Cn be the nth Catalan number. Then for any primary sequence P in A
0 ≤ |V (P )| ≤ Cn
Proof. For a primary sequence P , each P -valid plane tree has n edges and there are Cn
plane trees with exactly n edges. Thus the maximum size |V (P )| for any P ∈ P(n, m) is
Cn . The minimum size of |V (P )| is zero so the claim follows.

Note that P(n, m) is defined to be only the set of primary sequences with at least one valid
plane tree so for P ∈ P(n, m) we have |V (P )| > 0.
In fact the upper bound is always attained, as the next proposition demonstrates.
Proposition 4.3. Every plane tree is a valid plane tree for the primary structure BBBB...BB.
In particular if Cn is the nth Catalan number then Cn ∈ R(n, m) for all n, m.

VALID PLANE TREES
7 X X X X X X X X X X

X

X X X

X X X

X X

6 X X X X X X X X

X

X

X

X

X X

5 X X X X X

X

X

X

13
X

X X

X

X

X

X

X

X

X

X

X
X

4 X X X X X
3 X X

X

X

X

X

2 X X
n=1 X
k = 11 22

3

4

55

6

7

8

9

10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56

14

42

70

84

132 429

Figure 9. k in R(n, 1).
Proof. Each edge e(i, j) consists of two half-edges i, j of opposite parity. The letters in
positions of opposite parity in the primary sequence BBBB...BB are always complements
so every plane tree is valid for this sequence. Thus N(n, m, Cn ) is nonempty as desired. 
Figure 9 connects the Xs that mark Cn ∈ R(n, 1) with a dotted line.
We can compute |N(n, m, Cn )| as follows.
Proposition 4.4. Let Cn be the nth Catalan number. The set N(n, m, Cn ) has size 2m.
Proof. If P ∈ P(n, m) does not have structure BBBB...BB then there is an edge e(i, j)
such that i and j have different parity and but the letters pi and pj are not complements.
Thus no plane trees with the edge e(i, j) are P -valid. It follows that there are fewer than Cn
valid plane trees for P . Since there are 2m possibilities for the letter B, there are exactly
2m sequences P with Cn valid plane trees.

The Catalan number Cn−1 is also in R(n, m) for all m. Indeed consider the primary sequence
P = (BB)n−1 BB in P(n, m). The last two letters must match because P has exactly one
B in an odd position and exactly one B in an even position. By Proposition 4.3 the rest of
the word can form any possible valid plane tree on 2n − 2 half-edges and so |V (P )| = Cn−1 .
In fact if a sequence in P(n, m) has more than Cn−1 valid plane trees, then all Cn possible
plane trees must be valid. In other words R(n, m) has a large gap between its largest element
Cn and its second largest Cn−1 .
Proposition 4.5. If k is an integer satisfying Cn−1 < k < Cn then k 6∈ R(n, m).
Proof. We show that if P ∈ P(n, m) has fewer than Cn valid plane trees then it has at most
Cn−1 valid plane trees. Let P = p1 p2 · · · p2n be a valid sequence and suppose that there is
some plane tree that is not P -valid. Define the following function on valid sequences:
nodd (P ) = max |{pi ∈ P : i is odd and pi = B}|
B∈A

The maximum nodd must be strictly less than n because at least one plane tree is not P -valid.
Since a P -valid plane tree exists, there must also be nodd even-indexed letters B in P .
This 2nodd -length subword in the letters {B, B} can form at most Cnodd subtrees (and quite
possibly fewer). The remaining 2n − 2nodd half-edges can form a maximum of Cn−nodd plane
trees so
|V (P )| ≤ Cnodd · Cn−nodd .

14

FRANCIS BLACK, ELIZABETH DRELLICH, AND JULIANNA TYMOCZKO

The product Cnodd · Cn−nodd is maximized when nodd = n − 1 or 1. A primary sequence with
nodd = 1 only has one valid plane tree. Thus nodd = n − 1 and the claim follows.

We can also characterize the sequences P that have exactly Cn−1 valid plane trees.
Proposition 4.6. There are exactly 4m(2m − 1)n sequences P ∈ P(n, m) with exactly Cn−1
valid plane trees, i.e.
|N(n, m, Cn−1 )| = 4m(2m − 1)n.
Proof. Following the previous proof, if |V (P )| = Cn−1 then nodd (P ) = n − 1. Exactly one
odd position does not contribute to nodd and exactly one even position matches it. Denote
these two positions i < j. There are 2m ways to choose a letter B ∈ A for the n − 1 odd
positions not in {i, j}. Since P is valid the even positions not in {i, j} must be B. The
letters pi and pj must also be complementary. The letter in the odd position can be any of
the 2m − 1 letters A \ {B}. This choice determines the other letter.
We determine the constraints on i and j by identifying where in the P -valid tree the edge
e(i, j) can go. Removing the edge e(i, j) divides the remaining edges into two parts, each
forming its own valid plane tree:

Cn− j−i+1 possible
2
subtrees

i j

C j−i−1 possible
2
subtrees

This gives C j−i−1 · Cn− j−i+1 P -valid plane trees. We assumed that |V (P )| = Cn−1 which
2
2
implies either
• j = i + 1 and e(i, j) is a leaf, or
• i = 1 and j = 2n so e(i, j) is the unique edge adjacent to the root.
This leaves 2n possibilities for the edge e(i, j). Thus there are (2m)(2m − 1)(2n) sequences
in N(n, m, k).

We can characterize the set N(n, 1, 1) using a similar arguement.
Proposition 4.7. The set N(n, 1, 1) has size 2n.
Proof. We show that unless the primary sequence P on the alphabet {B, B} has a very
special form, then we can find a P -valid plane tree with a valid local move. Hence P has at
least two P -valid plane trees and so P 6∈ N(n, 1, 1).

VALID PLANE TREES

15

Suppose v is a vertex in a P -valid plane tree on the alphabet {B, B} that is incident to
three edges. Then two of the left-edges incident to v have the same label by the pigeonhole
principle. Thus there is a valid local move at the vertex v. It follows that if P has only one
P -valid plane tree then that tree is a path. Moreover each pair of adjacent edges in that
path must share the same left half-edge label otherwise there is a P -valid local move. So
if P has only one P -valid plane tree then B is the only letter on one side of the path and
B is the only letter on the other side. There are two choices for the side that has B and n
choices for the location of the root. Thus there are 2n primary sequences P with a unique
P -valid plane tree as claimed.

The arguments in the previous proof lead us in two directions.
Question 4.8. Consider N(n, m, 1) for m > 1.
• If the alphabet is larger then the previous argument can be modified to show that any
plane tree with a vertex of degree at least 2m+1 cannot represent a primary sequence
for P ∈ N(n, m, 1). Can we characterize the primary sequences P ∈ N(n, m, 1)?
• A path can be labeled so that there are no valid local moves. What conditions on
plane trees and alphabet size ensure that a plane tree has a special primary structure
preventing any valid local moves?
4.2. Comparing R(n, m) for different n and m. In this section we further analyze the
sets R(n, m). For instance Propositions 4.2 and 4.5 showed that |R(n, m)| ≤ Cn−1 + 1. Our
data and the following preliminary results suggest two things:
• R(n, m) depends surprisingly little on the size of the underlying alphabet.
S
• The set n,m R(n, m) contains surprisingly many integers–conjecturally all of the
integers.

We begin by observing that increasing the alphabet size strictly increases the set R(n, m).
Proposition 4.9. R(n, m) ( R(n, m + 1)

Proof. Every primary sequence on the alphabet {B1 , B1 , · · · , Bm , Bm } is also a primary
sequence on the alphabet {B1 , B1 , · · · , Bm+1 , Bm+1 }.

In fact our data suggests something stronger.
Conjecture 4.10. The set R(n, m) depends only on n.
We calculated R(n, 2) for n ≤ 6, R(n, 3) and R(n, 4) for n ≤ 5, and for n ≤ 4 we computed
R(n, m) for m ≤ 10. In all of these cases R(n, m) matches R(n, 1).
We can also exploit prime factorization to construct sets R(n, m) that contain desired elements.
Proposition 4.11. Let k ∈ Z≥0 factor into a product of primes k = pα1 1 · · · pαℓ ℓ such that
for each i, there exists a pair (ni , mi ) with pi ∈ R(ni , mi ). Then
!
ℓ
ℓ
X
X
k∈R
αi ni ,
αi mi
i=1

i=1

16

FRANCIS BLACK, ELIZABETH DRELLICH, AND JULIANNA TYMOCZKO

P
Proof. Fix a complementary alphabet with ℓi=1 αi mi pairs. For each i with 1 ≤ i ≤ ℓ let
Pi be a primary sequence with ni edges and mi complementary letters that has exactly k
distance Pi -valid plane trees. (This is possible because k ∈ R(ni , mi ).) For each i make αi
copies of Pi and denote them Pi,1 , Pi,2, . . . , Pi,αi . Now change the complementary letters as
needed so that no two primary sequences Pi,j , Pi′ ,j ′ share a letter.
Consider the sequence P = P1,1 P1,2 P1,3 · · · Pℓ,αℓ obtained by writing all of these primary
sequences in one word. No half-edge from Pi,j can match with a half-edge from Pi′ ,j ′ unless
i = i′ and j = j ′ since the alphabets on the subwords Pi,j and Pi′ ,j ′ are otherwise distinct.
Thus every P -valid plane tree consists of Pi,j -valid plane subtrees joined at a common root
and the only P -valid local moves are Pi,j -valid local moves on the subtrees. Since there are
pi of the Pi,j -valid plane trees and since the Pi,j -valid local moves are independent, there
are k = pα1 1 · · · pαℓ ℓ P -valid plane trees as desired.

This leads us to the following conjecture.
Conjecture 4.12. For all k ∈ Z≥0 there exists n, m such that k ∈ R(n, m).
By the previous proposition it suffices to prove this conjecture for prime numbers. Computational data showed that the prime numbers 7, 19, and 43 appeared in R(n, 1) for n = 5, 6,
and 7 respectively.
5. How many sequences are valid?
This last section enumerates the total number of primary sequences that have any valid plane
trees at all and proves that they are extremely unusual, in the sense that the ratio of the
number of these primary sequences to all words in 2n letters over the alphabet approaches
zero as n increases.
Our main tool comes from Corollary 3.10: every primary sequence P corresponds to exactly
one labeled tree with no valid local moves of type 2, namely the tree produced by the
greedy algorithm. Thus we may count the number of valid primary sequences by counting
the number of labeled plane trees with no type-2 local moves.
Lemma 5.1. Every plane tree T is the output T0 (P ) of the greedy algorithm for some valid
sequence P .
Proof. Given a plane tree T , label the edges adjacent to the root with any complementary
pair from the alphabet. Each edge not adjacent to the root has a parent edge. Starting
from the edges adjacent to the root, label each edge so that it has no local move with its
parent edge. Then the labeled tree T has no local moves of type 2 and thus is the output
T0 (P ) of the greedy algorithm for the sequence P obtained by reading the labels on the
half-edges.

Note that a labeled tree generated by this procedure does not produce a tree with no local
moves, only with none of type 2. For example if a plane tree has a vertex of degree 2m + 1
or more, there is always a local move; the process in the previous lemma ensures that it is
a local move of type 1.
We now enumerate valid sequences by counting labeled trees with no local moves of type 2.

VALID PLANE TREES

17

Theorem 5.2. The number of valid primary sequences is
(1)

X

|P(n, m)| =

(2m)k · (2m − 1)n−k ·

k
Y

Cλi −1

i=1

λ=(λ1 ,...,λk )
a composition of n

where Cλi −1 is the (λi − 1)th Catalan number.
Proof. By the previous lemma, we can count the number of valid sequences by counting the
number of plane trees with no local moves of type 2. We partition the set of plane trees
based on the number of edges adjacent to the root and the size of the subtrees coming off
of those edges.
Suppose there are k edges adjacent to the root. The k subtrees descending from those k
edges divide the n edges of the tree into k parts, say with the ith of size λi . This gives a
composition λ = (λ1 , ..., λk ) of n. Moreover the ith subtree can be any of Cλi −1 possible
plane trees.
Label the edges in order of their distance to the root. Each of the k edges adjacent to the
root has no parent edge and thus has 2m possible labels. Every other edge in the tree has
a parent so there are 2m − 1 other ways to label that edge without creating a local move of
type 2. Thus there are 2m · (2m − 1)λi −1 · Cλi −1 possibilities for the ith branch.
Taking the product over all k branches, there are (2m)k · (2m − 1)n−k ·

k
Q

Cλi −1 labeled plane

i=1

trees with no valid local moves of type 2 corresponding to the composition λ. Summing
over all compositions λ of n gives the desired result.

The other main result of this section is that the ratio of valid primary sequences to all
primary sequences approaches zero as n increases.
Theorem 5.3. Fix m and let S(n, m) denote all possible words of length 2n over a complementary alphabet with m complementary pairs. Then
|P(n, m)|
= 0.
n→∞ |S(n, m)|
lim


Proof. When m = 1 the number of valid plane sequences |P(n, 1)| is at most 2n
since each
n

.)
valid plane sequence must have the same number of letters B as B. (In fact |P(n, 1)| = 2n
n
2n
There are a total of 2 words in {B, B} of length 2n.
(2n
n)
22n

=
=
=

(2n)(2n−2)(2n−4)···4·2 (2n−1)(2n−3)(2n−5)···5·3·1
·
2n n!
2n n!
2n−1 2n−3 2n−5
3 1
· · · 2·2 2·1
2n 2(n−1) 2(n−2)

Qn−1 
i=0

which approaches zero as n → ∞.

1−

1
2(n−i)



=

Qn

i=1

1−

1
2i



When m > 1 the number of valid plane sequences |P(n, m)| is at most the number of valid
plane trees, since each valid plane sequence P may have several P -valid plane trees. There
are (2m)n Cn valid plane trees since there are Cn plane trees on n edges, 2m ways to pick

18

FRANCIS BLACK, ELIZABETH DRELLICH, AND JULIANNA TYMOCZKO

the letter labeling each left-half-edge, and 1 way to pick the complementary letters on the
right-half-edges. There are a total of (2m)2n words in the alphabet of length 2n. Thus


2n
2n
|P(n, m)|
(2m)n Cn
1
1
n
n
lim
< lim
= lim
< lim
n→∞ |S(n, m)|
n→∞ (2m)2n
n→∞ n + 1 (2m)n
n→∞ n + 1 22n
using
 the definition of Catalan numbers and the fact that m ≥ 2. The binomial coefficient
2n
counts the number of ways to pick a subset of exactly n elements from a set of 2n while
n
(2n
n)
is thus less than
22n counts all possible subsets of a set with 2n elements. The ratio 22n
one. So as n grows we obtain

2n
1
1
|P(n, m)|
n
< lim
<
lim
=0
lim
n→∞ n + 1 22n
n→∞ n + 1
n→∞ |S(n, m)|
which proves the claim.

6. Acknowledgements
The authors gratefully acknowledge useful conversations with Christine Heitsch as well as
the support of the Smith College Center for Women in Mathematics.
References
[ALW14] Drew Armstrong, Nicholas A. Loehr, and Gregory W. Warrington. Rational parking functions
and catalan numbers. arxiv:1403.1845, 2014.
[FH08] Christoph Flamm and Ivo L. Hofacker. Beyond energy minimization: approaches to the kinetic
folding of RNA. Monatsheft fû Chemie Chemical Monthly, 139:447–457, 2008.
[Hei]
Christine E. Heitsch. Combinatorics on plane trees, motivated by RNA secondary structure configurations. preprint.
[HSS98] Ivo L. Hofacker, Peter Schuster, and Peter F. Stadler. Combinatorics of RNA secondary structures.
Discrete Applied Mathematics, 88:207–237, 1998.
[JS14]
Natasa Jonoska and Masahico Saito, editors. Discrete and Topological Models in Molecular Biology.
Natural Computing Series. Springer-Verlag, New York, 2014.
[McC06] Jon McCammond. Noncrossing partitions in surprising locations. American Mathematical
Monthly, 113:598, 610 2006.
[Rus13] Rick Russel, editor. Biophysics of RNA Folding. Springer, New York, 2013.

