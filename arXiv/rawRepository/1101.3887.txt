Mutation-selection dynamics and error threshold
in an evolutionary model for Turing Machines
Fabio Musso§ & Giovanni Feverati†
§

arXiv:1101.3887v1 [q-bio.PE] 20 Jan 2011

Departamento de Fı́sica, Universidad de Burgos,
Plaza Misael Bañuelos s/n, 09001 Burgos, Spain
fmusso@ubu.es

†

Laboratoire de physique theorique LAPTH, CNRS, Université de Savoie,
9, Chemin de Bellevue, BP 110, 74941, Annecy le Vieux Cedex, France
feverati@lapp.in2p3.fr

Keywords: Darwinian evolution, in-silico evolution, mutation-selection, error threshold, Turing machines

Abstract
We investigate the mutation-selection dynamics for an evolutionary computation model based on Turing Machines that we introduced in a previous article [1].
The use of Turing Machines allows for very simple mechanisms of code growth and code activation/inactivation through point mutations. To any value of the point mutation probability corresponds
a maximum amount of active code that can be maintained by selection and the Turing machines that
reach it are said to be at the error threshold. Simulations with our model show that the Turing machines
population evolve towards the error threshold.
Mathematical descriptions of the model point out that this behaviour is due more to the mutationselection dynamics than to the intrinsic nature of the Turing machines. This indicates that this result is
much more general than the model considered here and could play a role also in biological evolution.

1 Introduction
The study of “in silico” evolutionary models has increased significantly in recent times, see [2], [3], [4], [5], [6], [7],
[8], [1] just to give some examples. The basic idea behind these models is to simulate the evolution of computer
algorithms subject to mutation and selection procedures. In this artificial evolution setting, the algorithms play
the role of the biological organisms and they are selected on the basis of their ability in performing one or more
prescribed tasks (replicate themselves, compute some mathematical function, etc.). While the simulated algorithms
have clearly an incomparably lesser degree of complexity than a whatever biological organism, the hope is that (at
least some of) the phenomena observed in the digital evolution model could correspond to general behaviours of
evolutionary systems. Indeed, it seems that this is what happens in some cases: emergence of parasitism in [2],
quasi-species selection in [4] and the striking similarity between the C-value enigma [9] and the phenomenon of
code-bloat in evolutionary programming [10], [1].
One of the motivations for performing artificial evolution experiments is the continuously increasing computational power of modern computers. Nowadays, very fast multiprocessor computers have relatively low prices and
many scientific institutions have at their disposal large facilities for parallel computation. For example, one run
lasting 50000 generations of a population of 300 Turing machines (TMs) of our evolutionary model lasts about
half a day per processor on an ordinary home computer (for the higher value of the states-increase rate pi , for lower
values it lasts considerably less). The long term evolution experiment on E. coli directed by R.E. Lenski reached
the 40000 generations after almost 20 years [11] (however, the population considered in this experiment is much
larger, of the order of 107 cells). When population size is not a crucial parameter, digital evolution experiments
can explore a number of generations inaccessible to laboratory experiments with real organisms. If one wants to
study evolutionary effects on a so large time scale in real biological organisms, then has to resort to paleontological
studies. However, such studies are vexed by the incompleteness of the fossil record and by the unrepeatability of

1

the experiments. Indeed, repeatability allows to discriminate easily among effects due to adaptation and those
simply due to drift. These problems are overcame in laboratory experiments such as Lenski one, but at the price
of reducing the environment to a Petri dish. Artificial evolution experiments allow to explore larger time scales
than laboratory experiments at much reduced costs, but at the higher price of replacing biological organisms with
algorithms. By the way, there is another big advantage when performing artificial evolution experiments, namely
the complete control over all the experimental settings. This gives the opportunity to use a reductionistic approach,
by studying separately the effects of the various mechanisms involved in the evolutionary dynamics, something
that is very difficult to obtain when working with real organisms. Finally, as a last argument in favour of artificial
evolution experiments, we cite one given by Maynard Smith [12]: “...we badly need a comparative biology. So far,
we have been able to study only one evolving system and we cannot wait for interstellar flight to provide us with a
second. If we want to discover generalizations about evolving systems, we will have to look at artificial ones.”
As we said, even the most complicated computer algorithm is incomparably simpler than a whatever biological
organism. Moreover, typical artificial evolution experiments have a unique ecological niche and the interaction
between the artificial organisms is often limited to the comparison of their performances. So, a very big distance
separates artificial evolution experiments from biological evolution. For this reason, many biologists are skeptical
on the biological relevance of the results obtained in the digital framework; for example, some objections typically
raised are reported in [13]. On the other hand, supporters of artificial evolution experiments reply that the observed
results can actually be general phenomena of evolutive systems, therefore being independent from the particular
model under consideration. To test this hypothesis it would be nice to compare the results obtained in the artificial
evolution setting with real biological data, but this is very hard to do for long-term evolutionary effects, that is
where artificial evolution models are most useful. On the other hand, general evolutionary behaviours do emerge
if the mutation-selection dynamics have a prominent role on the peculiar characteristics of the evolving organism.
When this is the case, the observed effects can be reproduced through a population genetic mathematical model.
Indeed, these models center on the dynamics induced by the selection and mutation operators (under some work
hypotheses), more than in the specific details of functioning of the organism. If successful, this procedure extends
the validity of the results observed in the evolutionary model under consideration to all the evolutionary models
working with the same mutation and selection operators (under the same hypotheses). This means that the problem
of the biological relevance of the results obtained in the artificial evolution experiment is switched to the problem
of assessing the biological likelihood of the mutation and selection operators and of the hypotheses used in the
mathematical model.
In this paper we apply this strategy, so that we derive a deterministic and a stochastic population genetic model
of our evolutionary model for TMs. Our main aim is to show that the evolutionary dynamics pushes the TMs
toward the error threshold [14], The population genetic model is used to compute mathematically the value of the
error threshold and to show that this dynamical behaviour is due to quite mild hypotheses
According to this program, in the Materials and Methods section we first briefly recall our evolutionary model
for TMs [1] and the Eigen error threshold concept. A deterministic population genetic model for our digital
evolution model is introduced in the third subsection “The deterministic model”, while its stochastic counterpart
(limited to the evolution of the best performing TMs) is given in the fourth one. In the Results section we report the
results obtained by the computer simulations and compare them with those predicted by the mathematical models.
Finally, our concluding remarks are given in the Discussion section.

2 Materials and Methods
2.1 The evolutionary model
We basically use the same evolutionary programming model based on Turing Machines that has been introduced
in [1]. The following are the only differences between that model and the model we use in this article:
1. the TMs’ movable head can move only right or left, now it cannot stay still (this also affects the definition of
the added state);
2. the TMs’ tape is now circular, so that the TM head cannot exit from the tape;
The first choice allows us to save one bit of memory for each state of the TMs and, at the same time, makes our
definition more similar to the original one [15]. The second choice seems to us the most convenient when dealing
with finite tapes.
To the sake of making this article self-contained, we give a terse description of Turing machines and of the
evolutionary programming model that we use.
2

Turing Machines are very simple symbol-manipulating devices which can be used to encode any feasible
algorithm. They were invented in 1936 by Alan Turing [15] and used as abstract tools to investigate the problem
of functions computability. For a complete treatment of this subject we refer to [16].
A Turing machine consists of a movable head acting on an infinite tape T (t), see figure 1. The tape consists of
discrete cells that can contain a 0 or a 1 symbol. The head has a finite number of internal states that we denote by
N (in which case the TM is called an N-state TM). At any time t the head is in a given internal state s(t) and it is
located upon a single cell k(t) of the infinite tape T (t). It reads the symbol stored inside the cell and, according to
its internal state and the symbol read, performs three actions:
1. “write”: writes a new symbol on the k(t) cell (T (t) 7→ T (t + 1)),
2. “move”: moves one cell on the right or on the left (k(t) 7→ k(t + 1)),
3. “call”: changes its internal state to a new state (s(t) 7→ s(t + 1)).
Accordingly, a state can be specified by two triplets “write-move-call” listing the actions to undertake after reading
respectively a 0 or 1 symbol. There exists a distinguished state (the Halt state) that stops the machine when called.
The initial tape T (0) is the input tape of the TM, and the tape T (t̄) at the instant t̄ when the machine stops is
its output tape, that is the result of executing the algorithm defined by the given TM on the input tape T (0).
However, many TMs will never stop, so that they will not be associated with any algorithm. Moreover, the halting
problem, that is the problem of establishing if a TM will eventually stop when provided with a given input tape, is
undecidable. This means that there will exist TMs for which it is impossible to predict if they will eventually halt
or not for a given input tape.
We have to introduce some restrictions on the definition of the TMs in our evolutionary model. Since we want
to perform computer simulations, we need to use a tape of finite length that we fix to 300 cells. The position of the
head is taken modulo the length of the tape, that is we consider a circular tape with cell 1 coming next cell 300.
Since it is quite easy to generate machines that run forever, we also need to fix a maximum number of time steps,
therefore we choose to force halting the machine if it reaches 4000 steps.
We begin with a population of 300 1-state TMs of the following form
1
0 0 − move1 − Halt
1 1 − move2 − Halt

(1)

where move1 and move2 are fixed at random as Right or Left, and let them evolve for 50000 generations. At each
generation every TM undergoes the following three processes (in this order):
1. states-increase,
2. mutation,
3. selection and reproduction.
States-increase. In this phase, further states are added to the TM with a rate pi . The new states are the same as
(1) with the 1 label replaced by N + 1, N being the number of states before the addition. While it is clear that
the states-increase should be considered a form of mutation (vaguely resembling insertion), we preferred to keep
it distinguished because its effect is always neutral.
Mutation. During mutation, all entries of each state of the TM are randomly changed with probability pm . The
new entry is randomly chosen among all corresponding permitted values excluding the original one. The permitted
values are:
• 0 or 1 for the “write” entries;
• Right, Left for the “move” entries;
• The Halt state or an integer from 1 to the number of states N of the machine for the “call” entries.

3

Selection and reproduction. In the selection and reproduction phase a new population is created from the actual
one (old population). The number of offspring of a TM is determined by its “performance” and, to a minor extent,
by chance. Actually, in the field of evolutionary programming the word used is fitness. However, in population
genetics, fitness is used to denote the expected number of offspring (or the fraction that reach the reproductive age)
of an individual. To avoid ambiguities, we decided to reserve the word fitness for this meaning, and to use the
word performance for the evolutionary programming one. The performance of a TM is a function that measures
how well the output tape of the machine reproduces a given “goal” tape starting from a prescribed input tape. We
compute it in the following way. The performance is initially set to zero. Then the output tape and the goal tape
are compared cell by cell. The performance is increased by one for any 1 on the output tape that has a matching 1
on the goal tape and it is decreased by 3 for any 1 on the output tape that matches a 0 on the goal tape.
As a selection process, we use what in the field of evolutionary algorithms is known as “tournament selection
of size 2 without replacement”. Namely two TMs are randomly extracted from the old population, they run on the
input tape and a performance value is assigned to them according to their output tapes. The performance values are
compared and the machine which scores higher creates two copies of itself in the new population, while the other
one is eliminated (asexual reproduction). If the performance values are equal, each TM creates a copy of itself
in the new population. The two TMs that were chosen for the tournament are eliminated from the old population
(namely they are not replaced) and the process restarts until the exhaustion of the old population. Notice that
this selection procedure keeps the total population size N (with N an even number) constant. From our point
of view this selection mechanism has two main advantages: it is computationally fast and quite simple to treat
mathematically.
The choice of TMs to encode the algorithms in our evolutionary model was convenient for various reasons. The
first reason is that any feasible algorithm can be encoded through a TM (Church-Turing thesis [16]); so that TMs
are universal objects inside the algorithms class. The second reason is that even TMs with a very low number of
states can exhibit a very complicated and unpredictable behaviour (even if the input tape is filled only with zeroes
as in our case, see for example the busy beaver function [17]). Thanks to this property, it is very difficult to predict
the dynamics of our evolutionary model.
While developing the model, we were primarily interested in how the variations in the length of the code affect
the evolutionary dynamics. From this point of view, the TMs present many advantages. The distinction between
coding and non-coding triplets is unambiguous and very easy to verify. We define a triplet as non-coding (with
respect to a given input tape) if mutations in its entries cannot affect the output tape of the TM and we will call it
coding in the complementary case. This definition is practically equivalent to saying that a triplet is coding if it is
executed at least one time when the TM runs on a given input tape and it is non-coding if it is never executed. In
this way, to identify coding triplets, one has only to run the TM on the prescribed input tape and mark the triplets
that are executed. Another advantage is that the mechanism of state-adding is completely neutral; the added states
are always non-coding, so that they cannot change the performance of the TM. On the other hand, there is a simple
mechanism of code activation. Namely, a triplet of a non-coding state s can be activated, for example, when a
mutation occurs in the call entry of a coding state changing its value to s, but notice that also mutations in the
write and move entries (of a coding triplet), can result in an activation or inactivation of the TMs triplets. Finally,
another advantage of using TMs is that they are specified in terms of an atomic instruction: the state.

2.2 The Eigen’s error threshold
The error threshold concept was introduced in 1971 by Eigen in the context of its quasispecies model [14], [18].
The model describes the dynamics of a population of self-replicating polynucleotides of fixed length L, subject
to mutation and under the constraint of constant population size. Each polynucleotide I (i) is characterized by its
replication rate Ai , its degradation rate Di and the probabilities Qji of mutating into a different polynucleotide I (j)
as a consequence of an inexact replication. All these parameters are assumed to be fixed numbers, independent of
time and of population composition. The Eigen model then consists of a set of ODEs determining the evolution of
the frequency φi of the polynucleotides I (i) in the total population:
X
X
(Aj − Dj )φj ,
(2)
(Aj Qij − Dj δij )φj − φi
φ̇i =
j

j

where the sum is over all possible polynucleotide templates I (j) . It is supposed that the polynucleotide I (1) has
a larger fitness than the others A1 − D1 > Ak − Dk , k > 1. Such polynucleotide is usually called the master
sequence while the others are called mutants. If we assume that mutation is exclusively due to point mutation,
we neglect transversions, suppose that transitions have all the same probabilities of occurring and that the point
4

mutation probability is independent on the site, then we can identify our polynucleotides as binary chains of length
L and the mutation probabilities Qji depend only on the point mutation probability q and the Hamming distance
d(i, j) among the binary chain I (i) and the binary chain I (j) :
Qji = q d(i,j) (1 − q)L−d(i,j)
Once assigned the Aj and Dj parameters, one can study the asymptotic composition of the population as a function
of the point mutation probability q. It turns out that (at least for some choices of the fitness landscape, see [19],
[20], [21], [22], [23]) there is a sharp transition in the population composition near a particular value of q that is
termed error threshold. Before the error threshold, the population is organized as a cloud of mutants surrounding
the master sequence, while, after the error threshold, each polynucleotide is almost equally represented. In the
thermodynamic limit (when the chain length L goes to infinity and the point mutation q goes to zero in such a
way that the genomic mutation rate p = qL stays finite) this is a real phase transition of first order [24], and
the error threshold is mathematically well defined. As a consequence, from this model it follows that natural
selection can preserve the genome informative content only if the mutation rate is lower than the error threshold
(see [25]); after the error threshold, all the information content is lost. For a single peak fitness landscape (i.e.
Ak − Dk = A2 − D2 , k > 2) and in the thermodynamic limit, the system of equations (2) can be decoupled into a
two by two system by introducing a collective variable φM for the overall frequency of mutants in the population
φM =

∞
X

φk

k=2

In the thermodynamic limit, the fidelity rate of the master sequence will be given by Q11 = e−p and the probability
of back mutation Q1M will go to zero. So, the Eigen equations take the form:

(3)
φ̇1 = A1 e−p − D1 φ1 − φ1 [(A1 − D1 ) φ1 + (A2 − D2 ) φM ] ,

(4)
φ̇M = A1 1 − e−p φ1 + (A2 − D2 )φM − φM [(A1 − D1 ) φ1 + (A2 − D2 ) φM ] .

The error threshold P̄ , in this case, will coincide with the lowest value of the mutation probability P = 1 − e−p
for which the master sequence goes extinct in the asymptotic limit t → ∞ [26]. Using the constraint φ1 + φM = 1
in equation (3) we get a closed equation for φ1 that gives:
P̄ =

(A1 − D1 ) − (A2 − D2 )
.
A1

(5)

Observe that the infinite population limit has the effect of removing the genetic drift and that the survival of
the master sequence in the asymptotic limit for values of the mutation probability less than the error threshold is
possible only for infinite populations. For finite populations, when the probability of reverse mutations is zero,
the genetic drift will always push the population in its only absorbing state: the extinction of the master sequence.
In the finite population case, however, the expected number of generations before the extinction of the master
sequence will start to grow by several orders of magnitude when the mutation probability drops below the error
threshold (see [27], [28]). This is the reason why the value of the error threshold predicted by the deterministic
model works also for finite populations.This effect is also present in our model (see the next two sections and figure
12).

2.3 The deterministic model
In this section we will describe a deterministic mutation-selection model with tournament selection of rank two
and we will obtain the corresponding error threshold. Our model of selection and reproduction is very different
from that of the Eigen model. In particular, the number of offspring is not constant for each genotype, since while
the performance landscape is fixed, the fitness landscape changes in time following the changes in the population
composition. Despite this fact, when one neglects the probability of back mutations, one obtains a closed equation
for the number of individuals with the best performance, as it happens for the Eigen model with the single peak
fitness landscape. Following the example of the Eigen model (see also [29]), we will define the error threshold as
the value of the mutation probability that causes the extinction of the master sequence (that, in our case, is the best
performance class) for our selection model considered in the deterministic limit.
Let us suppose that we have M possible performance classes, a population of size N , and let us denote with ni
the number of individuals belonging to the ith performance class. In the selection step we draw 2 individuals from
5

the population without replacement and compare their performances. The individual with higher performance is
copied into the new population and has a probability f to give raise to another copy, while, with probability 1 − f
the second copy will belong to the individual with the lower performance. When the two individuals have the
same performance, then both are passed to the new population. The two individuals are eliminated from the old
population and the process is restarted until the old population is exhausted and the new population is replenished.
Notice that it must hold 0 ≤ f ≤ 1. The selection mechanism we used in our TMs model correspond to the
particular choice f = 1.
With this mechanism, each individual belonging to ni has a probability
P
j<i nj
P2 = f
N −1
of making two copies of itself, a probability


X
X
1 
nj 
nj + ni − 1 + (1 − f )
P1 =
(1 − f )
N −1
j>i
j<i
of making one copy of itself, and, finally, a probability
P0 =

f X
nj
N − 1 j>i

of making no copy at all.
It follows that the expected number n′i of individuals in the ith performance class after selection is given by:



X
X
f

nj  
(6)
nj −
n′i = ni 1 +
N − 1 j<i
j>i

Notice that it holds:

M
X

n′i = N.

i=1

Now, let us consider the mutation step. We assume that the individuals in each performance class i share the
same probability Qi of undergoing neutral mutations only, or no mutations at all. We will call Qi , with a slight
abuse of terminology, the fidelity rate of the ith performance class. Let us denote with gij the probability that
an individual in the jth performance class gives raise to an individual in the ith performance class as a result of
a mutation (gii = 0 since we included the neutral mutations in the fidelity rate Qi . Obviously, we could define
Qi as the probability of undergoing no mutations at all and gii as the probability for the intervening mutations of
being neutral. However, even if the alternative chosen in the text could seem clumsier it is better suited for our
mathematical analysis.). This mutation mechanism gives raise to the following deterministic discrete equation:
n′′i = n′i Qi +

M
X
j=1

(1 − Qj )n′j gij .

(7)

Notice that, since by definition,
M
X

gij = 1,

i=1

it will also hold

M
X

n′′i = N.

i=1

Suppose now that gij ≪ 1 if i > j, namely that the probability of a mutation to a higher performance class is
very small, then the fraction of individuals undergoing a beneficial mutation in one generation is negligible. Let s
be the best occupied performance class at a given time ns > 0, ni = 0, i > s, and suppose 1 < s < M . From
equation (6), we get that it also holds n′s > 0, n′i = 0, i > s. Then, from (7) and (6) we get:





X
f
f (N − ns )

n′′s = n′s Qs = ns Qs 1 +
nj   = ns Q s 1 +
(8)
N − 1 j<s
N −1
6

The best performance class is stably populated if n′′s = ns . We have two solutions. The first one is given by
(1)
ns = 0 and the second by


N −1
1
(2)
N (1 + f ) − 1 −
.
(9)
ns =
f
Qs
(2)

ns is greater than zero if
Qs >

1
1
+O
=
N
1+f
1 + f N −1



1
N



(2)

and in such a case ns = ns is a sink and ns = 0 an unstable equilibrium, since the function n′′s − ns is positive
(2)
(2)
for ns ∈ (0, ns ) and negative for ns ∈ (ns , N ), as shown in figure 2. If
Qs <

1
,
1 + f NN−1

then there is only a sink in ns = 0. Hence, the error threshold is given by
Q̄ = 1 − P̄ =

1
1 + f NN−1

(10)

Neglecting the O(1/N ) corrections, we obtain:
P̄ =

f
1+f

(11)

This is the same result that one gets from the Eigen model when considering the single peak fitness landscape with
A1 = (1 + f )(A2 − D2 + D1 ) (see equation (5) and also [26]).
With the previous argument we have shown that, after infinitely many generations, the best occupied performance class must satisfy Qs > Q̄ namely that nj = 0 for all j such that Qj < Q̄. We can now show that actually
the index s is actually the largest possible one, namely that there is no class i such that Qs > Qi > Q̄. Indeed,
let us suppose that gi+1,i 6= 0 ∀ i = 1, . . . , M − 1, then if at a given generation, the ith performance class is
populated, while the i + 1th is empty, then at the following generation we will have



X
X
X
f

nj −
nj  
n′′i+1 =
(1 − Ql ) gi+1,l nl 1 +
N −1
j<l
j>l
l≤i


f X 
nj > 0
(12)
≥ (1 − Qi ) gi+1,i ni 1 +
N − 1 j<i

So, a fraction of the population (possibly very small) will filtrate progressively into higher performance classes.
This process will continue until the last performance class M or a performance class s such that Qs > Q̄, Qi < Q̄
if i > s will be reached. Then the asymptotic occupation number of this class will be given by equation (8). A
certain number of observations about this result are in order. First, let us notice that according to equation (12), the
s + 1th performance class will be populated at each generation by mutants of the sth one. As we said, if gs+1,s is
small, this number will be a tiny fraction of ns and we can neglect it (as we did in equation (8)). So, what we have
really shown is that the sth performance class is the last one that will have a significative occupation number. The
actual value of this number will depend mainly on how near Qs is to Q̄.
The second argument to keep into account is that the time to populate the sth class could be astronomical
and will depend on the values of gij , Qi and f . In particular, to keep it reasonable, gi+1,i and f must not be
exceedingly small. It is also necessary that for i < s the fidelity rates Qi are not smaller than or too near to Q̄. A
natural assumption avoiding this occurrence is that Qi is a monotonically decreasing function of i.
As an illustrative example, we show in figure 3 the results of a numerical simulation of the discrete system (6),
(7) with the following choices of the parameters: M = 40, N = 100, f = 10−3 ,

if i = j = 1 or j − i = 1
 1 − 10−6 ,
10−6 ,
if i = j = 40 or i − j = 1
gij =

0,
otherwise,
7

√

Qi = (1 − 10−5 )

i3

,

i = 1, . . . , 40.

(13)

and with all the 100 individuals in the first performance class as an initial state. Needless to say that this choice of
the parameters does not pretend to have any degree of biological realism. The green points show the occupation
numbers of the 40 performance classes obtained after 2 · 106 generations, while the red line connect those obtained
after 106 generations. The maximum difference between the occupation numbers of the same performance class at
2 · 106 and 106 generations is 5 · 10−5 and, consequently, cannot be detected. This means that the population had
almost reached its stable state after 106 generations. The error catastrophe does occur when the fidelity rate (13)
is less than the fidelity threshold (10). With the above choices, we have Qi > Q̄ for i = 1, . . . , 21 and Qi < Q̄ for
i = 22, . . . , 40. According to the above, we expect that, in the asymptotic limit, the performance classes from the
22nd on, should be empty, while equation (9) predicts that the 21st one should be occupied by 4.682 individuals. At
the end of the simulation, the number of individuals in the 21st performance class is 4.686 while those in the 22nd
are 2.02 · 10−4 and they go progressively decreasing, by approximately 5 orders of magnitude per performance
class, while the performance class increases.
The TMs critical number of coding states We made two hypotheses in our deterministic model to find the
value of the error threshold (11). The first hypothesis is that gij ≪ 1 if i > j, that is, that favorable mutations
are extremely rare. This is a natural assumption in our TMs model, because very often the mutations induce a
big change in the output tape that have a very small probability of being favorable. Moreover, in the next section,
we will develop a stochastic model based on the same assumption, and we will see (figure (12)) that there is
good agreement between the prediction of this model and the observed results. The second relevant assumption to
compute the error threshold (11) is that the individuals belonging to the best performance class s have the same
fidelity rate Qs . We will make the further assumption that, for TMs, the probability that a mutation occurring in a
coding triplet is neutral is also negligible. Then, the fidelity rate of a TM with Nc coding triplets is given by
3Nc

Q = (1 − pm )

,

(14)

since mutations occurring in non-coding triplets are, by definition, neutral. It follows that, for a given value of
pm , the fidelity rate is determined only by the number Nc of coding triplets of the TM. The assumption that the
best performing TMs have the same fidelity rate is therefore equivalent to the assumption that they have the same
number of coding triplets. Figure 4 shows that this assumption is very near to the truth when considered for a
given run (that is what we really need). However, notice that the relation among s and Qs varies considerably
among different runs. This is particularly evident in figure 5, where the number of coding triplets associated with
the performance scores of 47 and 48 exhibits a more than two-fold variation.
Having established that the hypotheses under which we have obtained the error threshold (11) are accurate for
our model, we can use it to determine the maximum allowed number of coding triplets for a TM. In the case of our
model, f = 1, so that equation (11) give us the error threshold at P̄ = 1/2. The mutation probability for a TM
with Nc coding triplets is given by:
(15)
P = 1 − (1 − pm )3Nc .
By equating (15) to the error threshold, we get the critical number of coding states for the TMs:
Nc∗ = −

ln(2)
3 ln(1 − pm )

(16)

This expression is represented by the thick black line in figure 6. The ultimate fate of TMs with a number of coding
states larger than Nc∗ , according to our deterministic model, will be the extinction.

2.4 The stochastic model
In this section we will keep into account the stochastic effects in our mutation and selection procedures.
We recall that the constant population size N must be an even number. We will introduce a stochastic model
for the evolution of only the number ns of individuals with the best performance value. Let us consider separately
the selection and mutation steps.
The selection step Since we are interested in the evolution of the number ns of the best individuals only, we can
put all the remaining N − ns individuals into the same class. Let us denote with the symbol “1” the individuals of
the best performance class and with the symbol “0” all the others. We will denote by n′s the number of individuals
8

in the highest performance class in the new population. n′s will be determined by the number of pairs 11, 10 and
00 that we will get extracting random pairs without replacement from the old population. Let us denote by k the
number of 11 pairs, by l the number of 10 pairs and by m the number of 00 pairs. As a consequence we will have
ns = 2k + l

n′s = 2(k + l)

2(k + l + m) = N

(17)

The probability that we get n′s = 2(k + l) individuals into the best class when applying the selection step to a
population with ns = 2k + l individuals into the best class, is given by the probability that we extract k 11 pairs, l
10 pairs and m 00 pairs from a set containing 2k + l ones and l + 2m zeroes. This probability is given by:
k
l
m


 

z
}|
{z
}|
{z
}|
{
k+l+m
l+m
2(k + l + m)
l
P ((11) . . . (11) (10) . . . (10) (00) . . . (00)) = 2
k
l
2k + l

Indeed, the 2l term keeps into account that the l pairs 10 can be obtained extracting the 1 before the 0 or vice versa.
The term


k+l+m
k
gives the number of possible distributions of the k 11 pairs inside the k + l + m total pairs. The term


l+m
l
gives the number of possible distributions of the l 10 pairs inside the remaining l + m pairs. Finally,


2(k + l + m)
2k + l
is the number of possible distributions of the 2k + l 1 symbols in the 2(k + l + m) = N possible places.
Let us notice that
• n′s is always even,
• n′s ≥ ns ,
• n′s ≤ 2ns .
If we fix ns and n′s satisfying the above constraints, we can obtain k and l as a function of ns and n′s :
k=

2ns − n′s
2

l = n′s − ns

Since the total population is fixed to N we have:
2(k + l + m) = N

=⇒

m=

N − n′s
2

Hence, the probability of getting n′s individuals into the best performance class after applying the selection procedure to a population with ns individuals into the best performance class is:

0
if n′s < ns or n′s > min(2ns , N )




0
if n′s odd
!

 
Prip (ns → n′s ) =
N
N −2ns +n′s
′
N

(n
−n
)
2
s
 2 s
2
′
otherwise.

2ns −ns

ns
n′s − ns
2
The mutation step Let us introduce mutation into the model. We will follow to use the two simplifying assumptions that we used for the deterministic model, namely:
1. TMs in the best performance class have the same number of coding triplets Nc .
2. Mutations in coding triplets are (almost) always deleterious.
9

By definition, mutations in non-coding triplets are neutral.
Under this assumptions if n′s is the number of best individuals before mutation, the probability of getting
′′
ns = n′s − k individuals after the mutation step is given by
 ′ 
′
ns
Pmut (n′s → n′′s = n′s − k) =
P k (1 − P )ns −k ,
k
where we denoted by P the probability that an individual in the best performance class will undergo at least one
mutation into a coding triplet.
P = 1 − (1 − pm )3Nc
The Markov matrix If the total population N is finite, under our assumption the best individuals will always
go extinct in a finite time. The expected number of generations τ before it happens can be computed using the
Markov matrix M of the process [30]. The entries Mij of the Markov matrix give the probability that the system
under scrutiny pass from its ith state to the jth one. In our case the state of the system is labeled by the number ns
of individuals into the best performance class and the entries of M will be given by
Mns +1,n′′s +1 =

N
X

n′s =0

Prip (ns → n′s )Pmut (n′s → n′′s ),

ns , n′′s = 0, . . . , N

The state n′′s = 0 will be an absorbing state for M and the procedure to compute the expected number of generations τ for reaching it, works as follows. Let S be the matrix that one obtains by removing the first row and the
first column corresponding to the only absorbing state and let c be a N −dimensional vector whose entries are all
one. The matrix I − S, where I denotes the identity matrix, is invertible. If the Markov process begins in the state
i, then the expected number of generations before extinction will be given by:


τ = (I − S)−1 c i .
(18)
Let us stress that the equation (18) is obtained by assuming that the system evolves for an infinite number of
generations. The expected extinction times versus the number of coding triplets are plotted in figure 12 for 5
different values of the mutation probability.

2.5 Simulations settings
In this subsection we introduce the parameter values that we adopted in our computer simulations.
We chose the goal tape containing the binary expression of the decimal part of π (the dots are just a useful
separator):
0010010000.1111110110.1010100010.0010000101.1010001100.0010001101.0011000100.1100011001.
1000101000.1011100000.0011011100.0001110011.0100010010.1001000000.1001001110.0000100010.
0010100110.0111110011.0001110100.0000001000.0010111011.1110101001.1000111011.0001001110.
0110110010.0010010100.0101001010.0000100001.1110011000.1110001101.
As a consequence, the maximum possible performance value is 125. We performed simulations with the following
(approximate) values of the states-increase rate pi and point mutation probability pm :

pi ∈
9.26 · 10−5 ; 1.66 · 10−4 ; 3.00 · 10−4 ; 5.40 · 10−4 ; 9.72 · 10−4 ; 1.75 · 10−3 ;
pm

3.14 · 10−3 ; 5.68 · 10−3 ; 1.02 · 10−2 ; 1.85 · 10−2 ; 3.33 · 10−2 ; 6.00 · 10−2 ;
	
1.08 · 10−1 ; 1.95 · 10−1 ; 3.51 · 10−1 ; 6.33 · 10−1 ; 1.14 .

∈
4.91 · 10−5 ; 8.10 · 10−5 ; 1.34 · 10−4 ; 2.21 · 10−4 ; 3.64 · 10−4 ; 6.01 · 10−4 ;
	
9.91 · 10−4 ; 1.64 · 10−3 ; 2.70 · 10−3 ; 4.44 · 10−3 ; 7.35 · 10−3 .

These values have been chosen in such a way that consecutive ones have a constant ratio. For any pair of values
pi , pm , we performed 20 simulations varying the initial seed of the C native random number generator, for a total
of 3740 runs. Each simulation lasted 50000 generations.

10

3 Results
3.1 Performance, coding triplets and mutation probabilities
In this subsection we analyze how the performance and the number of coding triplets of the best performing
machines vary with the different values of the mutation and states-increase rates.
In figure 7 we plot the best performance value obtained in the population at the last generation (averaged on
the different choices of the seed) versus the state-increase rate pi and the mutation probability pm . The maximum
performance value of 50.6 is obtained for the maximum value of pi , pi ≃ 1.14 (see figure 7.c) and an intermediate
value of pm , pm ≃ 3.64 · 10−4 (see figure 7.d). In figure 8, we show the number of coding triplets N̄c (averaged
on the best performing machines at the last generation and on the seeds), versus pi and pm . Again the maximum
value N̄c = 333.9 is obtained for exactly the same values of pi ≃ 1.14 and pm ≃ 3.64 · 10−4 . This fact and the
similarity between figure 7.a and 8 suggest a strong correlation between the performance and the number of coding
triplets. Indeed, the correlation coefficient between them is r = 0.95 (see also figures 5, 9, 10). The fact that the
maximum performance occurs for an intermediate value of pm is also partially due to this correlation. Indeed, if the
mutation probability is too low, there is no enough variability among the TMs for selection to work on, while when
the mutation probability is too high, the error threshold exerts a strong limiting action on the maximum number of
coding triplets. This latter effect is clearly visible in figures 5 and 6, both taken after 50000 generations. Indeed,
in figure 5, the abscissa positions seldom exceed the corresponding vertical lines at Nc∗ . The presence of the error
threshold also affects the trend of the performance with the generations. Indeed, when both pm and pi are large, the
TMs approach very early the maximum number of coding triplets. From that moment on, further accumulation of
coding triplets is strongly opposed by mutation and selection. This leads to a saturation in the performance and in
the number of coding triplets that is clearly visible in the plateau of figure 9, (b) and (d). Notice that this plateau
effect is not present when pi is small (figure 9, (a) and (c)). This behaviour suggests that an adaptative choice for
the mutation probability could maximize the speed of evolution. Indeed, one could start with an high mutation rate
in the first generations to increase the variability, progressively diminishing it when the number of coding triplets
increase to reduce the limiting effect due to the error threshold. We presented a proposal for the optimal adaptative
mutation probability for this model in [31].
Figure 10 shows, on a log-log scale, the relation between N̄c and pi . The straight line of linear regression has
been evaluated in the range pi ≤ 3.33 · 10−2 . The reason is that this range corresponds to the one considered in [1],
allowing us to compare the two results. Moreover, it is clear that the linear regime does not hold for large values
of pi , for which we observe a saturation effect. The regression gives the relation
N̄c = 7.3 · 102 p0.46
,
i

present simulations,

N̄c = 2.5 · 103 p0.53
,
i

paper [1],

(19)

both exponents being close to 21 . Now, if N̄t is the total number of states, its expected value is
N̄t = 50000 · pi + 1

⇒

pi ≃

N̄t
,
50000

(20)

(this is true in absence of selection but, as discussed in [1], it remains approximately true even with selection,
except for very small values of pi ) so that
1
N̄c
∝√
(21)
pi
N̄t
This means that the fraction of coding triplets on the total will decrease when pi increases (strictly speaking, this
analysis holds only for the linear regime however it is clear that, for larger values of pi , the plateau of figure 10
corresponds to an amplification of this effect).
As in our previous paper [1], we observe that the maximum performance is obtained for the maximum value
of pi . However, this time, the trend of the performance with pi is not strictly monotonically increasing, since, as
shown in figure 7.c, there is a plateau for high values of pi . Notice that this plateau corresponds exactly to the
region in figure 10 where the number of coding triplets reaches a saturation, so that this effect also is due to the
presence of the error threshold. For various reasons, explained in [1], we believe that the performance should
exhibit a maximum for a finite value of pi (this is one of the reasons that led us to increase upward the range of
variation of pi ). Unfortunately, it seems that if this maximum exists, it lies outside of the range of values of pi that
we selected. Finally, it is interesting to compare figure 7.c restricted to the range of pi values considered in [1]
with the figure 3.c of [1], that we reproduce here (see figure 11). Despite the fact that we changed the number of
generations (they were 200000 in [1]), the way the head can move on the tape (in [1] it could also stay still) and the
11

topology of the tape (in [1] it was not periodic), the two profiles are very similar. This means that the dependence
of the performance on pi is very robust in this model. That’s not the case of the dependence of the performance on
pm , that is influenced, for example, by the choice of the number of generations.
The trend of the performance with pi is interesting because it suggests that, in our model, the presence of
inactive and free to mutate code strongly improves the evolvability of our populations.

3.2 Extinction times
In figure 12, we plot the base 10 logarithm of τ , the expected number of generations before extinction given by
equation (18) versus the number of coding triplets (red line), and superimpose the data obtained from our simulations (blue points). The red line is obtained numerically starting with a unique individual in the best performance
class (i = 1 in (18)) through the Markov matrix of the process, as explained in the previous section. The blue
points give the observed value of τ averaged over bins through the following procedure. First, the whole range of
the number of coding triplets is divided into bins. The size of the bin is different for the different values of the mutation probability pm and is given by the smallest integer greater than or equal to the critical value for the number
of coding triplets (see eq. (16)) divided by 40. It is necessary to introduce bins because otherwise, especially when
Nc∗ is large, there are too few extinction events associated with any value of the coding states to give raise to an
also minimal statistics. On the other hand, one has to avoid that the bin size is so large that the expected number
of generations before extinction varies considerably inside it. It seems that dividing Nc∗ by 40 is a good choice for
the bin size.
Now, let us suppose that at a given generation τ ′ , the data register a drop in the maximum performance value,
then we go back to the generation τ when this performance value appeared and we count the number of TMs
scored with it. If this number is exactly two, then we register the extinction time τ ′ − τ and increment the number
of extinction events registered in the bin containing the number of coding states of the two TMs at the generation
τ . The discrepancy between the fact that we compare the extinction data obtained starting with two individuals in
the best performance class with those obtained from the Markov process starting with a unique individual is due to
the fact that our program registers the data after the selection step, when the best performing individual has already
made a copy of itself. We are neglecting the quite improbable case that after mutation two new best performing
individuals (with the same performance) do emerge and they are extracted as a pair in the subsequent selection
step. If the number of extinction events registered for a bin is greater than or equal to 5, then a blue point is plotted
with an x coordinate equal to the center of the bin and an y coordinate equal to the mean of all the registered times
of extinction. The requirement to have at least 5 extinction events in each bin is due to the fact that the expected
number of generations before extinction corresponds to the mean over an infinite number of extinction events.
This pushes us to select a minimum number of extinction events as large as possible, to reduce the stochastic noise.
On the other hand, if we choose a too large number, then we get too few points from our data. Again, to fix the
minimum number of extinction events per bin to 5 seemed to us a reasonable compromise.
The figure 12 corresponds to the 5 largest values of the mutation probability pm considered in the simulations.
For smaller values of pm , too few “experimental” points are obtained. We see that the agreement between the
theoretical model and the simulation data is extremely good from large values of Nc to the peak of the blue points,
that occurs when the expected number of generations before extinction is near 100. On the left of such peak, the
agreement is completely lost and a peculiar monotonic growth of τ appears instead. The main reason is that we
run our simulations for 50000 generations, while the theoretical model assumes an infinite number of them. This
implies that the agreement between the data and the theoretical model will be good until when 50000 generations is
a good approximation to ∞, that is when 50000 generations is much larger than the expected number of generations
before extinction. Clearly, when this latter number increases, the approximation is doomed to worsen. Indeed,
when the theoretical model predicts that the expected number of generations before extinction is larger than 50000
(around y = 4.7 in our graphs), the agreement between the model and the simulations is impossible.
We suggest two possible mechanisms to explain why in the region where there is no agreement with the
theoretical model, the observed extinction times increase while increasing the number of coding triplets. The
first mechanism is that, in this region, there is a relatively high probability of extinction when the best TMs have
just emerged. Indeed, we know that at the beginning there will be only two TMs in the best performance class
(otherwise we do not register the data, as we explained above). If both TMs undergo a mutation (in a coding triplet)
in the next mutation phase, then they will most probably go extinct. On the other hand, if they start to spread into
the population, then extinction becomes more and more improbable and, on consequence, the time to wait to
observe it largely increases. In these cases, the cut to 50000 generations will throw away a considerable portion
of the extinction probability distribution, with the effect of amplifying the weight of the probabilities before that
generation. This effect is clearly visible in figure 13 where we plotted for pm = 4.44·10−3 and five different values
12

of Nc , the extinction probability distribution renormalized to 1 in the range between 1 and 32768 generations (this
number is dictated by computational reasons). We see that the relative probability of observing an extinction event
in the first few generations decreases with Nc below Nc∗ and increases after, in accordance with figure 12.
Another mechanism can amplify this effect. Indeed, if the TMs extinction time is large, the probability that an
increase in the performance value will occur does also increase. In such a case, the extinction of the original TMs
simply will not be registered, creating a bias toward short extinction times.

3.3 The route to the error threshold through punctuated equilibria
Let us notice that all the possible output tapes (and consequently all the possible performance scores) can be
obtained with a 300 states TM with 300 coding triplets and running for 300 time steps. Indeed, let us denote with
o the desired output tape and with oi the entry of its ith cell, then the following 300 states TM will produce it:
0
1

i
oi − Right − i+1
∗− ∗ − ∗

i = 1, . . . , 299,

300
0 o300 − ∗ − Halt
1
∗ −∗− ∗

Here the ∗ symbol means that the corresponding entry of the state is irrelevant. Notice also that this is only a
possible solution and, quite probably, not the shortest one.
Figure 5 shows that, for some of the values of the mutation probabilities, TMs can indeed accumulate 300
coding triplets, or even more, during the 50000 generations. So, the TMs could, in principle, attain the maximum
possible performance value of 125. However, the actual maximum performance value obtained in the 3740 runs
of our simulations is 70, quite far from the theoretical maximum. This is due to the fact that TMs do not optimize
the use of coding triplets as it is apparent from figure 5. Indeed, if we consider the various TMs that obtain a
performance value of 47 (for example), we see that the number of coding triplets spans a range from 131 to 443. It
is worth noticing that by diminishing the mutation probability, the number of coding triplets tends to spread and to
shift toward larger values. Moreover, even if the TMs use many more coding triplets than strictly necessary, we see
from figure 9 that once they approach the error threshold, the performance growth with generations slows down
considerably, while the number of coding triplets remains practically constant. In this way, an “historical” factor
is introduced into the evolutionary dynamics; namely, once the TMs have wasted their coding triplets, they need a
very large amount of time to achieve a more efficient usage.
The mathematical model developed in the Methods showed that under the following hypotheses
1. Qi < 1 ∀i,
2. Qi is a monotonically decreasing function of i,
3. gi+1,i 6= 0 ∀i = 1, . . . , M − 1,
the mutation-selection dynamics will always decrease the fidelity rates of the evolving organisms (in our case the
TMs), until they reach the error threshold Q̄ or the highest performance class M . All of these hypotheses do hold
true for our evolutionary model. Indeed the first one is implied by the definition (14) of the fidelity rate for the
TMs, that was also used to calculate the extinction times. From (14) and from the fact that the performance and
the number of coding triplets are positively correlated it follows that, on average, the fidelity rate decreases while
the performance increases. The second hypothesis corresponds to the deterministic limit of this effect.
The third hypothesis states that it is always possible to increase by one the performance through mutations.
From the simulations we see (figure 9) that the performance grows almost linearly with the generations until
approaching the critical number of coding triplets, thus supporting this hypothesis.
From a theoretical point of view, a performance increase of one can be obtained in our model in the following
way. Let us suppose that the TM stops before reaching the 4000 maximum time steps (entering into the halt state).
Let d be the distance on the output tape between the head position after the TM stopped and the nearest cell that
would improve the performance score if its value would be changed. The TM can then increase its performance
by one by adding d further coding triplets that move the machine head on the desired cell (without altering the
intermediate cells) and change its value. What it is important is that the probability for this process to happen
is not exceedingly small, so that performance increases can be observed within the generation range. The above
mechanism does not work for non-halting machines. Indeed, since the maximum observed number of coding
triplets is less than 600, non-halting machines have to use several times some subset of them. If we introduce a
mutation inside a coding triplet belonging to this subset, with the aim of modifying the dynamics at a given time
step, we cannot predict how it will affect the earlier dynamics (notice that, in the previous case, we are sure that
13

the triplet calling the Halt state is executed only once). So, in the non-halting case, we cannot see any simple
recipe to increase the performance. In general, mutations inside the above subset of coding triplets will probably
result in a big change in the output tape and will be almost always discarded by selection. This leads to the fact
that non-halting machines need longer times to improve their performance. We analyzed the 3740 best performing
machines that we registered at the end of the 50000th generation and we found that 2730 stop by calling the halt
state, while the remaining 1010 stop by exhausting the 4000 time steps. The former TMs have a better average
performance (19.57) compared to the latter ones (11.95). We found that, on average, the distance d is 5.99 for the
halting TMs and is 2.47 for the non-halting TMs. As a reference value, the average distance of two adjacent ones
on the output tape is 2.44. The fact that non-halting machines have, on average, lower performance and d values is
consistent with the above analysis.
Since in our simulations no TM reached the maximum performance of 125, our deterministic model predicts
that they will accumulate coding triplets until reaching the error threshold. However, this model assumes an infinite
number of generations, while our simulations last 50000. We can see from figure 9.c and 9.d that, when far from
the critical number of coding triplets, the TMs do indeed accumulate coding triplets in a steady way, that depends
on the values of pm and pi . While for high values of these probabilities, 50000 generations are enough to reach
the critical number of coding triplets, they are not for low ones (see figures 6, 9.c, 9.d and 5). We conclude that
our evolutionary model gives a working example of the dynamical behaviour predicted by the deterministic model
described in the previous section.
In figure 14.a we show the time evolution of the higher performance score for all values of the state-increase
probability pi corresponding to a particular choice of the seed of the random number generator and pm = 3.64 ·
10−4 . We observe the dynamical behaviour typical of punctuated equilibria [32]: long periods of stasis and briefs
periods of rapid evolution. The same kind of evolution is observed also for the other choices of the seeds, so that
we present figure 14.a as a representative case. The apparent big jumps in the performance in figure 14.a, as that
from 28 to 46 in the boxed region, are simply due to the time scale used. A zoom of the boxed region (fig. 14.b)
shows that this big jump is really composed by 14 jumps of one point and 2 jumps of two points, occurring in a
relatively short number of generations. The same is true also for the other big performance jumps observed in figure
14.a. Indeed, figure 15 shows the histogram of the number of occurrences of positive performance jumps versus
their amplitude. Performance jumps of one point (the minimum possible value) are, by far, the most common,
while performance jumps larger than three are extremely infrequent. There is however a single, quite amazing,
performance jump of 12 that in figure 15 is not visible due to the scale used. The mean positive performance jump
in our simulations is 1.16. This value seems to us sufficiently near to the minimum possible value of 1, that we
would say that the evolution of the performance in our model is essentially gradualistic. Let us stress that while the
mechanism proposed in [32] is based on a particular speciation mechanisms, in our case this dynamical behaviour
is determined only by the form of the performance landscape.
The mean performance jumps for different values of pm and pi fluctuate between 1.00 and 1.27, the largest
value appearing for pm ≃ 1.64 · 10−3 and pi ≃ 3.51 · 10−1. Notice that this probability values do not coincide with
those associated with the largest performance, namely pm ≃ 3.64 · 10−4 , pi = 1.14, whose corresponding mean
performance jump is 1.13, that is lower than average.
For the value of the mutation probability considered in figure 14, the TMs stays far from the error threshold
and we see the typical increasing trend of performance with generations. In figure 16 we present the same graph
but for a much higher value of the mutation probability pm . In this case, for some values of pi , the TMs do indeed
reach the error threshold. From that moment on a typical oscillatory behaviour around a base performance value
emerges. There are many performance increases followed by a rapid extinction and also performance decreases
followed in a short time by back mutations.

4 Discussion
In this paper we studied, through computer simulations and mathematical modeling, the dynamics of an evolutionary model for Turing machines. In the mathematical models, by imposing suitable hypotheses on the impact
of mutations on the performance landscape, we were able to compute the value of the error threshold and the
expected extinction times for Turing machines versus the mutation rate. The agreement between theoretical and
simulation data (see fig. 12) prove that the hypotheses we made are accurate for our model. Our main finding is that
evolution pushes the TMs towards the error threshold. Again, we substantiated this finding through mathematical
analysis, by showing that this behaviour is due to the mutation and selection mechanisms used and on some further
hypotheses related to the structure of the performance landscape. Consequently, the question of the similarity between TMs and biological organisms is irrelevant to address the problem of the biological relevance of this finding.

14

What is really relevant is the biological plausibility of the mutation-selection mechanisms and of the hypotheses
employed. Let us stress that, despite this fact, our model still has to be considered as a toy model of evolution,
so that it contains simplifying (hence necessarily unrealistic) hypotheses that makes it mathematically affordable.
Nevertheless, toy models can give valuable suggestions on mechanisms working also in the full, non-simplified
system of which they are approximations. In the following we will try to discuss the hypotheses we made from a
biological point of view.
The main and most relevant approximation is to consider a unique and fixed performance landscape. In nature,
the existence of different ecological niches, the changing environment and the coevolution with other species give
raise to multiple and ever changing fitness landscapes. While it is difficult to estimate how this approximation
influences our conclusion, it is worth noticing that an ever changing performance landscape makes a perfectly
fit organism substantially unattainable. By ruling out one of the possible end points of evolution, this fact could
reinforce our results.
The deterministic mutation-selection model that we used is completely specified by the selection mechanism
and by the choices of the parameters Qj , j = 1, . . . , M , gij , i, j = 1, . . . , M and f . The values of Qj and gij
are related to the mutation mechanisms and to the genotype → performance mapping, while f specifies, through
the tournament selection, the performance → fitness mapping. Let us first discuss the selection mechanism and
the choice of f . First of all, the selection mechanism keeps the total population N constant (soft selection). This
is a frequent assumption in population genetic models (for instance it is used in the Wright-Fisher model and in
the Eigen model). From a biological point of view it translates in assuming that the population fecundity is always
enough to keep it to the (constant) carrying capacity N of the environment. The fact that only two individuals
are compared at each generation is clearly unrealistic from a biological point of view. However, if one considers a
large number of generations, virtually all individuals will have interacted through this pair interactions, so we think
that a more realistic interaction mechanism would not alter the conclusions. Also the assumption that the fitness
difference f depends on the performance values of the two individuals only through the signum of their difference
is not realistic. However, since the conclusion that the population will eventually reach the error threshold holds for
any f > 0, a more realistic choice would not change it, but only affect the population distribution in performance
classes near the error threshold.
Regarding the mutation mechanism, we needed three basic assumptions:
1. there is no perfect replicator,
2. the fidelity rates and the performance classes are negatively correlated,
3. the probability of improving the performance is never exceedingly small.
The first and the third hypotheses seems to us perfectly acceptable from a biological point of view. The second
assumption deserves a deeper discussion. It can be interpreted as saying that the performance of an individual is
incremented mainly through the addition of coding DNA (here we use “coding” in the same informatic/algorithmic
sense that we used for our TMs model, to indicate parts of the genome that influence the phenotype; the usual
biological meaning would be to indicate protein coding sequences), and that this addition increases the probability
of undergoing a non-neutral mutation.
The latter statement is quite natural: if, for example, an organism increases its performance by converting a
piece of junk DNA into a new gene (the metabolic cost should be kept into account to evaluate if there is a real
performance increase), all the mutations that inactivate the new gene will be new non-neutral mutations. According
to the first part, one has to assume that organism improve their adaptation more by increasing their coding DNA
than by reorganizing it.
We suggested that the fact that the mutation-selection dynamics pushes the evolving organisms towards the
error threshold is due to quite mild hypotheses and could be a quite robust property of evolutionary systems.
Indeed, the same phenomenon appears in another artificial evolution experiment [7], where the codification of the
evolving algorithms and the mutation and selection mechanisms used are completely different from ours.
At the biological level, RNA viruses have error rates (per genome per replication) near to one and have been
suggested to replicate near the error threshold (see for example [25] and the references therein), in accordance
with the behaviour that we observe in our model. Indeed, these organisms lack proof-reading mechanisms, so
that their mutation rates per nucleotide are quite large. Moreover, the necessity to escape the immune response
produces a selective pressure toward an high variability. Notice, however, that this latter effect is not present
in our evolutionary model, since we considered a static performance landscape. For what concerns DNA based
organisms, they also have remarkably small variations in their mutation rates [33]. However, their mutation rates
are much smaller than those of RNA viruses, of the order of 1/300 per genome per replication. In [25] it has been

15

suggested that these almost constant mutation rates could be due to the fact that also DNA based organisms do
reproduce near the error threshold. Their higher fidelity rate could be explained by two factors: a larger number of
neutrals in DNA sequences and the dissymmetry between the error rates of the two daughter DNA double strands
(see [25]). While our results could encourage this explanation, the development of error correction mechanisms
is not considered in our model. Approaching the error threshold surely induces an high selective pressure on the
development of error correction mechanisms. The short term advantage derived by an increase in the reproductive
fidelity could be reinforced by the long term advantage of an higher evolvability (if the organisms evolvabilities
are much lower near the error threshold as it happens in our model, see figure 9). Maybe, the mutation rates
observed for the DNA could be due to a balance between the natural trend toward the error threshold, due to the
mutation-selection dynamics, the need of proof-reading mechanisms and their metabolic costs.
In this paper, we showed that some of the features observed in an artificial evolutionary model can have a much
more general validity than the specific model itself. This happens when the phenomenon under consideration is
mainly due to the mutation-selection dynamics, so that it can be described through a population genetic model. It
seems to us that this synergistic integration between artificial evolution and population genetic model should be
pursued, when possible. Since the phenomena observed in an artificial evolutionary model can have a quite wide
degree of generality, we think that they can give interesting suggestions on possible evolutionary mechanisms
working also at the biological level.

Funding
This work was partially supported by the Spanish Ministerio de Ciencia e Innovación under grant MTM200767389 (with EU-FEDER support), by Junta de Castilla y León (Project GR224) and by UBU-Caja de Burgos
(Project K07J0I).

References
[1] Feverati G, Musso F (2008) Evolutionary Model for Turing Machines. Phys. Rev. E 77: 061901.
[2] Ray TS (1991) An approach to the synthesis of life. In : Langton, C., C. Taylor, J. D. Farmer, S. Rasmussen
editors, Artificial Life II, Santa Fe Institute Studies in the Sciences of Complexity, vol. XI, 371-408. Redwood
City, CA: Addison-Wesley.
[3] Lenski RE, Ofria C, Collier TC, Adami C (1999) Genome complexity, robustness and genetic interactions in
digital organisms. Nature 400: 661–664.
[4] Wilke CO, Wang JL, Ofria C, Lenski RE, Adami C (2001) Evolution of digital organisms at high mutation
rates leads to survival of the flattest. Nature 412: 331–333.
[5] Lenski RE, Ofria C, Pennock RT, Adami C (2003) The evolutionary origin of complex features. Nature 423:
139–144.
[6] Knibbe C, Mazet O, Chaudier F, Fayard JM, Beslon G (2007) Evolutionary coupling between the deleteriousness of gene mutations and the amount of non-coding sequences. J. Theor. Biol. 244: 621–630.
[7] Knibbe C, Coulon A, Mazet O, Fayard JM, Beslon G (2007) A Long-Term Evolutionary Pressure on the
Amount of Noncoding DNA. Mol. Biol. Evol. 24: 2344–2353.
[8] Clune J, Misevic D, Ofria C, Lenski RE, Santiago FE, Sanjuán R (2008) Natural Selection Fails to Optimize
Mutation Rates for Long-Term Adaptation on Rugged Fitness Landscapes. PLOS Comp. Biol. 4: e1000187.
[9] Gregory TR (2001) Coincidence, coevolution or causation? DNA content, cell size, and the C-value Enigma.
Biol. Rev. 76: 65–101.
[10] Luke S (2005) Evolutionary Computation and the c-Value Paradox. In: Genetic And Evolutionary Computation Conference, Proceedings of the 2005 conference on Genetic and evolutionary computation, H-G Beyer
et al. editors, Association for Computing Machinery, Inc., 91–97.
[11] Barrick JE et al. (2009) Genome evolution and adaptation in a long-term experiment with Escherichia coli.
Nature 461: 1243–1247.
16

[12] Maynard Smith J (1992) Byte-sized evolution. Nature 355: 772–773.
[13] O’Neill B (2003) Digital Evolution. PLoS Biol. 1: 11–14.
[14] Eigen M (1971), Selforganization of Matter and the Evolution of Biological Macromolecules. Naturwissenschaften 58: 465–523.
[15] Turing AM (1937) On computable numbers, with an application to the Entscheidungsproblem. Proceedings
of the London Mathematical Society, Ser. 2, Vol. 42: 230–265.
[16] Davis M (1982) Computability and unsolvability. Dover, New York.
[17] Radó T (1962) On non-computable functions, Bell System Technical Journal, Vol. 41, No. 3: 877–884.
[18] Eigen M, Schuster P (1977) The hypercycle. A principle of natural self-organization. Part A: Emergence of
the hypercycle. Naturwissenschaften 64: 541–565.
[19] Swetina J, Schuster P (1982), Self-replication with errors. A model for polynucleotide replication. Biophys.
Chem. 16: 329–345.
[20] Wagner GP, Krall P (1993), What is the difference between models of error thresholds and Muller’s ratchet?
J. Math. Biol. 32: 33–44.
[21] Wilke CO (2005), Quasispecies theory in the context of population genetics. BMC Evol. Biol. 5:44.
[22] Takeuchi N, Hogeweg P (2007), Error-threshold exists in fitness landscapes with lethal mutants. BMC Evol.
Biol. 7:15.
[23] Saakian DB, Hu CK (2006), Exact solution of the Eigen model with general fitness functions and degradation
rates. PNAS 103: 4935–4939.
[24] Tarazona P (1992), Error thresholds for molecular quasispecies as phase transitions: From simple landscapes
to spin-glass models. Phys. Rev. A 45: 60386050.
[25] Eigen M (2000) Natural selection: a phase transition? Biophys. Chem. 85: 101–123.
[26] Nowak MA (2006) Evolutionary Dynamics: Exploring the Equations of Life. Harvard University Press.
[27] Nowak M, Schuster P (1989), Error Thresholds of Replication in Finite Populations. Mutation Frequencies
and the Onset of Muller’s Ratchet. J. Theor. Biol. 137: 375–395.
[28] Musso F (2010) A stochastic version of the Eigen model. Bull. Math. Biol.
[29] Bull JJ, Meyers LA, Lachmann M (2005), Quasispecies Made Simple. PLOS comp. biol. 1: 450–460.
[30] Grimstead CM, Snell JL (1997) Introduction to Probability: Second Revised Edition. AMS.
[31] Musso F, Feverati G (2009) A Proposal for an Optimal Mutation Probability in an Evolutionary Model Based
on Turing Machines. Lecture Notes in Computer Science 5788, H. Yin, E. Corchado editors, Springer Verlag,
735–742.
[32] Eldredge N, Gould SJ (1972), Punctuated equilibria: an alternative to phyletic gradualism. In T.J.M. Schopf
editor, Models in Paleobiology. San Francisco: Freeman Cooper. pp 82–115.
[33] Drake J, Charlesworth B, Charlesworth D, Crow JF (1998) Rates of Spontaneous Mutation. Genetics 148:
1667–1686.

17

Figures
s(t)

0

0

0

1

1

0

1

0

1

0

1

1

1

0

0

0

k(t)
Figure 1. Graphical representation of a Turing machine. The machine is shown at time t, in the
internal state s(t), located on the k(t)-th cell of a infinite tape.
N

N Qs
(2)

ns
n′′s

0

(2)

0 n̄

ns

N

ns
Figure 2. Stable state for the occupation number of the highest occupied performance class.
The blue curve represents the function n′′s (ns ) defined by (8), while the red line corresponds to
n′′s = ns . The green points represent 15 iterates of the discrete map (8) starting by the initial datum
(2)
n̄. The asymptotic value of the map (8) will be ns for any initial datum n̄ 6= 0.

18

occupation number

30

20

10

0
0

10

20

30

40

performance classes
Figure 3. Results of the numerical simulation described in section “The deterministic model”.
The green points show the occupation numbers of the 40 performance classes obtained after 2 · 106
generations while the red line connect those obtained after 106 generations. The prediction in (10,
13) for the best occupied performance class is s=21.

1800
1600
1400
1200
1000
800
600
400
200
0

0

0.05

0.1

0.15

0.2

0.25

Figure 4. Histogram of the distribution of σ/N̄c for the 3740 runs of our simulations. N̄c is
the average number of coding triplets for the best individuals in the last generation and σ is the
corresponding standard deviation. The size of the bins is 0.0025.

19

70

60

50

40

30

20

10

0
0

100

200

Nc∗ Nc∗ Nc∗

Nc∗

300

400

Nc∗

500

600

Nc∗

pm : 4.91 · 10−5 , 8.10 · 10−5 , 1.34 · 10−4 , 2.21 · 10−4 , 3.64 · 10−4 , 6.01 · 10−4 ,
9.91 · 10−4 , 1.64 · 10−3 , 2.70 · 10−3 , 4.44 · 10−3 , 7.35 · 10−3

coding triplets

Figure 5. Performance versus the number of coding triplets. The performance is shown for
the best performing TMs at generation 50000 for the 3740 runs of our simulations. Each color
corresponds to a different value of the mutation probability as indicated in the scale under the image.
The dashed lines correspond to the critical number of coding triplets for the 6 highest value of the
mutation probabilities. For lower values the corresponding critical number of coding triplets lies
outside of the graph. Notice that many points are superimposed.

p

i
1.138952

350

0.632911
0.350877

300

0.194553
0.107991

250

0.059880
0.033333

200

0.018519
0.010204
0.005682

150

0.003145
0.001748

100

0.000972
0.000540

50

0.000300
0.000167

0

0.000093
-3

10-4

10

p

m

Figure 6. Plot of the number of coding triplets for the best machine in the population. The
number of coding triplets after 50000 generations, averaged on the seeds, is shown as a function of
pm , for all the values of pi . The black thick line on the right represents the critical number of coding
triplets, according to equation (16).

20

performance

log10 pi

log10 pi
log10 pm

log10 pm

performance

(b)

performance

(a)

log10 pi

log10 pm

(c)

(d)

Figure 7. Best performance value in the population at the last generation. The best performance
is averaged on the twenty different seeds and plotted as a function of the states-increase rate pi and
of the mutation rate pm . (a) shows a 3D view, while subfigures (b), (c), (d) correspond to the three
orthogonal projections.

21

performance

log10 pi
log10 pm

p

i

40

pm = 0.00022065
1.138952
0.632911

35

0.350877
0.194553
0.107991

30

performance

performance

Figure 8. Number of coding triplets in the population at the last generation. The number of
coding triplets is averaged on the best machines and on the seeds; it is plotted versus pi (right) and
pm (left).

pi
40

p m = 0.00099108
1.138952
0.632911

35

0.350877
0.194553
0.107991

30

0.059880

0.059880

0.033333

25

0.010204

20

0.018519
0.010204

20

0.005682
0.003145

15

0.033333

25

0.018519

0.005682
0.003145

15

0.001748

0.001748

0.000972

10

0.000972

10

0.000540

0.000540

0.000300

5

0.000300

5

0.000167

0.000167

0.000093

0
0

0.000093

0
0

5000 10000 15000 20000 25000 30000 35000 40000 45000 50000

5000 10000 15000 20000 25000 30000 35000 40000 45000 50000

generations

generations

(b)
p

240
220

i

pm = 0.00022065

1.138952
0.632911

200

0.350877
0.194553

180

0.107991

160

0.059880

140

0.033333

120

0.010204

100

0.005682

80

0.001748

0.018519

0.003145
0.000972

60

220

p m = 0.00099108

1.138952
0.632911

200

0.350877
0.194553

180

0.107991

160

0.059880

140

0.033333

120

0.010204

100

0.005682

80

0.001748

0.018519

0.003145
0.000972
0.000540

40

0.000300
0.000167

20

pi

240

60

0.000540

40

0
0

number of coding triplets

number of coding triplets

(a)

0.000300
0.000167

20

0.000093

0
0

5000 10000 15000 20000 25000 30000 35000 40000 45000 50000

0.000093

5000 10000 15000 20000 25000 30000 35000 40000 45000 50000

generations

generations

(c)

(d)

Figure 9. Data along the generations. Here we show the evolution of the performance (top) and
of the number of coding triplets (bottom) with the generations, for the values of pi indicated by the
matching colours and for two values of pm . In (d), the dashed line represents the maximal number
of coding triplets (16). In (c), the corresponding line is outside the graph, being Nc∗ = 1047.0. Data
are sampled every 100 generations and averaged on the seeds.

22

number of coding triplets

400

100

40

10

50000 generations

10-4

10-3

10-2

10-1

100

pi

performance

performance

Figure 10. Correlation of the mean number of coding triplets N̄c versus the states-increase
probability pi . For each value of pi , only the four best values of the final performance (at four
different pm ) are retained for the evaluation of N̄c , for each seed. The green straight line of linear
regression is evaluated on the range pi ≤ 3.33 · 10− 2 only, in order to compare with figure 7 of [1].

log10 pi

log10 pi

(a)

(b)

Figure 11. Comparison between actual and previous data. The subfigure (a) corresponds to
figure 4.c restricted to the range of pi values considered in [1]. Subfigure (b) is the same as (a) but
for the data obtained in [1].

23

pm = 1.64 · 10−3
log10 τ

log10 τ

pm = 9.91 · 10−4

Nc

pm = 2.70 · 10−3

pm = 4.44 · 10−3
log10 τ

log10 τ

Nc

Nc

Nc

log10 τ

pm = 7.35 · 10−3

Nc
Figure 12. Extinction times vs mutation probabilities. Logarithm of the theoretical (continuous
line) and observed (points) extinction time log10 τ versus the number of coding triplets Nc for the
indicated mutation probabilities. The black vertical lines correspond to Nc∗ , the critical number of
coding triplets of the deterministic model (eq. (16)).

24

0.8

Nc=12
Nc=32
Nc=52
Nc=72
Nc=92

0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
1

2

3

4

5

6

7

8

9

10

performance

p
50

digits of π
p m = 0.000364
seed = 1234

i

1.138952
0.632911
0.350877
0.194553

40

0.107991
0.059880
0.033333

30

0.018519
0.010204
0.005682

20

performance

Figure 13. Relative extinction probabilities versus the generation number. The curves correspond to pm = 4.44 · 10−3 , for five different values of Nc . The error threshold for the given pm is
Nc∗ ∼ 52, represented by the blue line. Data are renormalized by setting to one the probability of
observing an extinction event before generation 32768.

48
46
44
42
40
38
36

0.003145
0.001748

34

0.000972
0.000540

10

0.000300
0.000167
0.000093

0
0

5000

10000

15000

20000

25000

30000

35000

40000

45000

50000

generations

32
30
28
38000 38050 38100 38150 38200 38250 38300 38350 38400

generations

Figure 14. Each coloured line shows the evolution of the performance during the generations
for a single simulation. The mutation and seed values are shown in the upper left corner, while the
state-increase rate pi is indicated on the right by the matching colour. We observe the presence of
long stasis periods alternated by short periods of fast evolution. The small black rectangle is zoomed
on in the right part of the figure to show the actual jumps in the performance.

25

4

18

x 10

16
14
12
10
8
6
4
2
0

1

2

3

4

5

6

7

8

9

10

11

12

performance

Figure 15. Distribution of the performance jumps versus their amplitudes. This histogram
shows the number of increases in the performance versus their amplitude.

25

p
digits of π
p m= 0.004444
seed = 1234

i

1.138952
0.632911
0.350877

20

0.194553
0.107991
0.059880
0.033333

15

0.018519
0.010204
0.005682

10

0.003145
0.001748
0.000972
0.000540

5

0.000300
0.000167
0.000093

0
0

5000

10000 15000 20000 25000 30000 35000 40000 45000 50000

generations

Figure 16. Performance evolution near the error threshold. Here, as in figure 14, we show
the growth of the performance in the generations but for the much higher value of the mutation
probability pm = 0.0044. For this value of pm and certain values of pi , TMs reach the error threshold.
From there on, a typical oscillatory pattern emerges.

26

