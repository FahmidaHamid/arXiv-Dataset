Constructing a Minimum-Level Phylogenetic Network from a Dense
Triplet Set in Polynomial Time
Michel Habib∗, Thu-Hien To

arXiv:1103.2266v4 [q-bio.PE] 23 Jun 2011

June 24, 2011

Abstract
For a given set L of species and a set T of triplets on L, we want to construct a phylogenetic
network which is consistent with T , i.e which represents all triplets of T . The level of a network
is defined as the maximum number of hybrid vertices in its biconnected components. When T
is dense, there exist polynomial time algorithms to construct level-0, 1, 2 networks [1, 9, 10, 17].
For higher levels, partial answers were obtained in [18] with a polynomial time algorithm for
simple networks. In this paper, we detail the first complete answer for the general case, solving
a problem proposed in [10] and [17]: for any k fixed, it is possible to construct a minimum
4k
level-k network consistent with T , if there is any, in time O(|T |k+1 nb 3 c+1 ) 1 .

Keywords: phylogenetic networks, level, triplets, reticulations.

1

Introduction

The goal of phylogenetics is to reconstruct plausible evolutionary histories of currently living organisms from biological data. To describe evolution, the standard model is a phylogenetic tree in
which each leaf is labeled by a species, or a sequence and in which each node having descendants
represents a common ancestor of its descendants. However this model is not pertinent for capturing
the hybridization, recombination and lateral gene transfer events. So a new model of network was
introduced, which allows a species to have more than one parent, see [2]. In recent years, a lot of
work has been done on developing methods for computing phylogenetic networks [14, 7, 11, 12].
In [4] a parameter was introduced for phylogenetic networks, which is the number of hybridization
nodes per biconnected component and called the level. The level of a network measures its distance
to a tree.
It is always difficult to reconstruct the evolution on all data set, so normally it is done on only
smaller data. Therefore, it is necessary to recombine them together into one model. A triplet is
the smallest tree that contains information on evolution, so a classic problem is to recombine a
set of triplets. If there is no constraint on the triplet set, the problem of constructing a level-k
phylogenetic network consistent with a triplet set is NP-hard for all levels higher than 0 [9, 17, 19].
However if the triplet set is dense, that is if we require that there is at least one triplet in the data
∗

Université Paris Diderot - Paris 7, LIAFA, Case 7014, 75205 Paris Cedex 13, France. E-mail: michel.habib/thuhien.to/@liafa.jussieu.fr.
1
This is an improved result of a preliminary version presented at CPM’2009 [15]

1

for each three species, then the species set is better structured and then it is possible to construct
a level-1 [9, 10], or a level-2 [17] network, if one exists, in polynomial time. The following question
was first asked in [10]: Does the problem remain polynomial for level-k network for a fixed k? We
present here an affirmative answer to this question. Our preliminary version in [15] proved that we
can construct a minimum level-k network in time O(|T |k+1 n3k+1 ). In this version, we present an
4k
improved result with a complexity of O(|T |k+1 nb 3 c+1 ). As a consequence, it is possible to find a
network with the minimum level in polynomial time if the minimum level is restricted. It means
that the complexity is a polynomial function with the power of the minimum level.
Related works:
[1] presented an O(|T |.n)-time algorithm for determining whether a given set T of triplets on n
leaves is consistent with some rooted, distinctly leaf-labeled tree, i.e. a level-0 network, and if so,
returning such a tree. Later, improvements were given in [6, 8]. But the problem has been proved
to be NP-hard for all other levels [9, 17, 19]. Similarly the problem of finding a network consistent
with the maximum number of triplets is also NP-hard for all levels [9, 19]. The approximation
problem which gives a factor on the number of triplets that we can construct a network consistent
with, has been also studied in [3] for level-0, level-1, and level-2 networks.
Concerning the particular case of dense triplet sets, there are following results. For level-1,
[9] give an O(|T |)-time algorithm to construct a consistent network, and [18] gives an O(n5 )-time
algorithm to construct a consistent one with the minimum number of reticulations. For level-2, [17]
8
gives an O(|T | 3 )-time algorithm to construct a consistent network, and [18] presents an O(n9 )-time
algorithm to construct the consistent one with the minimum number of reticulations. For level-k
networks with any fixed k, there is only a result constructing all simple networks in O(|T |k+1 )-time
[18]. Recently, in [16] it was proved that when the level is unrestricted, the problem is NP-hard.
Besides an interesting recursive construction of level-k phylogenetic networks was proposed in [5].
Moreover the problem of finding a network consistent with the maximum number of triplets is
NP-hard for all levels [19].
There are also studies on the version of extremely dense triplet sets, that is when T is considered
to contain all triplets of a certain network. In this case, an O(|T |k+1 ) time algorithm was given in
[18] for level-k networks.

2

Preliminaries

Let us recall here some useful definitions also used in [4, 9, 10, 17]. Let L be a set of n species or
taxa or sequences.
Definition 1 A phylogenetic network N on L is a connected, directed, acyclic graph which has:
- a unique vertex of indegree 0 and outdegree 2 (root).
- vertices of indegree 1 and outdegree 2 (speciation vertices).
- vertices of indegree 2 and outdegree 1 (hybrid vertices or reticulation vertices).
- n vertices labeled distinctly by L of indegree 1 and outdegree 0 (leaves). So L is also called the
leaf set.
For sake of simplicity, we do not show the direction of arcs in the figures. By convention, arcs
are always directed away from the root. See Figure 1(a) for an example of a phylogenetic network
2

on L = {a, b, . . . , l}
a speciation vertex

a hybrid vertex

a highest cut-arc
a
a cut-arc
g
l
e

b
c

P1

P5

k

f

d h

P4

P2

j

P3

i
(a) A level-2 network N .

(b) NS

Figure 1: A level-2 network and its simple network .
For any two vertices u, v of N , we denote u ; v if u, v are distinct and there is a path in N
from u to v. In this case, we say that u is above v or equivalently v is below u. If u is either below
or above v then u, v are comparable. Given two paths p1 : u1 ; v1 and p2 : u2 ; v2 such that u1
is not on p2 , u2 is not on p1 and p1 , p2 have common vertices, if h is their highest common vertex,
then h must be a hybrid vertex. We say that p1 , p2 intersect at h.
Denote by u  v for a path from u to v which does not contain any hybrid vertex below u and
above v, if such a path exists.
Let U(N ) be the underlying undirected graph of N , obtained by replacing each directed edge
of N by an undirected edge.
Definition 2 [4] A phylogenetic network N is a level-k phylogenetic network iff each block of
U(N ) contains at most k hybrid vertices.
The network in Figure 1(a) is of level-2. It is easy to see that N is a level-0 phylogenetic network
iff N is a phylogenetic tree.
The block of U(N ) that contains the vertex corresponding to the root of N is called the highest
block. By abuse, we call the subgraph of N which induces this block the highest block of N . In
Figure 1(a), the highest block is in bold. Denote by H the set of the hybrid vertices contained in
the highest block of N , so |H| ≤ k.
Each arc of N whose removal disconnects N is called a cut-arc . A cut-arc (u, v) is highest
if there is no cut-arc (u0 , v 0 ) such that v 0 ; u. It can be seen that a highest cut-arc always has its
tail in the highest block.
A phylogenetic network is simple if each of its highest cut-arcs connects a vertex of the highest
block to a leaf. Figure 1(b) represents a simple level-2 network.
Definition 3 A triplet x|yz is a rooted binary tree whose leaves are x, y, z such that x, and the
parent of y and z, are children of the root. A set T of triplets is dense if for any set {x, y, z} ⊆ L,
at least one triplet on these three leaves belongs to T .
3

A triplet x|yz is consistent with a network N if it is ’in’ this network, i.e N contains two
vertices p 6= q and pairwise internal vertex-disjoint paths p ; x, p ; q, q ; y, and q ; z.
If a triplet is consistent with a network, we says also that this network is consistent with the
triplet. For example, a|bc is consistent with the network in Figure 1(a), but b|ac is not.
A network is consistent with a set of triplets iff it is consistent with all triplets in this set.
For the sake of simplicity, in the following it is always assumed that T is a dense triplet set,
and we will consider the following problem :
Main Problem
data: A dense triplet set T and a fixed integer k.
research: A level-k phylogenetic network consistent with T .
We call a level-k network consistent with T having the minimum number of hybrid vertices a
minimum level-k network consistent with T .
Let L be a subset of the L. The restriction of T to L is denoted by T |L = {x|yz ∈ T such that
x, y, z ∈ L}. Let P be a partition of L: P = {P1 , . . . , Pm }. Denote T ∇P = {Pi |Pj Pk such that
∃ x ∈ Pi , y ∈ Pj , z ∈ Pk with x|yz ∈ T and i, j and k are distinct} .
For each network N , by removing the highest block and the highest cut-arcs, we obtain several
vertex-disjoint subnetworks N1 , . . . , Nm . Each one is hung below a highest cut-arc. If in N , we
replace each Ni by a leaf, then we have a simple network called NS (Figure 1(b)). Let l(Ni ) be
the leaf set of Ni , so a l(Ni ) is called a leaf set below a highest cut-arc. It is easy to see that
P(N) = {l(N1 ), . . . , l(Nm )} is a partition of L. We can use biconnectivity to decompose our
problem as described in [17].
Lemma 1 Decomposition lemma N is a level-k network consistent with T iff each Ni is a
level-k network consistent with T |l(Ni ) for any i = 1, . . . , m and NS is a simple level-k network
consistent with T ∇P (N ).
Constructing a simple level-k network consistent with T ∇P (N ), if such a one exists, can be
done in polynomial time using [18]. Therefore the main difficulty if we want to derive from this
lemma a divide and conquer approach is to estimate the number of partitions that have to be
checked. Fortunately the search can be restricted to a polynomial number of partitions and to this
aim further definitions and technical lemmas are developed in the next sections.

2.1

SN-sets

Remark that if A is a leaf set below a cut-arc, i.e. a part of P (N ), then for any z ∈ L\A, x, y ∈ A,
the only triplet on {x, y, z} that can be consistent with the network is z|xy. Based on this remark,
we define a family of leaf sets, called CA-sets, for CutArc-sets, as follows.
Definition 4 Let A ⊆ L, then A is a CA-set if either it is a singleton or the whole L, or if it
satisfies the following property: For any z ∈ L\A, x, y ∈ A, the only triplet on {x, y, z} in T , if
there is any, is z|xy.
As noticed above, each part of P (N ) is a CA-set, but the converse claim is not always true.
Let us recall that [10] introduced a variation of these CA-sets by a closure operation, namely the
4

notion of SN-set. In [15], we showed the equivalence between these two definitions. Therefore, the
family of SN-sets is exactly the family of CA-sets and we will stick to the notation of SN-set for
any CA-set determined by Definition 4.
It was proved in [10] that if T is dense, then the collection of its SN-sets is a laminar family
[13]. It means that 2 SN-sets are either disjoint or one of them contains the other, hence this family
can be represented by a tree when considering inclusion. This tree is called SN-tree , its root
corresponds to L, and the leaves correspond to the singletons. Moreover each node v of the SN-tree
represents an SN-set made up with the leaves of the subtree rooted in v. Let s1 , s2 be two SN-sets.
We say that s1 is a child of s2 , or s2 is a parent of s1 , if in the SN-tree, the node representing s1
is a child of the node representing s2 . For example, in the SN-tree of Figure 2(a), the SN-set {d, e}
is a child of the SN-set {a, b, c, d, e}. A non trivial maximal SN-set is a child of L. To simplify the
notation, we call such a set a maximal SN-set .
Take for example the SN-tree in Figure 2(a). The SN-set {f, k, h, g, j, l} has two children {f, k}
and {h, g, j, l}. There are two maximal SN-sets which are {a, b, c, d, e} and {i, f, k, h, g, j, l}.

2.2

Split SN-sets

Definition 5 Let N be a network on L consistent with T , and let S be an SN-set of T different
from L. We say that S is split in N iff each child of S is equal to a part of P (N ). In other words,
each child of S is the leaf set below a highest cut-arc of N , or a certain l(Ni ).
Example 1 For example, suppose that T has the SN-tree in Figure 2(a). T can be the set of all
possible triplets on the leaf set L = {a, b, . . . k, l} except x|yz such that x, y but not z are in an SNset. It can be verified that the network N in Figure 2(b) is consistent with T . N has 9 subnetworks
Ni which gives us the partition P (N ) = {{a, b, c}, {d}, {e}, {f }, {g},{h}, {i}, {k}, {j, l}}. The
SN-set {g, h, j, l} is split in this network because each of its children, {g}, {h}, {j, l}, corresponds to
a part of P (N ). The SN-sets {d, e}, {f, k} are also split here. However, the SN-set {a, b, c, d, e} is
not split in this network. Indeed, its children are {a, b, c}, {d, e} and the latter one is not equal to
any part of P (N ). All other SN-sets, {a, b, c},{j, l},{f, g, h, j, k, l}, {f, g, h, i, j, k, l}, the singletons,
and the whole L, are neither split. In Figure 2(a), each white round node corresponds to an SN-set
which is split in N , each square node corresponds to an SN-set which is a part of P (N ).
By definition, a tree consistent with T has no split SN-set.
[10, 9] showed that if T is consistent with a level-1 network, then there exists a level-1 network
N consistent with T such that each maximal SN-set is a part of P (N ). So N has no split SN-set.
[17] showed that if T is consistent with a level-2 network, then there exists a level-2 network N
consistent with T in which each maximal SN-set is a part of P (N ), except at most one maximal
SN-set S such that each child of S equals a part of P (N ). So, N has at most 1 split SN-set.
For level-k networks, with k ≥ 3, each part of P (N ) does not always correspond to a maximal
SN-set and it can be any SN-set at any level in the SN-tree (its depth in the SN-tree is not bounded
by a function of k), but the number of split SN-sets is bounded by a linear function of k. Indeed,
in [15], we proved that a level-k network consistent with T has at most 3k split SN-sets. In this
paper, we propose a stricter bound: if T is consistent with a level-k network, then there is a level-k
network N consistent with T such that the number of split SN-sets of N is bounded by b 34 kc.
It is easy to see that two SN-sets which are both split in N are disjoint. An SN-set may be
split in a network but not-split in another network which is also consistent with the same triplet
5

i

split SN-sets

a b c d

c

a

i

b

h

e

d

e

g
f

k

h g

f
j

k

l

(a) The SN-tree of T . The white black square nodes
represent the SN-sets that split in N . The white
square nodes represent the partition of L in N .

j

l

(b) A network N consistent with
T.

Figure 2: Example 1 of split SN-set.

set. Therefore, when we say that S is split, we have to indicate in which network. However, for
convenience, from now on, when we say S is a split SN-set, it means that S is split in N , a level-k
network consistent with T that we are going to construct.
Lemma 2 The set of split SN-sets of N totally determines P (N ).
Proof: Suppose that we know the set of all split SN-sets of a network N , we can determine P (N )
as follows. Let Pi be a part of P (N ). So either Pi is a child of a split SN-set or not included in
any split SN-set. In the latter case, it is a biggest one that is not comparable (neither included nor
containing) with any split SN-set. For example, see Figure 2(a) where each split SN-set corresponds
to a white round node and each part of P (N ) corresponds to a black square node.
2
So, to bound the number of possible partitions of consistent level-k networks, we will find a
bound for the number of split SN-sets in a consistent level-k network. The idea is to find relations
between the number of split SN-sets and the number of the hybrid vertices. To this aim, some
functions from a split SN-set to a set of hybrid vertices will be introduced.

3

Some properties and functions of split SN-sets

This section explores some properties and functions of split SN-sets which will be used in Section
4 to find a stricter bound for the number of split SN-sets in a level-k network consistent with T .
A vertex of N is a lowest common ancestor, lca for abbreviation, of a split SN-set S if it is the
lca of all leaves of S. If S has only one lca, then we denote it by lca(S) . Remark that a lca of S
is never a hybrid vertex.
Let t be a lca of S, denote by Nt [S] the induced subgraph of N consisting of all paths from t
to the leaves of S, and N[S] = ∪ Nt [S] for all lcas t of S. In the figures which describe N in the
following, we represent N [S] by continuous lines and the parts not in N [S] by dotted lines.
For any SN-set S of T which is split in N , denote by s1 , . . . , sm the children of S, i.e. each si
is a part of P (N ). Let ui be the tail of the highest cut-arc below which si is attached to, so ui
is on the highest block of N . Sometimes, we denote usi instead of ui when there are more than
6

one split SN-sets that are involved. For any subset f of L \ S, and children si , sj of S, denote
f |si sj = {x|yz ∈ T such that x ∈ f and y, z ∈ si ∪ sj }.

3.1

Function a
lca(S)

Definition 6 For any split SN-set S of N , let:
a(S) = {h ∈ H | h is in N [S] and ∃ a child si of S such that either
h = ui or there is a path h  ui } (a for above)
Example 2 For example, in the figure on the right, a(S) =
{h0 , h2 , u4 } because they are in H, in N [S], and we have the paths
h0  u3 , h2  u2 . h1 is in N [S] but it is not in a(S) because any
path from h1 to any ui contains at least another hybrid vertex.

h1
h0
u3
u3
u4
s4

s3

h2

u2
s3 s
2

u1
s1

Lemma 3 Let S be a split SN-set of N .
(i) a(S) = ∅ iff N [S] does not contain any hybrid vertex of H.
(ii) If |a(S)| ≤ 1 then S has only one lca.
(iii) If a(S) = ∅, then ∀x 6∈ S, there must exist a path from the root to x which is vertex-disjoint
with N [S].
Proof: (i) This claim is inferred directly from the definition of a.
(ii) Suppose that S has 2 lcas, called t1 , t2 . Let s1 be a child of S, so there exists a path t1 ; u1
and a path t2 ; u1 .
Since t1 is neither above nor below t2 , these two paths must intersect
at a hybrid vertex above u1 . Let h1 be a lowest hybrid vertex below
t1
t2
t1 , t2 and above u1 , i.e. we have a path h1  u1 . So h1 ∈ a(S) by
definition. Let s2 be another child of S such that t1 , t2 are lcas of s1 , s2 .
h1
h2
By the same argument, there is a hybrid vertex h2 and a path h2  u2 ,
u2
u1
i.e. h2 ∈ a(S). It is evident that h1 6= h2 because otherwise h1 is
a lca of s1 , s2 . So a(S) contains at least two hybrid vertices h1 , h2 , a
s2
s1
contradiction.
(iii) From the fact that a(S) = ∅, we deduce that N [S] does not have any hybrid vertex in H
and S has only one lca. Let si , sj be two children of S such that lca(si , sj ) = lca(S). Because S
is an SN-set, x|si sj is consistent with N for any x 6∈ S. So, there exist two vertices p, q of N such
that there are 4 internal vertex-disjoint paths p ; x, p ; q, q ; ui and q ; uj .
We deduce that q = lca(S) because ui , uj have only one lca which
p
is lca(S). Suppose that the path p ; x has common vertices with
lca(S) = q
N [S], then this path must pass lca(S) because N [S] does not have
any hybrid vertex in H. It implies that the paths p ; x, q ; ui ,
uj
ui
q ; uj have lca(S) as a common vertex, a contradiction. So, there
x
si
sj
2
exist at least a path p ; x which is vertex-disjoint with N [S].
Lemma 4 For any h ∈ H, |a−1 (h)| ≤ 1, i.e. a hybrid vertex is assigned to at most one split SN-set
by function a.
7

Proof: Assume that there exist 2 split SN-sets X, Y such that h ∈ a(X) ∩ a(Y ).
By definition, there exists x which is a child of X such that either
h = ux or there is a path h  ux . Similarly we have a child y of
h
Y . Let tY be a lca of Y , so tY is above h and let y 0 be another
child of Y such that lca(y, y 0 ) = tY . We see that any paths from
a vertex above tY to x and to y must pass h because there is no ux
uy
hybrid vertex on the paths from h to ux and to uy . So x|yy 0 is not
y
x
consistent with the network, contradicting Y being an SN-set.

3.2

tY

u y´
y´

2

Function b

Let S be a split SN-set of N such that a(S) = ∅, and h be a hybrid vertex not in N [S] below lca(S).
We denote lca(S) ,→ h for a path from lca(S) to h such that there is a path from the root to h
which is vertex-disjoint with N [S], and for any hybrid vertex h0 above h on this path, every path
from the root to h0 has common vertices with N [S]. In other words, h is a highest hybrid vertex
below lca(S) which has a path coming to it from outside of N [S].
Note that if there is a path lca(S)  h, i.e. if there is no hybrid vertex different from h on this
path, then this path is also a path lca(S) ,→ h.
Definition 7 For any split SN-set S of N such that a(S) =
∅, let b(S) = {h ∈ H | ∃ a path lca(S) ,→ h} (b for below)
Example 3 For example in the figure on the right, b(S) =
{h1 , h2 } because they are in H and we have two paths
lca(S) ,→ h1 , lca(S) ,→ h2 . h0 is not in b(S) because every
path from the root to h0 has common vertices with N [S]. h3
is not in b(S) because there is only one path from lca(S) to
h3 but this path contains the hybrid vertex h2 above h3 and
there is a path from the root to h2 (the dotted line) which is
vertex-disjoint with N [S].

lca(S)

h2

u4

h3
s4

u2
s2
u3
s3

u1
s1
h0
h1

Lemma 5 ∀h ∈ H, there are at most 2 split SN-sets X, Y such that a(X) = a(Y ) = ∅ and
h ∈ b(X) ∩ b(Y ).
Proof: Suppose that there are 3 split SN-sets X, Y, Z such that a(X) = a(Y ) = a(Z) = ∅ and a
hybrid vertex h ∈ b(X) ∩ b(Y ) ∩ b(Z). By definition, h is below lca(X), h is not in N [X] and there
is a path cX : lca(X) ,→ h. Similarly for Y, Z.
The 3 paths cX , cY , cZ pass h, then there are at least two among them, for example cY , cZ have
common vertex above h. We have the following cases:

8

(i) cY and cZ intersect at a hybrid vertex h0 above h. For
a certain leaf y of Y , by Lemma 3 (iii), there must exist
a path c from the root to y which is vertex-disjoint with
N [Z]. c must pass lca(Y ) because N [Y ] does not contain
any hybrid vertex in H. So lca(Y ) is not in N [Z] because c
is vertex-disjoint with N [Z]. h0 is neither in N [Z] because
h0 ∈ b(Z). So the path lca(Y ) ; h0 does not have common
vertices with N [Z]. Hence, the subpath of c from the root
to lca(Y ) extended to h0 is vertex-disjoint with N [Z]. The
later is a contradiction because cZ is a path lca(Z) ,→ h.
(ii) lca(Y ) is on cZ . Similarly to the above case, there is a
path c from the root to lca(Y ) which is vertex disjoint with
N [Z]. So c intersects with cZ at a hybrid vertex h0 above
lca(Y ). The subpath of c from the root to h0 is also vertexdisjoint with N [Z]. The later is a contradiction because cZ
is a path lca(Z) ,→ h.
(iii) Similarly for the case where lca(Z) is on cZ .

c

lca(Z)

lca(Y)

lca(X)

h'
h
(i)

lca(Z)

c
lca(X)

lca(Y)

h'

h
(ii)

2

Lemma 6 For any split SN-set S of N such that a(S) = ∅ and for any x 6∈ S which is below
lca(S), let Cx be a path lca(S) ; x, then Cx contains one and only hybrid vertex in b(S).
Proof: By Lemma 3 (i), N [S] does not contain any hybrid vertex in H. Since x 6∈ S then by
Lemma 3 (iii), there must exist a path Cx0 from the root to x which is vertex-disjoint with N [S].
This path must intersect with Cx at a hybrid vertex h0 above x. It means that there is at least one
hybrid vertex on Cx which has a path coming to it from outside of N [S]. Let hx be the highest
hybrid vertex on Cx having this property, then by definition hx ∈ b(S).
2

3.3

Restricting the searching class

We introduce here two lemmas 7, 9 which allow us to restrict the research to a class of level-k
phylogenetic networks having fewer split SN-sets without losing the ones having the minimum
number of hybrid vertices. It is a generalisation to level k of Theorem 3 in [17].
For any split SN-set S such that a(S) = ∅, let us define FS to be the set of elements (x, y, z)
where x, y are below lca(S), x, y 6∈ S, z ∈ S such that x|yz ∈ T .
Lemma 7 Given a level-k network N consistent with T . Let S be an SN-set of T which is split
in N such that a(S) = ∅ and for any (x, y, z) ∈ FS :
- either there is a path from the root to x which is vertex-disjoint with a path from lca(S) to y,
- or there exist 2 vertices p, q in N such that p is above lca(S) and there are 4 internal vertexdisjoint paths p ; q, p ; x, q ; y, q ; z.
Then, there is a level-k network N 0 consistent with T , having the same number of hybrid vertices
as N , in which S is not split but is equal to a part of P (N 0 ).
Proof: Suppose that S satisfies the condition stated in the lemma. Because a(S) = ∅, by Lemma
3, S has only one lca. Let GS be the network obtained from N [S] by contracting all arcs having
one extremity of in-degree 1 and out-degree 1. So, GS has one lca, called vS . We construct N 0 from
N as follows (see the figure below in which only the part of the network that concerns S is drawn):
9

Delete from N all subnetworks on si ,
uS
vS
contract all arcs having one extremity
lca(S)
of in-degree 1 and out-degree 1, add a
u1
s1 s2 s3 s4
new vertex uS in the middle of the arc
u
3
u4
s1
u2
coming to lca(S) and then add a new
GS
s
3
arc from uS to vS where we attach GS .
s
4
s2
So (uS , vS ) is a highest cut-arc of N 0 ,
Modify N → N 0
i.e S is a part of P (N 0 ).
Because a(S) = ∅, there is not any hybrid vertex of H in N [S]. So, GS does not contain any
hybrid vertex except those in the subnetworks on si . It implies that N 0 has the same level and
the same number of hybrid vertices as N . Now, it remains to show that N 0 is consistent with all
triplets of T . For a triplet x|yz ∈ T , we can distinguish the 6 following cases:
(1) Since S is an SN-set, the cases x, y ∈ S and z ∈
/ S or x, z ∈ S and y ∈
/ S are excluded.
uS
lca(S)

p

ui

si

q
si

uj
x
sj

y
sk

x
sj y
sk

ul

uk

p

z
sl

q
z
sl

GS

Figure 3: (2): x, y, z ∈ S
(2) x, y, z ∈ S (Figure 3), so there exist sj , sk , sl such that x ∈ sj , y ∈ sk , z ∈ sl (j, k, l are not
necessarily distinct). By definition of consistency, N has 2 vertices p, q and the internal vertexdisjoint paths p ; q, p ; x, q ; y, q ; z. Because there is not any hybrid vertex in N [S], any
path from a vertex above lca(S) to any leaf of S must pass lca(S). So, p, q can not be above lca(S)
because otherwise, there are at least 2 among the 4 paths p ; q, p ; x, q ; y, q ; z have lca(S)
as a common vertex. We deduce that p, q are in N [S]. So, x|yz is consistent with N [S], or with
GS , and then is consistent with N 0 .
(3) x, y, z ∈
/ S. We do not change the configuration of the network except the positions of the
subnetworks on si . So all triplets of this case remain consistent with N 0 .
(4) x ∈
/ S, y, z ∈ S. In N 0 , y, z are below the highest cut-arc (uS , vS ) while x is not. Hence, the
triplet x|yz is consistent with N 0 in this case.
(5) x ∈ S, y, z ∈
/ S. Let si be the child of S such that x ∈ si . Let p, q be two vertices of N
such that there are internal vertex-disjoint paths p ; x, p ; q, q ; y, q ; z, we will prove that
lca(S) and p are comparable. Suppose otherwise, then any path p ; ui intersects with any path
lca(S) ; ui at a hybrid vertex h0 . If h0 = ui then ui is a hybrid vertex in a(S), a contradiction
because a(S) = ∅. So h0 is above ui . However, h0 is below lca(S), then a(S) contains at least one
vertex, a contradiction. Hence, we have two cases:
a) If lca(S) is below p (see Figure 4(a)), then q can not be below lca(S) because otherwise,
the paths p ; x and p ; q have lca(S) as a common vertex, a contradiction. In N the path p ; x
must pass lca(S). So the path p ; uS in N 0 is a subpath of p ; x in N . It implies that in N 0 ,
p ; uS is also internal vertex-disjoint with p ; q, q ; y and q ; z. So, x|yz is consistent with
10

uS

p

p

uS

q

q
lca(S)

y

z

y
ui

si

lca(S)

x

z

uk

uj

ui
si

uk

uj
q

x

q
sk

sj

sk

sj

GS

p

GS

x

x

y

y

z

(a) lca(S) is below p

z

(b) lca(S) is above p

Figure 4: (5): x ∈ S, y, z ∈
/ S.

N 0 because x is below uS .
b) If lca(S) is above or equal to p (see Figure 4(b)), because y, z are also below lca(S)
because they are below p. So, y, z have a lca q below lca(S), i.e below uS in N 0 . Moreover, in N 0 ,
x is hung below the highest cut-arc (uS , vS ), then any path uS ; x is internal vertex-disjoint with
uS ; q, q ; y, q ; z. In other words, x|yz is consistent with N 0 .
p

p

q
lca(S)

x

x

y
ui
si

q

y

uk

uj

cx

GS

sj

G

(a) lca(S) is below p

S

uk

ui
z
si

sk

cx
z

uj

z

z
sj

uS

lca(S)

uS

y

sk
x

y

x

(b) lca(S) is above p

Figure 5: (6): x, y ∈
/ S, z ∈ S.
(6) x, y ∈
/ S, z ∈ S. Let si be the child of S such that z ∈ si . For any two vertices p, q of N such
that there are 4 internal vertex-disjoint paths p ; x, p ; q, q ; y, q ; z, by the same argument
as that of the previous case (5), we deduce that lca(S) and p are comparable.
a) If lca(S) is below p (see Figure 5(a)), then in N 0 , uS is below p. Similarly to the case
(5a), the path p ; uS in N 0 is a subpath of p ; z in N , so it is internal vertex-disjoint with p ; x,
q ; y in N 0 . Because in N 0 , z is below the cut-arc (uS , vS ), so every path uS ; z is internal
vertex-disjoint with the paths p ; x, p ; q, q ; y, no matter where the position of q is (above or
below lca(S)). Hence, x|yz is consistent with N 0 .
b) If lca(S) is above or equal to p (see Figure 5(b)), then x, y are also below lca(S) because
they are below p, then. It means that (x, y, z) ∈ FS . According to the assumption:
- either there exist two other vertices p0 , q 0 such that p0 is above lca(S) and the internal vertexdisjoint path p0 ; x, p0 ; q 0 , q 0 ; y, q 0 ; z, then it returns to the case (a).
- or there is a path cx from the root to x which is vertex disjoint with a path cy from lca(S) to
11

y. In this case, cx in N 0 is also vertex disjoint with the path from uS to y by using cy . So, x|yz is
also consistent with N 0 .
We conclude that N 0 is consistent with all triplets of T .
2
For any split SN-set S such that a(S) = ∅, let FS0 be the subset of FS containing the elements
(x, y, z) such that:
(*) every path from the root to x has common vertices with every path from lca(S) to y, and
(**) let p, q be two vertices such that there are internal vertex disjoint paths p ; x, p ; q,
q ; y, q ; z, then p, q are in N [S].
Therefore, S does not satisfy the condition in Lemma 7 iff FS0 is not empty.
Lemma 8 Let S be a split SN-set in N such that a(S) = ∅ and FS0 6= ∅. For any (x, y, z) ∈ FS0 ,
there exist two distinct hybrid vertices hx , hy in b(S) such that hx is above x, hy is above y, and hx
is below hy .
Proof: By (**), there is a vertex p in N [S] and two internal vertex disjoint paths cx : p ; x, and
cy : p ; y. Let Cx be the path from lca(S) to x containing cx . Let Cy be the path from lca(S)
to y containing cy . By Lemma 6, there is a hybrid vertex hx of b(S) on Cx , namely hx . Because
hx 6∈ N [S], p ∈ N [S], so hx is below p, i.e. hx is on cx . Similarly, there is a hybrid vertex hy of
b(S) on cy . hx 6= hy because cx , cy are vertex-disjoint.
We will prove that hx is below hy . Let c0x be the subpath of cx from hx to x, and c0y be the
subpath of cy from hy to y. Because lca(S) ,→ hx , there is a path, called C 0 , from the root to hx
which is vertex-disjoint with N [S].
Let Cx0 be the path from the root to x consisting of C 0 and c0x . By (*), Cx0 , Cy must
lca(S)
lca(S)
C´
have common vertices. So, they must inp
p
C´
tersect at a hybrid vertex h0 because Cx0
q
does not pass lca(S), while x is below
q
0
s
s
lca(S). If h is below hy , then hy is above
h´
z
0
h
z
y
hx because h is above hx . So we are
hy
done. Suppose that h0 is above hy . Beh´
hx
hx
c´y
c´y
cause hy ∈ b(S), by definition every path
0
c´
c´
x
x
from the root to h must have common
y
y
x
x
vertices with N [S]. So, C 0 has common
h' is above h y
h' is below hy
vertices with N [S], a contradiction.
Hence, hx is below hy .
2
Lemma 9 Let N be a level-k network consistent with T , let S be an SN-set of T which is split in
N such that a(S) = ∅ and |b(S)| ≤ 2. Then there is a level-k network N 0 consistent with T , having
the same number of hybrid vertices as N , in which S is not split but equal to a part of P (N 0 ).
Proof: If S satisfies the conditions in Lemma 7, then we are done. Suppose that S does not satisfy
the conditions in Lemma 7, so FS0 is not empty. By using Lemma 8 with a certain element (x, y, z)
of FS0 , we deduce that b(S) contains at least 2 hybrid vertices. So |b(S)| = 2. Denote by h1 , h2 the
two hybrid vertices of b(S). Also by Lemma 8, h1 , h2 are comparable. Suppose that h0 is below h1 ,
then for any (x, y, z) ∈ FS0 , hx = h1 , hy = h2 , where hx , hy are defined as in the proof of Lemma 8.
12

We construct GS and modify N by the same
way that we did in the proof of Lemma 7. Howlca(S)
ever, the position of uS below which we hang
GS will be chosen differently. Let p0 be a vertex
s1
p0
p0
of N [S] such that there are two internal vertex
uS
u2
disjoint paths p0 ; h1 and p0 ; h2 . There exu3
s2 h
GS h2
2
ists always such a p0 , for example we can choose
s3
p0 = p which is defined in Lemma 8 for a certain
h1
h1
element (x, y, z) ∈ FS0 . uS is put in the middle
of the arc going from p on the path p ; h2 .
Modify N → N 0
Denote the obtained network by N 0 .
It is easy to see that N 0 has the same level and the same number of hybrid vertices as N . We
must check that all triplets x|yz of T are consistent with N 0 . It can be verified that the proof of
Lemma 7 still holds here for all triplets except the cases (5b) and (6b). Let p, q be two vertices of
N such that there exist 4 internal vertex disjoint paths p ; q, p ; x, q ; y, q ; z.
(5b) x ∈ S, y, z 6∈ S and p is in N [S], i.e. y, z are below lca(S). By Lemma 6, any leaf below
lca(S) and not in S must be below a hybrid vertex of b(S). Moreover, b(S) contains only h1 , h2
and h1 is below h2 . So both y, z are below h2 . Hence, there exists a lca q 0 of y, z which is below h2 .
Furthermore, uS is above h2 then in N 0 there are 4 internal vertex-disjoint paths uS ; x, uS ; q 0 ,
q 0 ; y and q 0 ; z, i.e x|yz is consistent with N 0 (Figure 6(a)).
lca(S)
p0
u2
u3

s2

s3
h1
y

x
s1

lca(S)
uS
x
GS

h2
q0
z

h1

s1

p0

p0

p0
uS

u2
u3

h2

z
s2

s3

q0

h1

z

y

q0

x

(a) Case (5b): x ∈ S, y, z 6∈ S

z
GS

h2
y

h1

h2
q0
y

x

(b) Case (6b): x, y 6∈ S, z ∈ S

Figure 6: x|yz is consistent with N 0
(6b) x, y 6∈ S, z ∈ S and p is in N [S], i.e. x, y are below lca(S). Then, each triplet x|yz in this
case corresponds to an element (x, y, z) of FS .
- If (x, y, z) ∈ FS \ FS0 , then it satisfies the properties in Lemma 7. We can use the same
argument as that in the proof of Lemma 7 to prove that x|yz is consistent with N 0 .
- Otherwise, (x, y, z) ∈ FS0 , so h1 = hx , h2 = hy . In other words, x is below h1 and y is below
h2 . By construction, uS is added on the path p0 ; h2 , so in N 0 there are 4 internal vertex-disjoint
paths p0 ; h1 ; x, p0 ; uS , uS ; h2 ; y and uS ; z (Figure 6(b)). Hence, x|yz is consistent
with N 0 .
2
Using Lemmas 7, 9 without loss of the networks having the minimum number of hybrid vertices,
we can restrict the research on the networks N such that: each split SN-set S of N having a(S) = ∅
13

does not satisfy the 2 conditions in these Lemmas. In the following, we use only one of these
two conditions, i.e. if a(S) = ∅, then |b(S)| ≥ 3.

4

A bound on the restricted networks class

As concluded in Section 3.3, without loss the level-k networks having the minimum number of
hybrid vertices, we can suppose that the constructing level-k networks N having the following
property: for any split SN-set S of N , if a(S) = ∅, then |b(S)| ≥ 3.
Let S be the set of SN-sets of T that are split in N . We will bound |S| by a stricter linear
function of k. To this aim, the functions a, b defined in Section 3 and another function t defined
in the next will be explored. We will introduce some lemmas showing some properties of each
function which allow us to establish the relation between the number of hybrid vertices in H and
the cardinality of S.

4.1

Partition H and S by the functions a, b

Using the function a, we partition H and S into several subsets: (Figure 7(a)).
- H0a = {h ∈ H|a−1 (h) = ∅}, and S0a = {S ∈ S|a(S) = ∅}.
- For any i ≥ 1, Sia = {S ∈ S| |a(S)| = i}, so all Sia are pairwise disjoint.
- Hia is the image of Sia by the function a. By Lemma 4, all Hia are pairwise disjoint.

S0a
S1a

1

H0a

S0a

H1a

m

≤1

H1b

≤2

H2b

≤1

a
Hm

|b| ≥ 3

|a−1 | ≤ 1
(a) |Hia | = i|Ci |, ∀i ≥ 1

H0a ∩ H1b

H1a ∩ H2b

2

i
a
Sm

t

b

a

(b) 3|S0a | ≤ |H1b | + 2|H2b |

a ∩ Hb
H≥2
1

|t| = 1
(c) |H1a ∩ H2b |
a ∩ Hb |
≤ 2|H0a ∩ H1b | + |H≥2
1

Figure 7: The 3 functions a, b, t and their properties. The set of hybrid vertices: H = ∪ Hia =
H1b ∪ H2b . The set of split SN-sets: S = ∪ Sia .

a |
Lemma 10 |S| ≤ k + |S0a | − |H0a | − 12 |H≥2
a
a
Proof: By definition, all Hia are
pairwise disjoint, and |H
i | = i|Si | for any i ≥ 1.
P
P
Then: |S| = |S0a | + |S1a | + i≥2 |SiaP
| = |S0a | + |H1a | + i≥2 1i |Hia |.
a
a
Furthermore, |H| = |H0 | + |H1 | + i≥2 |Hia | ≤ k
P
1
a
a
a
a
So, |S| ≤ k + |S0a | − |H0a | − i≥2 i−1
i |Hi | ≤ k + |S0 | − |H0 | − 2 |H≥2 |

14

2

a |.
Then, in order to bound |S|, it remains to determine the relations between |S0a |, |H0a | and |H≥2
Due to Lemma 5, we can use the function b to partition H into 2 subsets (Figure 7(b)):
H1b = {h ∈ H| there is at most one split SN-set X of S0a such that h ∈ b(X)}.
H2b = {h ∈ H| there are two split SN-sets X, Y of S0a such that h ∈ b(X) ∩ b(Y )}.
So, H1b and H2b are disjoint.

Lemma 11 (i) 3|S0a | ≤ |H1b | + 2|H2b |.
a |
(ii) |S| ≤ 43 k + 13 |H2b | − |H0a | − 12 |H≥2
Proof: (i) According to the assumption on restricted searching class, ∀S ∈ S0a , |b(S)| ≥ 3. With
the definition of H1b , H2b as above, we are done (see Figure 7(b)).
(ii) By Lemma 10 and Claim (i), we have:
a | ≤ k + 1 |Hb | + 2 |Hb | − |Ha | − 1 |Ha |.
|S| ≤ k + |S0a | − |H0a | − 21 |H≥2
1
2
0
≥2
3
3
2
We have |H1b | + |H2b | = |H| ≤ k, then |H1b | ≤ k − |H2b |.
a |.
So, |S| ≤ 43 k + 13 |H2b | − |H0a | − 12 |H≥2
2
a |. To this
To reach our main result we need to find the relation between |H2b | and |H0a |, |H≥2
aim, a function t is introduced.

4.2

Function t

a , denote by S the only split SN-set such that h ∈ a(S ). For any h in Ha , denote
For any h ∈ H≥1
h
h
1
by Ph a path from lca(Sh ) to h. We can always choose for each h in H1a a path Ph such that:
∀h1 , h2 ∈ H1a , if Ph1 , Ph2 have to common vertices u, v such that u is above v, then the two subpaths
of Ph1 and Ph2 from u to v are the same. It is easy to see that there exists always such a path for
each hybrid vertex of H1a . Indeed, if the two subpaths of Ph1 and Ph2 from u to v are not the same,
then we need only to change the subpath of Ph2 from u to v to be the same as the subpath of Ph1
from u to v. The new path Ph2 is always a path from lca(Sh2 ) to h2 .
∀h ∈ H1a , we define some sets of hybrid vertices associated with h as follows:
I0 (h) is the set of hybrid vertices in H0a different from h on Ph .
I1 (h) is the set of hybrid vertices h0 in H1a different from h on
lca(Sh1 )
Ph such that Ph and Ph0 have common vertices above h.
a different from h on
I2 (h) is the set of hybrid vertices h0 in H≥2
lca(Sh3 )
Ph such that Ph and N [Sh0 ] have common vertices above h.
lca(Sh )
Finally, I(h) = I0 (h) ∪ I1 (h) ∪ I2 (h).

lca(Sh4 )

h1

Example 4 For example in the figure on the right, h is a hybrid vertex of H1a and the path Ph contains 4 hybrid vertices
h1 , h2 , h3 , h4 . Suppose that h2 ∈ H0a , h1 , h3 ∈ H1a , h4 ∈ H2a . So,
I(h) = {h2 , h3 , h4 } where h2 ∈ I0 (h), h3 ∈ I1 (h), h4 ∈ I2 (h).
h1 6∈ I(h) because the path Ph1 does not have common vertices
above h1 with Ph .
Next, the function t is defined as follows.

h2
h3
h4
h

Definition 8 For every h ∈ H1a , if I(h) = ∅ then t(h) = null. Otherwise, let h0 be the highest
hybrid vertex of I(h), so:
a then t(h) = h .
If h0 ∈ H0a ∪ H≥2
0
a
If h0 ∈ H1 , then t(h) = t(h0 ), and we denote h → h0 .
15

lca(Sh3 )
lca(Sh1 )

lca(S )

lca(Sh1 )

lca(S )

h
h
h0
Example 5 For
example,
lca(Sh2 )
lca(Sh2 )
in Figure (i) suppose that
h1
h1
a
a
h1 , h2 ∈ H1 and h3 ∈ H0 ,
h2
h2
then t(h) = h3 .
In Figure (ii), suppose that
h3
h3
h1 , h2 , h3 ∈ H1a , and h0 ∈ H0a ,
h
h
then t(h) = t(h3 ) and h → h3 .
Next, t(h3 ) = h0 , so t(h) =
(i)
(ii)
t(h3 ) = h0 .
The 3 following lemmas will be used to prove some properties of the function t.

a , if lca(S) is on P then there exists a hybrid vertex in Ha which
Lemma 12 ∀h ∈ H1a , ∀S ∈ S≤1
h
0
is on Ph and above lca(S).

Proof: Let s, s0 be two children of S such that lca(s, s0 ) = lca(S). Suppose that there is a hybrid
vertex on Ph below lca(Sh ) and above lca(S), then let h0 be the lowest one (Figure 8(a)). If h0 ∈ H0a
then we are done. Suppose that h0 is not in H0a , then there exists the split SN-set Sh0 = a−1 (h0 )
and a child s0 of Sh0 such that there is a path h0  u0 . Let s00 be another child of Sh0 such that
lca(s0 , s00 ) is above h0 . Since h0 is the lowest hybrid vertex on Ph below lca(Sh ) and above lca(S),
then there is no hybrid vertex on Ph which is below h0 and above lca(S). Therefore, in order that
s|s0 s00 is consistent with N , there must exist a hybrid vertex below lca(S) and above u. Similarly
for s0 |s0 s00 , there must be a hybrid vertex below lca(S) and above u0 . It means that a(S) contains
at least two elements, a contradiction.

lca(Sh0 )

lca(Sh )
h0

s0

s00

u0
u0

u0h

u00

s0h

lca(S)

lca(Sh )
u0
s0

u

s0
s

lca(S)
u
s

h

h
uh
sh

(a) ∃ a hybrid vertex h0 not in H0a on
Ph above lca(S)

(b) There is not any hybrid vertex on
Ph above lca(S)

Figure 8: Proof of Lemma 12
Hence, there is not any hybrid vertex on Ph below lca(Sh ) and above lca(S). Because h ∈ a(Sh ),
Sh has a child sh such that either h = uh or there is a path h  uh . Let s0h be another child
of Sh such that lca(sh , s0h ) = lca(Sh ) (Figure 8(b)). So, there is not any hybrid vertex on any
16

path from lca(Sh ) to u0h , because otherwise a(Sh ) contains another hybrid vertex different from h,
contradicting Sh ∈ S1a . It implies that every path from a vertex above lca(Sh ) to u0h must pass
lca(Sh ). Therefore, in order that s|sh s0h is consistent with the network, there must exist a hybrid
vertex below lca(S) and above u. Similarly for s0 |sh s0h , there must exist a hybrid vertex below
lca(S) and above u0 . It means that a(S) contains at least two elements, a contradiction.
2
Lemma 13 For any h ∈ S1a , let h0 be a hybrid vertex on Ph which is in H2b . Then there is a hybrid
vertex of H0a above h0 on Ph .
Proof: Because h0 ∈ H2b , there exist T, T 0 ∈ S0a such that h0 ∈ b(T )∩b(T 0 ). By definition, h 6∈ N [T ]
and there exist a path cT : lca(T ) ,→ h. Similarly for T 0 have a path cT 0 .
We will prove that there exists a path c from the root to lca(Sh ) which is vertex-disjoint with
N [T ] (Figure 9(a)). Since h ∈ a(Sh ), Sh has a child s such that either u = h or there is path h  u.
Let s0 be another child of Sh such that lca(s, s0 ) = lca(Sh ). There is not any hybrid vertex above
u0 and below lca(Sh ) because otherwise a(Sh ) contains another hybrid vertex different from h. By
Lemma 3 (iii), there is a path c0 from the root to u0 which is vertex disjoint with N [T ]. c0 must
pass lca(Sh ) because otherwise there must be a hybrid vertex above u0 and below lca(S). Let c be
the subpath of c0 from the root to lca(Sh ), so c is also vertex-disjoint with N [T ].
The 3 paths cT , cT 0 , Ph pass h0 while the indegree of h0 is 2, so at least two among them have
common vertices above h0 . If these two paths are cT , cT 0 , then by the same argument with the
proof of Lemma 5 where T, T 0 correspond to Y, Z, we deduce a contradiction. So PS has common
vertices with either cT or cT 0 . Suppose that it is cT , we have the following cases:
c

c
lca(Sh)

lca(Sh)

lca(T)

P´

u´

h
s´

lca(T)

c
h´ lca(S )
h

h´
h

u

h

s
(a)

(b) cT intersects with Ph

(c) lca(Sh ) is on cT

Figure 9: Proof of Lemma 13
- lca(T ) is on Ph : then by applying Lemma 12 with S = T , there is a hybrid vertex of H0a on
Ph which is above lca(T ), so above h0 , we are done.
- cT intersects with Ph at a hybrid vertex h0 above h0 (Figure 9(b)). As proved above, there is
a path c from the root to lca(Sh ) which is vertex-disjoint with N [T ]. Let P 0 be the subpath of Ph
from lca(S) to h0 , and C be the path consisting of c and P 0 . We will prove that lca(T ) must be
on P 0 . Because cT is a path lca(T ) ,→ h, every path from the root to h0 must have common vertex
with N [T ]. Since N [T ] does not contain any hybrid vertex, we deduce from the later that every
path from the root to h0 must pass lca(T ). In other words, C must pass lca(T ). We know that
lca(T ) can not be on c because this path is vertex disjoint with N [T ]. So lca(T ) must be on P 0 .
Hence, we return to the previous case.
17

- lca(Sh ) is on cT (Figure 9(c)): As proved above, there is a path c from the root to lca(Sh )
which is vertex-disjoint with N [T ]. This path intersects with cT at a hybrid vertex h0 above lca(Sh ).
The subpath of c from the root to h0 is also vertex disjoint with N [T ], contradicting the fact that
cT is a path lca(T ) ,→ h.
2
Lemma 14 (i) ∀h1 , h2 ∈ H1a if h1 → h2 then h2 ∈ H1a ∩ H1b .
(ii) ∀h1 , h2 ∈ H1a such that h1 6= h2 , if h1 → h01 and h2 → h02 then h01 6= h02 .
Proof: (i) By definition 8, h2 ∈ H1a , and h2 is the highest hybrid vertex of I(h1 ) on Ph1 . Suppose
that h2 ∈ H1a ∩ H2b , then according to Lemma 13, there is a hybrid vertex of H0a on Ph1 above h2 .
So, this hybrid vertex is in I0 (h1 ). It is a contradiction because h2 must be the highest hybrid
vertex of I(h1 ). Hence, h2 ∈ H1a ∩ H1b .
lca(Sh0 )

lca(Sh1 )

lca(Sh1 )

lca(S 0 )

h1

lca(Sh2 )
lca(Sh2 )

h0

h2

lca(Sh0 )
h0

h0
(a) Ph1 and Ph2 do not have any
common vertex above h0

(b) Ph1 and Ph2 intersect at a hybrid vertex h0 above h0

Figure 10: Proof of Lemma 14 (ii)
(ii) Suppose that h01 = h02 = h0 . So, the 2 paths Ph1 , Ph2 pass h0 . There are the following cases:
- lca(Sh2 ) is on Ph1 , then by Lemma 12, there is a hybrid vertex h0 of H0a on Ph1 above lca(Sh2 ).
It means that h0 ∈ I0 (h1 ) and is above h0 , contradicting h0 being the highest hybrid vertex of
I(h1 ). Similarly for the case lca(Sh1 ) is on Ph2 .
- Ph1 and Ph2 do not have any common vertex above h0 (Figure 10(a)). We have h1 → h0 ,
so Ph1 intersects with Ph0 at a hybrid vertex h1 above h0 . Similarly, Ph2 intersects with Ph0 at
a hybrid vertex h2 above h0 . Suppose that h1 is above h2 , the case where h2 is above h1 will be
treated similarly. Note that the two paths Ph0 and Ph1 have two common vertices: h1 and h0 .
Then, by the property that we impose on Ph for any h in H1a , the two subpaths of Ph0 and Ph1
from h1 to h0 are the same. h2 is a vertex on the subpath of Ph0 from h1 to h0 , so it must be also
on the subpath of Ph1 from h1 to h0 . However, it means that h2 is a common vertex above h0 of
Ph1 and Ph2 , a contradiction.
- Ph1 and Ph2 intersect at a hybrid vertex h0 above h0 (Figure 10(b)). So h0 6∈ I(h1 ) ∪ I(h2 )
a . Let
because h0 is the highest hybrid vertex of I(h1 ) and of I(h2 ). We deduce that h0 ∈ H≥1
0
−1
0
0
0
S = a (h ). It is easy to se that N [S ] must have common vertices above h with either Ph1 or
Ph2 . So, h0 is either in I(h1 ) or in I(h2 ), a contradiction.
Therefore, h01 6= h02 .
2

18

Lemma 15 The function t has the following properties:
a ) ∩ Hb .
(i) ∀h ∈ H1a ∩ H2b , t(h) is defined and equal to a hybrid vertex of (H0a ∪ H≥2
1
a
b
−1
a
b
(ii) ∀h0 ∈ H0 ∩ H1 , t (h0 ) contains at most 2 hybrid vertices of H1 ∩ H2 .
a ∩ Hb , t−1 (h ) contains at most 1 hybrid vertex of S a ∩ Hb .
(iii) ∀h0 ∈ H≥2
0
1
1
2
Proof: (i) Let h ∈ H1a ∩ H2b , suppose that we have a chain of split SN-sets h → h1 → · · · → hm
defined as in Definition 8.
Firstly, we will prove that hi 6= h for any i. It is obvious that h 6= h1 because h → h1 . Suppose
that hi = h for a certain i > 1, then hi−1 → h. By Lemma 14 (i), h 6∈ H1a ∩ H2b , a contradiction.
Next, we will prove that hi 6= hj for any i, j = 1, . . . , m. Suppose otherwise, let i be the smallest
index such that there exists j greater than i and hi = hj = h0 . If i > 1, then we have hi−1 → hi
and hj−1 → hj . However, hi−1 6= hj−1 because i is the smallest index having this property. So it is
a contradiction with Lemma 14 (ii). If i = 1, we have h → hi and hj−1 → hj . However, as proved
recently, h 6= hj−1 , so it is a contradiction with Lemma 14 (ii).
Hence, the recursive calls in Definition 8 do not loop, and since the number of split SN-Sets is
finite, t(h) is always defined.
Now, we show that ∀h ∈ H1a ∩ H2b , t(h) 6= null. By Lemma 13, the fact h ∈ H1a ∩ H2b deduces
that I0 (h) 6= ∅, i.e. I(S) 6= ∅. Let h0 be the highest vertex of I(h), if h0 ∈ I0 (h) ∪ I2 (h), then by
definition t(S) = h0 6= null. Suppose that h0 ∈ I1 (h), and to define t(h) we pass a chain of other
split SN-sets: h → h1 → · · · → hi and suppose that I(hi ) = ∅, i.e. t(hi ) = null. Because hi−1 → hi ,
the two paths Phi−1 and Phi pass hi and have common vertices above hi . There are the following
cases:
- lca(Shi ) is on Phi−1 . Then by Lemma 12, there is a hybrid vertex of H0a on Phi−1 , above
lca(Shi ), so above hi . It means that this hybrid vertex is in I(hi−1 ) and above hi , contradicting hi
being the highest hybrid vertex in I(hi−1 ).
- lca(Shi−1 ) is on Phi . Then by Lemma 12, there is a hybrid vertex of H0a on Phi above lca(Shi−1 ).
It means that this hybrid vertex is in I(hi ), contradicting I(hi ) = ∅.
- Phi and Phi−1 intersect at a hybrid vertex h0 above hi (figure lca(S
lca(S 0 )
hi−1 )
on the right). h0 is not in I(hi−1 ) because hi is the highest
lca(Shi )
a . Let S 0 = a−1 (h0 ),
vertex of I(hi−1 ). We deduce that h0 ∈ H≥1
so N [S 0 ] must have common vertices above h0 with either PSi−1
h0
or PSi . If it has common vertices with Phi−1 then h0 ∈ I(hi−1 ),
hi
contradicting hi being the highest vertex of I(hi−1 ). If it has
0
common vertices with Phi then h ∈ I(hi ), i.e. I(hi ) 6= ∅, a
hi−1
contradiction.
So t(hi ) 6= null or t(h) 6= null. Let t(hi ) = h0 , we deduce from definition of t that h0 is a hybrid
a . If h ∈ Hb , then by Lemma 13, there is a hybrid vertex of Ha on P
vertex of H0a ∪ H≥2
0
hi above
2
0
h0 . Then, this hybrid vertex is in I0 (hi ), contradicting h0 being the highest vertex of I(hi ). Hence,
a ) ∩ Hb .
h0 6∈ H2b , i.e. t(h) ∈ (H0a ∪ H≥2
1
(ii) Let h0 be a hybrid vertex in H0a ∩ H1b . Suppose that there are 3 distinct hybrid vertices
h1 , h2 , h3 of H1a ∩ H2b such that t(h1 ) = t(h2 ) = t(h3 ) = h0 .
Suppose that before reaching h0 , each one passes a chain of split SN-sets:
h1 → · · · → h01 , h2 → · · · → h02 , h3 → · · · → h03 , and t(h01 ) = t(h02 ) = t(h03 ) = h0 , i.e. h0 is the
highest hybrid vertex of I(h01 ), I(h02 ), I(h03 ).

19

lca(Sh01 )

lca(S 0 )

lca(S0 )

lca(Sh01 )

lca(Sh02 )

lca(Sh02 )

h0

h0
h0
a ∩ Hb
Figure 12: h0 ∈ H≥2
1

Figure 11: h0 ∈ H1a ∩ H1b

By Lemma 14 (i), in each chain, only the first hybrid vertex, i.e. h1 , h2 , h3 , is in H1a ∩ H2b , the
others are not. Because h1 , h2 , h3 are distinct, by Lemma 14 (ii) these chains do not have common
split SN-sets. In other words, h01 , h02 , h03 are also distinct. So, we need only to show that h0 can
not be the highest hybrid vertex of I(h01 ), I(h02 ), I(h03 ). The 3 paths Ph01 , Ph02 , Ph03 pass h0 , then
among them there are at least 2, for example Ph01 and Ph02 , have common vertices above h0 . There
are the following cases:
- If lca(Sh02 ) is on Ph01 , then by Lemma 12, there is a hybrid vertex of H0a on Ph01 , above lca(Sh02 ),
i.e above h0 . Then, this hybrid vertex is in I0 (h01 ). It is a contradiction because h0 is supposed to
be the highest hybrid vertex of I(h01 ). Similarly for the case where lca(Sh01 ) is on Ph02 .
- If Ph01 and Ph02 intersect at a hybrid vertex h0 above h0 (Figure 11), then h0 6∈ I(h01 ) ∪ I(h02 ).
a . Let S 0 = a−1 (h0 ), then N [S 0 ] must have common vertices above h0 with either P 0 ,
So, h0 ∈ H≥1
h1
or Ph02 . So, either h0 ∈ I(h01 ) or h ∈ I(h02 ), a contradiction.
a ∩ Hb , and S = a−1 (h ). Suppose that there are 2 hybrid
(iii) Let h0 be a hybrid vertex in H≥2
0
0
1
a
b
vertices h1 , h2 of H1 ∩ H2 such that t(h1 ) = t(h2 ) = h0 .
Suppose that before reaching h0 , each one passes a chain of split SN-sets:
h1 → · · · → h01 , h2 → · · · → h02 , and t(h01 ) = t(h02 ) = h0 , i.e. h0 is the highest hybrid vertex
of I(h01 ), I(h02 ). Similarly with Claim (ii), h1 , h2 are the only hybrid vertices of S1a ∩ H2b in these
2 chains and h01 , h02 are distinct. So, we have to only show that h0 can not be the highest hybrid
vertex of I(h01 ), I(h02 ). Suppose otherwise, because Ph01 , Ph02 pass h0 , we have the following cases.
- If lca(Sh02 ) is on Ph01 , or lca(Sh01 ) is on Ph02 , or Ph01 , Ph02 intersect at a hybrid vertex h0 above
h0 , then by the same argument as that of Claim (ii), we deduce contradictions.
- The last case is the case where Ph01 and Ph02 intersect at h0 (Figure 12). Let S0 = a−1 (h0 ), then
N [S0 ] must have common vertices above h0 with either Ph01 or Ph02 . It means that either h0 ∈ I(h01 )
or h0 ∈ I(h02 ), a contradiction.
2
a |
Lemma 16 |H2b | ≤ 2|H0a | + |H≥2
a ∩ Hb | (Figure 7(c))
Proof: By Lemma 15, we deduce that |H1a ∩ H2b | ≤ 2|H0a ∩ H1b | + |H≥2
1
a
b
a
b
a
b
a
b
a
b
a ∩ Hb | + |Ha ∩ Hb |
⇒ |H0 ∩ H2 | + |H1 ∩ H2 | + |H≥2 ∩ H2 | ≤ |H0 ∩ H2 | + 2|H0 ∩ H1 | + |H≥2
1
2
≥2
a |
⇒ |H2b | ≤ 2|H0a | + |H≥2
2

20

4.3

A bound

Theorem 1 If T is consistent with a level-k network N , then there exists a level-k network N 0
with the same number of hybrid vertices of N , which has at most b 34 kc split SN-sets.
Proof: According to Lemmas 11 (ii), 16, we have:
a | ≤ 4 k − 1 |Hb | ≤ 4 k.
|S| ≤ 34 k + 13 |H2b | − |H0a | − 12 |H≥2
2
3
6
3
Therefore, by Lemma 9 and the assumption stated at the beginning of the section, if T is
consistent with a level-k network N , then there exists a level-k network N 0 with the same number
of hybrid vertices of N , which has at most b 43 kc split SN-sets.
2
Remark: Up to now we do not have any example achieving this bound. Therefore it is possible
that the bound b 43 kc is not optimal, in fact each time we were able to construct an example of a
network which reaches this bound, we can modify it into another network which has a smaller
number of split SN-sets without changing the number of hybrid vertices. Especially, for the cases
of k ≤ 8, it can be checked case by case that the number of split SN-sets in the restricted networks
class is bounded by k.

5

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

Constructing a minimum phylogenetic network.
Data: A dense triplet set T on the set L of n species, and a fixed k
Result: A minimum level-k network consistent with T , if there exists one
Compute the SN-tree of T ;
For every singleton u of L, let Num be the network containing only one leaf u;
for (each non-singleton SN-set A of T , in non-decreasing order of size) do
T 0 = T |A;NAm = null;min = 0;
for (each set C of at most b 34 kc disjoint non-singleton descendants of A) do
P ← the partition of A inferred from C;
NAm ← a level-k network consistent with T and has P as its partition;
min ← the number of hybrid vertices in NAm ;
for (each level-k network NA consistent with T and has P as its partition) do
if (the number of hybrid vertices of NA < min ) then
min ← the number of hybrid vertices of NA ;
NAm = NA ;
if (NAm = null) then
return null;
return NLm
Algorithm 1: Constructing a minimum level-k phylogenetic network

4k

Theorem 2 For every T set of dense triplets and a fixed k, algorithm 1 takes time O(|T |k+1 nb 3 c+1 )
and return a minimum level-k network consistent with T if there is any.

21

Proof: The correctness of Algorithm 1
This algorithm consists of constructing a network on each SN-set following a non-decreasing order
of size (the loop For at line 3). So for each iteration corresponding to a SN-set A, a minimum
level-k network on each SN-set smaller than A is already constructed. Remark that if N is a
minimum level-k network consistent with T then each Ni is a minimum level-k network consistent
with T |l(Ni ). So, by constructing for each A a minimum level-k network NAm consistent with T |A,
finally NLm is a minimum level-k network consistent with T .
For each SN-set A, we must find a partition of A which is the one in a minimum level-k network
consistent with T |A. By Lemma 2, each partition is determined by a set of split SN-sets, and each
one is a non-singleton descendant of A. By Theorem 1, we need only to check all the possible sets
of descendants of A having cardinality at most b 43 kc. That is what the loop For at line 5 does.
Next, for each partition P inferred from each set of split SN-sets, the algorithm checks all level-k
networks which are consistent with T and have T as their partition, and then chooses the one which
contains the minimum number of hybrid vertices. The finding network is stocked in NAm . That is
what the loop For at line 9 does. If NAm = null, i.e there is not any level-k network consistent with
T |A, then we conclude that there is not any level-k network consistent with T .
The complexity of Algorithm 1
- The SN-tree of T can be computed in O(n3 ) (using the algorithm in [9]).
- The first loop For: There are at most O(n) non-singleton SN-sets, so there are at most O(n)
constructions.
4
- The second loop For repeats at most nb 3 kc times because A has at most O(n) non-singletons
4
descendants, so there are at most nb 3 kc possibilities for C.
- In the body of the second loop For: based on Lemma 1, to construct a level-k network
consistent with T 0 and has P as its partition, there are two steps: First, we compute a level-k
simple network NS consistent with T 0 ∇P. Then, we replace each leaf of NS by the subnetwork
already found on the corresponding part of P. According to [19], we can compute all level-k simple
networks consistent with T 0 ∇P in time O(|T 0 ∇P|k+1 ), or in time O(|T |k+1 ). The times needed to
compute the partition P of A from the set of split SN-sets C (Lemma 2), to replace each leaf of NS
by a subnetwork, are negligible compared to the time for computing all the simple networks. So
this loop takes time O(|T |k+1 ).
4k
Hence, the total complexity is O(|T |k+1 nb 3 c+1 ).
2
Corollary 1 For every T set of dense triplets, it is polynomial to compute a minimum level phylogenetic network consistent with T which minimizes the number of hybrid vertices if the minimum
level is restricted.
Proof: It is easy to see that we can slightly modify Algorithm 1 so that it returns a minimum level
network. Indeed, we try to construct a minimum level-i network consistent with T if there is any,
in increasing order of i. Then, the first value of i that the algorithm returns a network corresponds
4
to the minimum level of the networks consistent with T . So the complexity is O(k|T |k+1 nb 3 kc+1 )
where k is the minimum level.
2

22

6

Conclusion and perspectives

We proved that for any k fixed, we can construct a level-k network having the minimum number of
hybrid vertices, if there exists one, in polynomial time. Furthermore, if the minimum level of the
networks consistent with T is restricted, we can also construct one in polynomial time.
[17] implemented the algorithm for level-2 networks and applied it to some part of yeast genomic
data. However, on a bigger data set, there does not exist any level-2 networks. So with our result,
one could expect to practically find solution on real data, for small values of k (as for example with
k ≤ 5).
For simple networks, [10, 9, 17] showed, there are efficient algorithms for level-1, level-2. However, for general level-k networks, there exists only a O(|T |k+1 ) algorithm [19]. Any improvement
for this problem, even on small levels, will allow us to implement more efficiently our algorithm.
For any triplet set T we can define its T reerank(T ) as the minimum k for which there exists
a level-k network representing T . This measures the distance from T to be consistent with a tree.
This distance is measured in terms of the number of hybrid vertices. We proved in this paper that for
dense triplet sets, and for any fixed k, checking if T reerank(T ) ≤ k can be done in polynomial time.
Furthermore [16] proved the NP-hardness of the computation of the T reerank(T ) ≤ k. Therefore
this parameter has a similar behavior on phylogenetic networks that treewidth or undirected graphs.
Perhaps this analogy could yield further interesting structural insights as shown in [5] with a nice
recursive construction.
Another question is under which conditions on the triplet set T there is only one network
consistent with T . It would be also interesting to know whether the condition of density on the
triplet set can be relaxed so that there is still a polynomial algorithm to construct a consistent
level-k network, if there is any, with any fixed k.

Aknowledgements:
The authors wish to thank P. Gambette for many discussions on the subject and his careful reading
of this version.

References
[1] Alfred V. Aho, Yehoshua Sagiv, Thomas G. Szymanski, and Jeffrey D. Ullman. Inferring
a tree from lowest common ancestors with an application to the optimization of relational
expressions. SIAM J. Comput., 10(3):405–421, 1981.
[2] M. Arenas, G. Valiente, and D. Posada. Characterization of reticulate networks based on the
coalescent with recombination. Mol Biol Evol, 25(12):2517–2520, 2008.
[3] Jaroslaw Byrka, Pawel Gawrychowski, Katharina T. Huber, and Steven Kelk. Worst-case
optimal approximation algorithms for maximizing triplet consistency within phylogenetic networks. J. Discrete Algorithms, 8(1):65–75, 2010.
[4] Charles Choy, Jesper Jansson, Kunihiko Sadakane, and Wing-Kin Sung. Computing the maximum agreement of phylogenetic networks. Theor. Comput. Sci., 335(1):93–107, 2005.

23

[5] Philippe Gambette, Vincent Berry, and Christophe Paul. The structure of level-k phylogenetic
networks. In CPM, pages 289–300, 2009.
[6] Leszek Gasieniec, Jesper Jansson, Andrzej Lingas, and Anna Östlin. Inferring ordered trees
from local constraints. In CATS, pages 67–76, 1998.
[7] Dan Gusfield, Dean Hickerson, and Satish Eddhu. An efficiently computed lower bound on
the number of recombinations in phylogenetic networks: Theory and empirical study. DAM,
155(6-7):806–830, 2007.
[8] Monika Rauch Henzinger, Valerie King, and Tandy Warnow. Constructing a tree from homeomorphic subtrees, with applications to computational evolutionary biology. Algorithmica,
24(1):1–13, 1999.
[9] Jesper Jansson, Nguyen Bao Nguyen, and Wing-Kin Sung. Algorithms for combining rooted
triplets into a galled phylogenetic network. SIAM J. Comput., 35(5):1098–1121, 2006.
[10] Jesper Jansson and Wing-Kin Sung. Inferring a level-1 phylogenetic network from a dense set
of rooted triplets. Theor. Comput. Sci., 363(1):60–68, 2006.
[11] L. Nakhleh. Problem Solving Handbook in Computational Biology and Bioinformatics. ed.
Heath, Lenwood S. and Ramakrishnan, Naren. Springer, 2009.
[12] Gambette Phillipe.
Who’s who in phylogenetic networks,
http://www.lirmm.fr/ gambette/PhylogeneticNetworks/.

2010.

Available at

[13] A. Schrijver. Combinatorial Optimization - Polyhedra and Efficiency. Springer, 2003.
[14] Charles Semple. Reconstructing Evolution: New Mathematical and Computational Advances,
chapter Hybridization networks. ed. Olivier Gascuel and Mike Steel. Oxford University Press,
2006.
[15] Thu-Hien To and Michel Habib. Level-k phylogenetic networks are constructable from a dense
triplet set in polynomial time. In CPM, pages 275–288, 2009.
[16] L. van Iersel and S. Kelk. When two trees go to war. Journal of Theoretical Biology, 269(1):245–
255, 2011.
[17] Leo van Iersel, Judith Keijsper, Steven Kelk, Leen Stougie, Ferry Hagen, and Teun Boekhout.
Constructing level-2 phylogenetic networks from triplets. IEEE/ACM Trans. Comput. Biology
Bioinform., 6(4):667–681, 2009.
[18] Leo van Iersel and Steven Kelk. Constructing the simplest possible phylogenetic network
from triplets. In Seok-Hee Hong, Hiroshi Nagamochi, and Takuro Fukunaga, editors, ISAAC,
volume 5369 of Lecture Notes in Computer Science, pages 472–483. Springer, 2008.
[19] Leo van Iersel, Steven Kelk, and Matthias Mnich. Uniqueness, intractability and exact algorithms: Reflections on level-k phylogenetic networks. J. Bioinformatics and Computational
Biology, 7(4):597–623, 2009.

24

