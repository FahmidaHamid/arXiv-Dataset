AN ALGORITHMIC PIPELINE FOR ANALYZING

arXiv:1501.03461v1 [q-bio.QM] 14 Jan 2015

MULTI-PARAMETRIC FLOW CYTOMETRY DATA

A Dissertation
Submitted to the Faculty
of
Purdue University
by
Md Ariful Azad

In Partial Fulfillment of the
Requirements for the Degree
of
Doctor of Philosophy

May 2014
Purdue University
West Lafayette, Indiana

ii

To my mother Ayesha Begum,
eldest brother Md. Aslam hossain,
& wife Rubaya Pervin,
thank you for enlightening my spirit.

iii

ACKNOWLEDGMENTS
All praises go to the Almighty Allah for giving me the opportunity and strength
to achieve a doctoral degree. I remember my father who passed away at my young
age. May Allah keep him in the eternal peace.
Foremost, I convey my sincere gratitude to my advisor Prof. Alex Pothen for
his guidance and support in my Ph.D study. He patiently nurtured me throughout
the doctoral study and enthusiastically helped me in the research and writing the
thesis. The hospitality of Alex and his family made my stay at Purdue enjoyable. He
also advised me in many non-academic matters whenever needed. I could not have
imagined a better advisor and mentor.
I am grateful to Dr. Bartek Rajwa and Dr. Saumyadipta Pyne for helping me
with their immense knowledge. Without their help, it would be difficult for me to
understand the biological systems for which I developed algorithms in my dissertation.
I would like to thank Prof. Olga Vitek and Prof. Ananth Grama for serving in my
Ph.D advising committee and guiding me in various aspects of my research.
My sincere appreciation also goes to Dr. Mahantesh Halapannavar and Dr. John
Feo for mentoring me in the summer internship at Pacific Northwest National Lab
where I gained valuable experience from exciting projects. I thank my fellow colleagues and friends: Dr. Assefaw Gebremedhin, Arif Khan, Mu Wang, Yu-hong
Yeung, and Baharak Saberidokht for stimulating discussions and creating a friendly
work atmosphere. I am thankful to Johannes Langguth and Md. Mostofa Ali Patwary
who visited from university of Bergen and discussed interesting problems. I would
like to give my deepest thanks to Bangladeshi students at Purdue for making my stay
as comfortable as home. Especially, I am grateful to my friends Imrul Hossain and
Alim al Islam for their affection and generous help.

iv
I am blessed to be born in a lovingly family. As the youngest child, each member
of my family raised me with affection and instilled values in me. Especially my mother
Ayesha Begum and the eldest brother Md. Aslam Hossain made me passionate about
research and inspired me to pursue higher education abroad. Finally, I was not able to
finish this journey without the love and encouragement from my wife Rubaya Pervin.
Her cooperation and support in every aspect of life drive me forward.
It has been a great privilege to pursue my doctoral study in the Department of
Computer Science at Purdue University. I would like to thank the university and the
department for providing me an excellent environment for learning and research. I
will always cherish my memory at Purdue.

v

TABLE OF CONTENTS
Page
LIST OF TABLES . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

viii

LIST OF FIGURES . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

ix

ABBREVIATIONS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

xi

ABSTRACT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

xii

1 INTRODUCTION . . . . . . . . . . . . . . . . . . . . . . . .
1.1 Diversity of the cellular systems . . . . . . . . . . . . . .
1.2 Flow cytometry (FC) . . . . . . . . . . . . . . . . . . .
1.3 Flow cytometry data analysis . . . . . . . . . . . . . . .
1.3.1 Removing unintended cells . . . . . . . . . . . . .
1.3.2 Spectral unmixing (compensation) . . . . . . . .
1.3.3 Data transformation and variance stabilization . .
1.3.4 Identifying cell populations (gating or clustering)
1.3.5 Registering cell populations across samples . . . .
1.3.6 Meta-clustering and templates . . . . . . . . . . .
1.3.7 Classifying FC samples . . . . . . . . . . . . . . .
1.4 The need for automation in FC data analysis . . . . . . .
1.5 Contributions . . . . . . . . . . . . . . . . . . . . . . . .
1.6 Datasets used in this thesis . . . . . . . . . . . . . . . . .
1.6.1 Healthy donor (HD) dataset . . . . . . . . . . . .
1.6.2 T cell phosphorylation (TCP) dataset . . . . . . .
1.7 Related work . . . . . . . . . . . . . . . . . . . . . . . .
1.8 Outline of the thesis . . . . . . . . . . . . . . . . . . . .

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

1
1
3
4
5
6
8
9
10
11
12
13
15
18
18
19
20
22

2 VARIANCE STABILIZATION IN FLOW CYTOMETRY . . . . . . . .
2.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.2 Related work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.3 Variance stabilization for flow cytometry data . . . . . . . . . . . .
2.3.1 The goal of variance stabilization . . . . . . . . . . . . . . .
2.3.2 Channel-specific variance stabilization . . . . . . . . . . . .
2.3.3 flowVS : an algorithm for per-channel variance stabilization .
2.4 Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2.4.1 Selecting the optimum cofactors for the asinh transformation
2.4.2 Normality of the variance-stabilized clusters . . . . . . . . .
2.4.3 Application to microarray data . . . . . . . . . . . . . . . .

23
23
25
27
27
27
28
30
30
33
34

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.

vi

Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

Page
37

3 POPULATION IDENTIFICATION BY CLUSTERING ALGORITHMS
3.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.2 Clustering algorithms . . . . . . . . . . . . . . . . . . . . . . . . . .
3.3 Cluster validation methods . . . . . . . . . . . . . . . . . . . . . . .
3.3.1 Internal cluster validation methods . . . . . . . . . . . . . .
3.3.2 External cluster validation methods . . . . . . . . . . . . . .
3.3.3 Selecting the number of clusters (cell populations) . . . . . .
3.3.4 Selecting the “best” algorithm . . . . . . . . . . . . . . . . .
3.4 Consensus clustering . . . . . . . . . . . . . . . . . . . . . . . . . .
3.5 Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3.5.1 Identifying cell populations in a healthy sample . . . . . . .
3.5.2 Identifying cell sub-populations in T cells . . . . . . . . . . .
3.6 Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

39
39
41
43
44
47
49
49
50
51
51
54
59

4 REGISTERING CELL POPULATIONS ACROSS FC SAMPLES . . . .
4.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4.2 Dissimilarity between a pair of cell clusters . . . . . . . . . . . . . .
4.3 The mixed edge cover (MEC) algorithm . . . . . . . . . . . . . . .
4.3.1 Overview of the algorithm . . . . . . . . . . . . . . . . . . .
4.3.2 Bipartite graph model . . . . . . . . . . . . . . . . . . . . .
4.3.3 MEC algorithm on the bipartite graph . . . . . . . . . . . .
4.3.4 Proof of correctness . . . . . . . . . . . . . . . . . . . . . . .
4.3.5 Complexity of the MEC algorithm . . . . . . . . . . . . . .
4.4 Properties of mixed edge cover . . . . . . . . . . . . . . . . . . . . .
4.5 Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4.5.1 Registering populations across samples from two healthy subjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4.5.2 Registering populations before and after stimulating T cells
4.5.3 Registering population in diagnosing Acute Myeloid Leukemia
(AML) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4.6 Conclusions and future work . . . . . . . . . . . . . . . . . . . . . .

61
61
63
65
65
66
67
69
69
70
70

2.5

5 META-CLUSTERS AND CLASS TEMPLATES . . . . . . . . . . . . . .
5.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5.2 An algorithm for constructing templates . . . . . . . . . . . . . . .
5.2.1 Dissimilarity between samples or templates . . . . . . . . . .
5.2.2 The hierarchical matching-and-merging (HM&M) algorithm
5.2.3 Creating templates from a template-tree . . . . . . . . . . .
5.2.4 Computational complexity . . . . . . . . . . . . . . . . . . .
5.3 The homogeneity of meta-clusters and templates . . . . . . . . . . .
5.3.1 Analyzing homogeneity of a one-dimensional meta-cluster . .
5.3.2 Comparison with null hypothesis based significance testing .

70
73
75
76
78
78
81
81
82
83
84
84
85
87

vii

5.3.3 Analyzing homogeneity of high-dimensional meta-clusters
Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5.4.1 Creating templates from healthy samples . . . . . . . .
5.4.2 Creating templates from the TCP dataset . . . . . . . .
Conclusions and future work . . . . . . . . . . . . . . . . . . . .

.
.
.
.
.

.
.
.
.
.

Page
89
90
90
94
97

6 CLASSIFYING FC SAMPLES BASED ON TEMPLATES . . . . . .
6.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6.2 Classifying Samples with Static Templates . . . . . . . . . . . .
6.2.1 Creating static templates from a collection of FC samples
6.2.2 Classifying new samples with static templates . . . . . .
6.3 Building dynamic templates . . . . . . . . . . . . . . . . . . . .
6.3.1 The algorithm . . . . . . . . . . . . . . . . . . . . . . . .
6.3.2 Computational complexity . . . . . . . . . . . . . . . . .
6.3.3 Classifying a sample . . . . . . . . . . . . . . . . . . . .
6.4 Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6.4.1 Classifying stimulation status of T cells . . . . . . . . . .
6.4.2 Classifying immune patterns in healthy individuals . . .
6.5 Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

.
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.

100
100
102
102
103
104
104
106
107
108
108
113
114

7 CLASSIFICATION OF ACUTE MYELOID LEUKEMIA . .
7.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . .
7.2 Methods . . . . . . . . . . . . . . . . . . . . . . . . . .
7.2.1 The AML Dataset . . . . . . . . . . . . . . . .
7.2.2 Identifying cell populations in each sample . . .
7.2.3 Creating templates from a collection of samples
7.2.4 Classification score of a sample in AML dataset
7.3 Results . . . . . . . . . . . . . . . . . . . . . . . . . . .
7.3.1 Cell populations in healthy and AML samples .
7.3.2 Healthy and AML templates . . . . . . . . . . .
7.3.3 Identifying meta-clusters symptomatic of AML .
7.3.4 Impact of each tube in the classification . . . .
7.3.5 Classifying test samples . . . . . . . . . . . . .
7.4 Conclusions . . . . . . . . . . . . . . . . . . . . . . . .

.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.
.

116
116
118
118
120
120
120
123
123
124
127
132
134
136

8 CONCLUSIONS AND FUTURE WORK . . . . . . . . . . . . . . . . . .
8.1 Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8.2 Future work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

137
137
139

LIST OF REFERENCES . . . . . . . . . . . . . . . . . . . . . . . . . . . .

142

VITA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

155

5.4

5.5

.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.
.

.
.
.
.
.
.
.
.
.
.
.
.
.
.

viii

LIST OF TABLES
Table
1.1

Different analysis steps of FC data (right column) are originated from FC
data attributes (left column). . . . . . . . . . . . . . . . . . . . . . . .

Page
6

3.1

List of clustering algorithms used in the FC data analysis . . . . . . . .

42

3.2

List of internal cluster validation indices . . . . . . . . . . . . . . . . .

47

5.1

Summary of terminology used in Chapter 5 . . . . . . . . . . . . . . .

79

5.2

The homogeneity of meta-clusters contained in the templates created from
the TCP dataset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

97

The fluorophore-conjugated antibodies contained in each of the 8 tubes in
which the samples were incubated. . . . . . . . . . . . . . . . . . . . .

119

Meta-clusters characteristic of AML for the 23 AML samples in the training set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

128

Four statistical measures evaluating the performance of the template-based
classification in the AML data . . . . . . . . . . . . . . . . . . . . . . .

132

7.1
7.2
7.3

ix

LIST OF FIGURES
Figure

Page

1.1

A simplified cellular hierarchy of human immune cells . . . . . . . . . .

2

1.2

A schematic diagram of a flow cytometer . . . . . . . . . . . . . . . . .

3

1.3

A schematic view of flow cytometry (FC) samples . . . . . . . . . . . .

5

1.4

Removing unintended events from an FC sample . . . . . . . . . . . . .

7

1.5

Spectral unmixing in a pair of overlapped fluorescence channels . . . .

8

1.6

An FC data analysis pipeline . . . . . . . . . . . . . . . . . . . . . . .

16

1.7

Description of the healthy donor (HD) dataset . . . . . . . . . . . . . .

19

2.1

Mean-variance relationship in samples from the HD dataset before and
after variance stabilization . . . . . . . . . . . . . . . . . . . . . . . . .

31

Variance stabilizing cofactors used with the asinh transformation for the
HD dataset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

32

Density plot of the variance stabilized channels from samples in the HD
dataset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

33

2.4

The normality of the one dimensional clusters after variance stabilization

34

2.5

Three variance stabilization approaches applied to the Kidney microarray
data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

35

2.6

Variance stabilization of the Kidney microarray data . . . . . . . . . .

36

3.1

The performance of different clustering algorithms on a healthy sample

52

3.2

Selecting the optimum number of clusters in a healthy sample . . . . .

54

3.3

Lymphocyte sub-populations in a healthy sample . . . . . . . . . . . .

55

3.4

The optimum number of clusters in a sample from the TCP dataset . .

56

3.5

Consensus clustering algorithms applied to a sample from the TCP dataset

57

3.6

T cell sub-populations within a sample from the TCP dataset . . . . .

58

4.1

A working example of the mixed edge cover algorithm . . . . . . . . . .

68

4.2

Selecting the unmatch-penalty λ for the mixed edge cover algorithm . .

71

2.2
2.3

x
Figure
4.3

Page

Registering cell populations across two representative samples from the
HD dataset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

72

Registering populations across a pair of samples before and after stimulating T cells with an anti-CD3 antibody . . . . . . . . . . . . . . . . .

74

4.5

Registering populations between normal and AML samples . . . . . . .

75

5.1

An example of a template-tree created from four hypothetical samples .

80

5.2

The template-tree created from all samples of the HD dataset . . . . .

91

5.3

The homogeneity of meta-clusters for different groupings of samples in the
HD dataset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

93

Meta-clusters contained in the pre- and post- stimulation templates created from the TCP dataset . . . . . . . . . . . . . . . . . . . . . . . .

96

4.4

5.4
6.1

An algorithm for inserting a sample into the template-tree . . . . . . .

105

6.2

Four cases to consider when inserting a sample into the template-tree .

106

6.3

Sample classification based on static templates . . . . . . . . . . . . . .

109

6.4

The dynamic template-tree created from the samples of the TCP dataset

110

6.5

Heat plot showing the dissimilarity between pairs of samples in the TCP
dataset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

111

6.6

Levels of SLP-76 expression in each pair of samples from the TCP dataset 112

6.7

The template-tree created from the HD dataset . . . . . . . . . . . . .

113

7.1

Cell types identified on the side scatter (SS) and CD45 channels for a
healthy and an AML positive sample . . . . . . . . . . . . . . . . . . .

124

7.2

The healthy and AML templates created from Tube 6 of AML dataset

125

7.3

Bivariate contour plots (side scatter vs. individual marker) for two metaclusters indicative of AML . . . . . . . . . . . . . . . . . . . . . . . . .

131

7.4

Classification of the AML and healthy samples . . . . . . . . . . . . . .

133

7.5

Cell populations in a misclassified AML sample . . . . . . . . . . . . .

135

xi

ABBREVIATIONS
AML

Acute Myeloid Leukemia

ANOVA

ANalysis Of VAriance

CD

Cluster of Differentiation

CI

Confidence Interval

EM

Expectation Maximization

EMD

Earth Mover’s Distance

FC

Flow Cytometry

FS

Forward Scatter

GMM

Gaussian mixture model

HD

Healthy Donor

HIV

Human Immunodeficiency Virus

HM&M

Hierarchical Matching and Merging

MANOVA

Multivariate ANalysis Of VAriance

ML

Maximum Likelihood

MEC

Mixed Edge Cover

MFI

Mean Fluorescence Intensity

PAM

Partitioning Around Medoids

PBMC

Peripheral Blood Mononuclear Cells

RCS

Relative Cluster Separation

SS

Side Scatter

TCP

T Cell Phosphorylation

UPGMA

Unweighted Pair Group Method with Arithmetic Mean

VS

Variance Stabilization

xii

ABSTRACT
Azad, Ariful Ph.D., Purdue University, May 2014. An Algorithmic Pipeline for Analyzing Multi-parametric Flow Cytometry Data. Major Professor: Alex Pothen.
Flow cytometry (FC) is a single-cell profiling platform for measuring the phenotypes (protein expressions) of individual cells from millions of cells in biological
samples. In the last several years, FC has begun to employ high-throughput technologies, and to generate high-dimensional data, and hence algorithms for analyzing the
data represent a bottleneck. This dissertation addresses several computational challenges arising in modern cytometry while mining information from high-dimensional
and high-content biological data. A collection of combinatorial and statistical algorithms for locating, matching, prototyping, and classifying cellular populations from
multi-parametric flow cytometry data is developed.
The algorithms developed in this dissertation are assembled into a data analysis pipeline called flowMatch. This pipeline consists of five well-defined algorithmic
modules for (1) transforming data to stabilize within-population variance, (2) identifying phenotypic cell populations by robust clustering algorithms, (3) registering cell
populations across samples, (4) encapsulating a class of samples with templates, and
(5) classifying samples based on their similarity with the templates. Each module
of flowMatch is designed to perform a specific task independent of other modules of
the pipeline. However, they can also be employed sequentially in the order described
above to perform the complete data analysis.
The flowMatch pipeline is made available as an open-source R package in Bioconductor (http://www.bioconductor.org/). I have employed flowMatch for classifying leukemia samples, evaluating the phosphorylation effects on T cells, classifying
healthy immune profiles, comparing the impact of two treatments for Multiple Scle-

xiii
rosis, and classifying the vaccination status of HIV patients. In these analyses, the
pipeline is able to reach biologically meaningful conclusions quickly and efficiently
with the automated algorithms. The algorithms included in flowMatch can also be
applied to problems outside of flow cytometry such as in microarray data analysis
and image recognition. Therefore, this dissertation contributes to the solution of
fundamental problems in computational cytometry and related domains.

1

1 INTRODUCTION
1.1 Diversity of the cellular systems
The immune system of a living organism consists of numerous components performing in a coordinated manner in order to provide protection against diseases as
well as abnormally behaving host cells. The immune system must be able to detect
a wide variety of virulent agents, distinguish normal host cells from dis-regulated
pre-cancerous cells, as well as learn and store information about various external
perturbants [1]. In order to decipher the operation and the regulatory networks of
the immune system, it is crucial to obtain the quantitative description of its cellular
components.
Different subsets of immune cells can be distinguished on a basis of their phenotypes, which in turn determine their functions and roles. The phenotypes of each
cell are typically defined by a combination of morphological features such as size,
shape, granularity etc. and the abundances of surface and intracellular markers such
as the cluster of differentiation (CD) proteins. The immune cells can be organized
in a hierarchy where cells performing general functions are positioned at the top,
while cells performing specific functions are placed at the bottom of the hierarchy.
I display a simplified diagram of the hierarchy of immune cells in Figure 1.1, where
morphological features are highlighted in the left subfigure and CD protein markers
expressed by common sub-types of white blood cells (leukocytes) are shown in the
right subfigure.
An established way to classify different phenotypes relies on the presence of specific
proteins on the surface of cells. The surface molecules are assigned a CD (cluster of
differentiation) number related to the type of specific monoclonal antibodies (mAb)
that are shown to bind to that epitope. For example, the mature helper T cells (also

2
(a)

(b)
Multipotential hematopoietic
stem cell
(Hemocytoblast)

Common lymphoid progenitor

Common myeloid progenitor

Erythrocyte

Mast cell

Natural killer cell

Small lymphocyte

Myeloblast
T lymphocyte

B lymphocyte

Megakaryocyte
Basophil

Neutrophil

Eosinophil

Monocyte
Plasma cell

Thrombocytes

Macrophage

Figure 1.1. Simplified diagrams showing the cellular hierarchy of human
immune cells. (a) Heterogeneous immune cells develop from haematopoietic stem cell (HSC). Different types of cells have distinctive morphological
features such as size, shape, granularity etc. (b) Cluster of differentiation
(CD) protein markers are shown for the common sub-types of white blood
cells (leukocytes). (Images are modified from Wikimedia Commons under
Creative Commons license.)

known as CD4+ T cells) express CD45, CD3 and CD4 proteins. They are called
CD45+ CD3+ CD4+ cells in a common notation. Here, ‘+’ and ‘high’ indicate higher
abundances of a marker, and ‘−’ and ‘low’ indicate lower levels of it. Identifying the
CD4+ cell subset is pivotal in AIDS prognosis since the HIV virus infects this cell type
and significantly reduces the number of functional CD4+ T cells towards the end of
an HIV-1 infection [2]. Similar to the characterization of T cells, other cell types can
be identified, described, and isolated on the basis of their morphology, physiology,
and CD based immunophenotyping patterns. The phenotypic patterns of cells are
used to study their roles, interactions with other cell groups, and responses to various
stimuli in healthy or diseased systems [3,4]. For these purposes, flow cytometry (FC),
a profiling method measuring the phenotypic responses of the immune system at the
resolution of single cells, is commonly employed.

3

(a)

Cell sample

Analysis workstation

(b)
SSC

T
PM

Dichroicmirror

Nozzle

PMT
PMT
PMT

Cell
Filter

Laser

PMT
Int

Flow sheath

er
ro
ga

tio

Forward Scatter (size)
FL-2
FL-1

ADC

FL-3
Side Scatter (granularity)
FSC

n point

Fluorescence
(protein abundance)

Figure 1.2. (a) A schematic diagram of a flow cytometer showing the
hydrodynamic focusing of the fluid sheath, laser, optics (in simplified
form, omitting focusing), photomultiplier tubes (PMTs), analogue-todigital converter, and analysis workstation. (b) At the interrogation point,
the size, granularity and expression of markers for a cell are measured by
using forward scatter, side scatter and fluorescence intensities respectively.
(Images are modified from Wikimedia Commons under Creative Commons
license.)

1.2

Flow cytometry (FC)
Flow cytometry (FC) is a platform for measuring various features of individual

cells from millions of cells in a sample. The cellular features measured by FC include
several morphological features such as size, shape, granularity etc. and the abundance
of a number of proteins expressed by the cell. In typical FC experiments, cells in a
suspension (or other biological particles) flow in a stream of fluid passing the region
where a laser beam interrogates each cell. The light scattered by a cell in the forward
and perpendicular directions – known as Forward Scatter (FS) and Side Scatter (SS)
channels respectively – reveal the size, shape and granularity of the cell. The identity
and abundance of the proteins are measured by the fluorescence signals emitted by
the laser-excited, fluorophore-conjugated antibodies bound to the target proteins in a
cell [5]. I show a schematic diagram of a flow cytometer and how it measures different

4
features of a cell in Figure 1.2. In a flow cytometer, the mixture of fluorescence
signals are roughly separated by several band-pass filters and each signal is collected
into a separate fluorescence (FL) channel. In this context, I often use the terms
“a fluorescence channel” and “a protein marker” interchangeably because we infer
information about the latter through the signal collected at the former.
Current fluorescence-based technology supports the measurements of up to 20
proteins simultaneously in each cell from a sample containing millions of cells [6].
Although emerging atomic mass cytometry systems such as CyTOF [7] can measure
more than 40 markers per cell, fluorescence detection is still the most used tool for
single-cell measurements. FC is employed to study the complexity of the immune
system and the changes in its components upon exposure to various external perturbants such as pathogens, chemical compounds (drugs), or vaccination, as well as
events such as aging, autoimmune reactions, or presence of cancer. FC is now routinely employed to illustrate immune cells development and maturation [8], to study
immune responses in the presence of a pathogen, to diagnose diseases of the immune
system [9], and to develop novel vaccines (e.g., against HIV) [10].

1.3 Flow cytometry data analysis
An FC sample measuring p features (known as parameters in FC) from n cells
is represented by an n × p matrix A. The matrix element A(i, j) represents the
measurements of the j th feature in the ith cell. To this end, a cell is represented
by a p-dimensional feature vector capturing the morphology and protein expression
profile of the cell, which are effectively measured by the light scatter and fluorescence
signals. In a typical experiment, we measure hundreds of samples with each sample
measuring multi-dimensional features for up to millions of cells. I show a schematic
view of a data set generated in a typical FC experiment in Figure 1.3. However, the
actual numbers of features, cells, and samples vary from one experiment to another.

5

f
f
…
f
f 1
f 2 …
f p
f1 1
f2 2 …
fp p
f
f
…
f
a1p
Cell-1
f1 1 a a11f2 2 a a12… ……fp p a1p
Cell-1
… … fp a1p
Cell-1f1 a1111f2 a1212
…
…
…
…
…
…
…
…
…
…
…

…
…
…
…
…
…

a
a
…
a
Cell-1
Cell-2
a1111a a21a1212a a22… ……
a 1p a2p
Cell-1
Cell-2
… …a1p 1p a a2p
Cell-1
Cell-2a11 a2121a12 a2222
a
a
…
a 2p
Cell-2
a 21 a 22 …
a 2p
Cell-2
a21 21 a22 22 …
a2p 2p
Cell-2
a
a
…
a
Cell-n
Cell-n
a n1
a n2
…
a np
an1n1
an2n2
…
anpnp
Cell-n
a
a
…
a
Cell-n
a n1 a n2 …
a np
Cell-n
an1 n1 an2 n2 …
anp np
Cell-n
…
……
…
…
…
…

n cells per sample
(n~100,000)

N

sa

m
p
(N les
~ pe
20 r
0) stu

dy

p features per cell
(p~ 15)

Figure 1.3. A schematic view of flow cytometry samples from a typical
experiment.

Analysis of a collection of FC samples can lead to diagnosis of various diseases,
monitoring of immune responses in the presence of a pathogen, development of novel
vaccines etc. However, before making useful biological conclusions, the raw FC measurements mixed with various sources of noise need to pass through several analysis
steps in a systematic order. These analysis steps are often guided by specific aspects
of FC data and are customized to address the biological needs. I present a list of
attributes arising in a typical multi-parametric FC experiment and relate each attribute to a necessary data analysis step in Table 1.1. This list is not exhaustive and
is subject to change depending on the design of experiment and the type of biological
questions answered by a particular experiment. I briefly discuss several analysis steps
in the next few paragraphs.

1.3.1 Removing unintended cells
In the preprocessing phase, various unintended events such as doublets, dead cells,
debris, etc. are removed from the FC data. Figure 1.4 shows several preprocessing
and quality control steps used in a typical FC data analysis. A “doublet” is a pair of
attached cells, which has larger area but smaller height in the forward scatter (FS)

6
Table 1.1
Different analysis steps of FC data (right column) are originated from FC
data attributes (left column).
FC data attributes
debris, dead cells, doublets
multiple fluorescence channels (2-20)
variance increases with mean
multiple cellular features (4-20)
many observations per sample (104 -105 )
several discrete cell subsets (2-50)

Data analysis steps
preprocessing & quality control
spectral unmixing (compensation)
variance stabilization
multidimensional distribution
down-sampling
clustering

similar cell populations across samples

cluster matching or labeling

many samples per cohort

meta-clustering & templates

multiple classes of samples

classification

channel relative to the single intact cells. Figure 1.4(a) shows how we can separate
single cells (inside the red polygon gate) from the doublets (outside of the red polygon
gate). Cell viability dyes, e.g., amine reactive viability dyes ViViD and Aqua Blue,
are often used to separate dead cells from live cells [11]. Live cells are shown with
a red polygon gate in Fig. 1.4(b) and dead cells outside of the gate are discarded
from further analysis. Furthermore, boundary events can also be removed from the
histogram of total fluorescence as shown in Figure 1.4(c). Cells outside of the read
vertical lines are either too dim or too bright in terms of the total fluorescence emission
and can be removed as outliers. Several other preprocessing steps are occasionally
performed as part of quality control, for example see the discussion in [12].

1.3.2 Spectral unmixing (compensation)
Flow cytometry measures the abundance of protein markers in a cell by the fluorescence intensities of the fluorophore-conjugated antibodies bound to the target

7

50000

100000

150000

50000

0

0
0

50000 100000150000200000250000

FS

Height

remove boundary events

0

1

2

3

4

5

3e−06

200000

Density

150000

Area

100000

250000

FS

Area

200000

FS

250000

(c)

remove dead cells

6e−06

(b)

remove doublets

0e+00

(a)

0e+00

ViViD

4e+05

8e+05

Sum of fluorescence

Figure 1.4. Removing unintended events from an FC sample. (a) Single
intact cells (inside the red polygon gate) are separated from the doublets
(outside of the red polygon gate). (b) A viability marker (ViViD) is used
to remove dead cells (outside of the red polygon gate). (c) Cells emitting
very low or very high fluorescence signals (outside of the read vertical
lines) are removed as potential outlying events.

proteins. Because of the overlap of florescence spectra emitted by different fluorophores, a detector intended for a particular marker also captures partial emissions
from other fluorophores. The correct signal at each detector is then recovered by a
process called the Spectral unmixing or compensation [13, 14].
To see how a simple spectral unmixing method works, consider an FC system
measuring the emission of p fluorophores with p detectors. Then the general form of
the compensation system is given by the following equation:
o = Ms + a,

(1.1)

where,
o = vector of the observed signals at p detectors.
M = p × p spillover matrix. The off-diagonal element M[i, j] denotes the contribution of the j th fluorochrome to the detector of the ith fluorochrome. The
diagonal elements represent the fraction of signal found in the appropriate channel. Each column of the matrix adds to unity.
s = vector of original signal emitted from the p fluorochromes.

8

(a)

(b)

2

2.0

spectral unmixing

1.5
1.0
0.5

CD4−PE

CD4−PE

2.5

1
0

0.0
0

1

2

3

−0.5

CD8−ECD

0.0

0.5

1.0

1.5

CD8−ECD

Figure 1.5. (a) A pair of correlated channels due to the overlap of the
corresponding fluorochrome spectra. (b) The same pair of channels after
signals are unmixed from each other.

a = autofluorescence vector of length p measuring the amount of background
fluorescence.
The goal of the spectral unmixing is to calculate the actual signal vector s. The
simplest and widely used algorithm performing compensation is a straightforward
application of linear algebra that requires the solution of a linear system of equations
involving the spillover matrix M : [14, 15]:
s = M−1 × (o − a)

(1.2)

For example, Fig. 1.5(a) shows a pair of correlated channels due to the overlap of the
corresponding fluorochrome spectra. The correlation is removed after the signals are
unmixed from each other by Eq. 1.2, as illustrated in Fig. 1.5(b). The accuracy of
the reconstructed signal, however, depends on the nature of errors generated by the
fluorescence emission process and photo-electric circuitry of the flow cytometer. The
error model can be approximated by a mixture of Poisson and Gaussian noise [15,16],
a more accurate compensation scheme is discussed by Novo et al. [15].

1.3.3 Data transformation and variance stabilization
After performing initial pre-processing, FC data is often transformed for proper
visualization and subsequent analysis.

Various nonlinear functions are typically

9
used for this purpose, such as logarithm, hyperlog, biexponential, asinh transformations [17–20]. These transformations are aimed primarily to resolve cell populations
uniformly and to allow unimpeded visual interpretation especially by using a series
of 2-D FC scatter plots. However, owing to the nature of photon-counting statistics,
variance of a fluorescence signal monotonically increases with the average signal intensity (average protein expression). This signal-variance dependence creates problem
in uniform feature extraction and comparing cell populations with different levels of
marker expressions. To remove the correlation between signal and variance, variance
stabilization (VS) is performed.
Variance stabilization (VS) [21, 22] is a process that decouples signal from the
variance such that the variance become approximately constant along the complete
range of fluorescence intensities. In FC, VS can be achieved by transforming data
with properly tuned transformation parameters. Several past works followed this
approach of parameter optimization, but mostly with an objective to maximize the
likelihood of individual cell populations being generated by a mixture of multivariatenormal distributions on the transformed scale [23, 24]. To remove the correlation
between signal and variance, I developed a variance stabilization (VS) method called
flowVS that decouples signal from the variance by an inverse hyperbolic sine (asinh)
transformation function whose parameters are estimated by a likelihood-ratio test. I
will discuss variance stabilization for FC samples in more detail in Chapter 2.

1.3.4 Identifying cell populations (gating or clustering)
For a given set of markers, a cell population or cell cluster is a subset of cells in
a sample with similar physical and fluorescence characteristics, and thus biologically
similar to other cells within the subset but distinct from those outside the subset. In
conventional FC practice, trained operators identify cell populations by visualizing
cells in a collection of two-dimensional scatter plots. This is traditionally a manual
process known as “gating” in cytometry. However, with the ability to monitor large

10
numbers of cellular features simultaneously, the visualization-based approach is inadequate to identify high-dimensional populations. To address this problem, a number
of researchers have proposed several customized clustering algorithms to identify cell
populations in FC samples. These algorithms include model-based clustering [25–27],
density based clustering [28, 29], spectral clustering [30] and other non-parametric
approaches [31]. The FlowCAP consortium (http://flowcap.flowsite.org/) designed a
set of challenges with an aim to identify the best clustering algorithms for different
FC datasets and Aghaeepour et. al. [32] provides a state-of-the-art summary of the
field.
Automated population identification is a pivotal step in the FC data analysis.
Given the availability of a large collection of software packages for solving the clustering problem, it is not always trivial to select the best option to analyze a particular
dataset, especially when no “ground truth” or “gold standard” is available. In this
situation various cluster validation methods can be used to evaluate the quality of
different clustering solutions from which the best option can be picked [33, 34]. However, it has been shown that an ensemble clustering computed from a consensus of a
collection of simple clustering solutions often outperforms any individual algorithm
for FC data [32]. Finding an optimal ensemble clustering is an NP-hard problem and
different heuristics are often used to obtain an approximate solution [35]. Considering the importance of the clustering problem, I describe a new consensus clustering
algorithm that maintains a hierarchy of clustering solutions from different algorithms.
This algorithm provides a new perspective of ensemble clustering to the FC community. I will discuss different clustering algorithms and a novel consensus clustering
algorithm in Chapter 3.

1.3.5 Registering cell populations across samples
Phenotypically distinct cell populations often respond differently upon perturbation or change of biological conditions. This changed response results in increased

11
protein expression in each cell, or in changes in the fraction of cells belonging to a
cell type. To identify the population-specific changes, we register cell clusters across
different samples [27,36]. The population registration problem can be solved by computing a similarity measure between each pair of cell clusters across samples and
matching clusters with high similarity. Additionally, when biologically meaningful
labels for clusters are known for a sample, a population matching algorithm can label
clusters from another sample, thus solving the population labeling problem as well.
In conventional FC practice, population registration is often performed by mapping 2-D projections of clusters. However, the visual mapping is inadequate for highdimensional data. Recently two different types of algorithms have been proposed in
order to solve the population registration problem automatically and efficiently. In
the first approach, the centers of different clusters are “meta-clustered” (cluster of
clusters) and the clusters whose centers fall into same meta-cluster are marked with
same label [23]. The second approach computes a biologically meaningful distance
between each pair of clusters across samples and then matches similar clusters by
using a combinatorial matching algorithm [27, 37]. I developed an algorithm of the
second type, called the mixed edge cover (MEC) algorithm [36, 37]. The MEC algorithm uses a robust graph-theoretic framework to match a cluster from a sample to
zero or more clusters in another sample and thus solves the problem of missing or
splitting populations as well. I discuss more about the cluster matching algorithms
in Chapter 4.

1.3.6 Meta-clustering and templates
A flow cytometry dataset often consists of samples belonging to a few representative classes representing multiple experimental conditions, disease or vaccination
status, time points etc. Towards this end, I assume that samples belonging to a
particular class are more similar (given a biologically meaningful similarity measure)
among themselves than samples from other classes. In this scenario it is more effi-

12
cient to summarize a collection of samples with a few representative templates, each
template representing samples from a particular class [23, 27, 36]. Thereby, overall
changes across multiple conditions can be determined by comparing the cleaner and
fewer class templates rather than the large number of noisy samples themselves.
A template is usually constructed by matching similar cell clusters across samples
and combining matched clusters into meta-clusters. Clusters in a meta-cluster represent the same type of cells and thus have overlapping distributions in the marker
space. Therefore, the meta-clusters represent generic cell populations that appear in
most samples with some sample-specific variation. A template is a collection of relatively homogeneous meta-clusters commonly shared across samples of a given class,
thus describing the key immunophenotypes of an overall class of samples in a formal,
yet robust, manner.
In my dissertation, I have developed a hierarchical matching-and-merging
(HM&M) algorithm that builds templates from a collection of samples by repeatedly merging the most similar pair of samples or partial templates obtained by the
algorithm thus far [36]. A meta-cluster within a template represents a homogeneous
collection of cell populations and acts as a blueprint for a particular type of cell.
However, traditional null hypothesis based significance testing (e.g., F-test or paired
t-test) often has a high probability of making a Type I error when used to evaluate
the homogeneity of a meta-cluster because of large cluster sizes. Hence, to evaluate
meta-cluster homogeneity, I propose the ratio of between-cluster to within-cluster
variance (relative cluster separation, φ), in a MANOVA model, as an alternative
method to evaluate the homogeneity of a meta-cluster. I will discuss meta-clustering
and template construction algorithm in detail in Chapter 5.

1.3.7 Classifying FC samples
Besides their use in high-level visualization and cross-class comparisons, templates
can be employed to classify new samples with unknown status. Templates work

13
as prototypes of different biological classes, e.g., disease status, time points etc.,
by emphasizing the common properties of the class while omitting sample-specific
details. A new sample with unknown class label is predicted to come from a class
whose template the sample is most similar to. The template-based classification is
robust and efficient because it compares samples to cleaner and fewer class templates
rather than the large number of noisy samples themselves. While classifying new
samples, the templates can be dynamically updated to incorporate the information
gained from the classification of the new samples. This approach makes it possible
to summarize the data from each laboratory using templates for each class, and
then to merge the templates and template-trees across various laboratories, as the
data is being continuously collected and classified. I will discuss the template-based
classification algorithms in detail in Chapter 6.

1.4 The need for automation in FC data analysis
FC data is large, continuous, high-dimensional, and perturbed by Poisson and
Gaussian noise as we measure various features of individual cells for millions of intact
cells in a sample. Traditionally, after some semi-automated preprocessing, cell populations are identified by visualizing cells as a collection of two-dimensional scatter
plots. The reader will find it helpful to refer the Figure 3.3(b) in Chapter 3 for an
example where four types of immune cells are identified using five cluster of differentiation (CD) proteins. A trained operator then visually compares these biaxial plots
from different samples, registers populations across samples from multiple conditions
(healthy vs. disease for example) and studies the differences across conditions to
extract necessary biological information.
Recent advances in FC technology pose challenges to the traditional manual analysis in three aspects: (1) high-dimensionality of data, (2) large volume of data, and
(3) compute-intensive analysis. First, cell populations defined in higher dimension
are difficult to locate in 2-D projections. Furthermore, biaxial plots assume that the

14
axes are orthogonal to each other; however, often there are correlations between these
protein markers, and these are difficult to analyze using biaxial projections. Second,
it is laborious and often infeasible to manually analyze an FC dataset with hundreds
of samples, each with millions of multi-parametric cells. Third, several analysis steps
require numerical calculations such as optimization of nonlinear functions and solutions of matrix equations. However, a collection of tools designed to perform specific
functions but not to work together does not improve the overall analysis of FC data,
because a significant amount of time is spent in finding appropriate tools for each
step, in identifying optimum parameters for the selected tools and, in processing
data between different steps. Therefore, to prevent the data analysis from being the
bottleneck in scientific discovery based on cytometry, an automated and systematic
cytomics pipeline is necessary.
Even though a rich set of computational tools is available for other fluorescencebased technologies such as the microarrays [38], they can not be directly applied – as a
black box – to analyze FC data because of the technological differences. Microarrays
measure the expression of a large number of genes under different conditions, whereas
FC measures a smaller number of proteins characteristic of a few immunophenotypes,
across a large number of samples. As a result, the objectives of various analysis steps
are often different for these two technologies. For example, between-samples variances across a large number of genes are stabilized in microarray, whereas I stabilize
within-population variances across a collection of samples in FC. Another example
of their difference is in data clustering, where multi-parametric cells are clustered
to identify functional cell populations in FC; in contrast, genes are clustered based
on their expression patterns in microarray. In summary, the nature of the data, its
pre-processing, statistical treatment, and algorithms for downstream analysis are all
substantially different for FC and other fluorescence-based technologies. Therefore,
a customized pipeline adapted to the properties of FC data is necessary, especially
to keep up with the ever increasing dimensionally and large number of samples generated routinely in FC experiments. To address this need, recently there has been

15
an influx of automated tools for analyzing FC data [27, 32, 39, 40]. The algorithms
and software developed in my PhD work are the latest additions to the attempt of
automating FC data analysis.

1.5 Contributions
This dissertation has four major contributions to computational cytometry: (a)
algorithms, (b) software, (c) biological applications, and (d) publications.
Algorithms: This dissertation addresses the need to analyze the large volume of
multi-parametric FC data by developing an algorithmic pipeline called flowMatch [41].
The pipeline contains six algorithmic modules performing six steps of FC data analysis: (1) spectral unmixing to remove the effect of overlapping fluorescence channels,
(2) stabilizing variance to decouple signals from noise, (3) robust clustering of cells
to identify phenotypic populations, (4) registering cell clusters across samples from
multiple conditions, (5) constructing templates by preserving the common expression
patterns across samples, and (6) classifying samples based on the measured phenotypes. In addition to these six steps, the pipeline has several helper functions for
preprocessing and visualizing FC data.
Figure 1.6 displays the schematic view of six functional modules of the flowMatch
pipeline. An FC sample is represented by an n × p matrix, where n is the number of
cells and p is the number of features (physiological properties and expression levels of
markers) measured in each cell. Subfig. 1.6(1) shows the overlap of two spectra (green
and yellow) emitted by two fluorochromes. The yellow band pass filter captures a
significant amount of signal from the green spectrum, which must be compensated
(e.g., by Eq. 1.2) to correctly reconstruct the signal form the yellow fluorochrome.
Subfig. 1.6(2) displays the density plots of a single marker from several samples of
a dataset after stabilizing the variance. Observe that the variances (width) of the
density peaks (both positive and negative peaks across samples) are nicely stabilized.
Subfig. 1.6(3) shows the application of a clustering algorithm to a three dimensional

16
1. Spectral unmixing

An FC sample
cell-1

a1p

…

anp

cell-n

an1

New sample
to classify

TB

Samples: B

3. Population identification

…

fp

…

…

…

…

f1
a11

2. Variance stabilization

meta-clusters

Template (A)

TA

Samples: A

6. Sample classification

Samples: class A

5. Building high-level templates

4. Matching cell populations

Figure 1.6. An FC data analysis pipeline. (1) unmixing of spectra to remove the effect of overlapping fluorescence channels, (2) stabilizing variances by transformation and normalization, (3) identifying cell populations by automated clustering algorithm in a high-dimensional marker
space, (4) registering cell populations across samples with a matching algorithm, (5) representing a class of samples with high-level templates, and
(6) classifying samples by using the templates.

sample, where different colors denote four phenotypically distinct cell populations.
In Subfig. 1.6(4), I show how functionally similar cell clusters are matched by a
population registration algorithm, where same colors are used to mark the matched
clusters. The next Subfig. 1.6(5) illustrates how a template is created by a hierarchical
algorithm from six samples belonging to the same class. Finally, the classification
of a new sample based on its similarity with two class templates is described in
Subfig. 1.6(6).
Software: I have developed algorithms for the last five steps of the pipeline except
the spectral unmixing step. I included spectral unmixing and other related preprocessing tools from related packages to make this pipeline as complete as possible. I
have developed an R package flowMatch [41,42] by implementing the steps discussed
in Fig. 1.6 in both R and C++ programming languages. This package has been made
available through Bioconductor [43] (http://www.bioconductor.org/). I hope that

17
flowMatch will be a useful addition to the available FC data analysis tools and can
contribute to faster analysis of large FC datasets.
Biological applications: The flowMatch pipeline contains several combinatorial
and statistical algorithms used to perform different steps of data analysis. The complete analysis is usually divided into a series of encapsulated sub-problems and each
of them is solved by a module of the pipeline. I demonstrated the application of
different steps of the pipeline with three data sets: healthy donor data, T cell phosphorylation data, and acute myeloid leukemia (AML) data. The healthy donor (HD)
dataset consists of 65 five-dimensional samples from five healthy individuals who donated bloods on different days. I use this dataset to demonstrate that by stabilizing
within-cluster variance we are able to construct homogenous meta-clusters despite the
presence of biological, temporal, and technical variations. The T cell phosphorylation
(TCP) dataset consists of 29 pairs of samples before and after stimulation with an
anti-CD3 antibody [44]. I analyzed the data in order to demonstrate that templates
can be created from multiple conditions and the meta-clusters can be matched across
experimental conditions (before and after stimulation) to assess the overall changes in
phosphorylation experiment. The acute myeloid leukemia (AML) dataset consists of
samples from 43 AML patients and 217 healthy individuals. I used flowMatch pipeline
to build healthy and AML templates, to identify AML markers, and to classify AML
samples by comparing test samples against the two templates [45]. I describe the
datasets in Section1.6 in more detail. In the past, I have also tested different components of flowMatch to solve problems in evaluating HIV vaccination success, and
detecting correlations among multiple sclerosis (MS) treatments.
Publications: The algorithms with their biological applications developed in this
dissertation have been published to several peer-reviewed journals [32, 36] (Nature
Methods, BMC Bioinformatics) and conferences [37, 46] (e.g., WABI, ACM BCB,
GLBIO, SIAM LS, Cyto, etc.). Several papers are submitted for publication [41, 45].
The flowMatch pipeline was one of the top performers to solve several challenges
designed by the FlowCAP consortium at National Institute of Healthy (NIH). I have

18
developed several multithreaded algorithms for computing the maximum cardinality
matching in large graphs, which are published in several conference proceedings (SC,
IPDPS, IPDPSW) [47–49]. Aside from this dissertation, I have also developed a
robust variant of residual resampling technique for computing the uncertainty in
evolutionary trees and illustrated its use with an analysis of genome-scale alignments
of yeast [50, 51].
Difference from related work: flowMatch is similar to the GenePattern Flow Cytometry Suite in terms of the coverage of distinct algorithms for different analysis
steps. However, these two pipelines are significantly different from each other on how
each step of the pipeline is performed. For example, GenePattern normalizes FC samples by aligning density peaks on each channel as described by Hahne et al. [52]. In
contrast, flowMatch stabilizes variances of the density peaks on each channel without
shifting the signals. Likewise, other steps of the flowMatch pipeline are significantly
different from the corresponding steps in the GenePattern Flow Cytometry Suite.
The primary difference between flowMatch and other FC data analysis tools (discussed in Section 1.7) is that I consider a collection of FC sample related to each other
and analyze them collectively. For example, I characterize a group of similar samples
with representative templates and use templates in between-class comparison, classification, and other overall biological conclusions. In contrast, most of the existing
tools analyze samples individually and only make sample-specific conclusions. Finally,
flowMatch is not an exhaustive pipeline and I plan to include other functionalities
into the pipeline in future.

1.6 Datasets used in this thesis
1.6.1 Healthy donor (HD) dataset
The healthy donor (HD) dataset represents a “biological simulation” where peripheral blood mononuclear cells (PBMC) were collected from five healthy individuals
on up to four different days. Each sample was divided into five parts and analyzed

19
through a flow cytometer at Purdue’s Bindley Biosciences Center. Thus, we have five
technical replicates for each sample from a subject, and each replicate was stained
using labeled antibodies against CD45, CD3, CD4, CD8, and CD19 protein markers.
I show a summary of the HD dataset in Fig. 1.7.
Channel Name

Function

FS

Forward Scatter

Subjects

Number of
days blood
collected

Total samples
per subject

Subject A

3

15

Subject B

1

5

Subject C

4

20

Subject D

3

15

CD4

Helper T cell marker

Subject E

2

10

CD8

Cytotoxic T cell marker

Total
samples

SS
CD45

65

Side Scatter
Leukocyte marker

CD3

T lymphocyte marker

CD19

B lymphocyte marker

Figure 1.7. Description of the healthy donor (HD) dataset. The distribution of samples across subject is shown in the left and the functions of
scatter and fluorescence channels are described in the right.
The HD dataset includes three sources of variations: (1) technical or instrumental
variation among replicates of the same sample, (2) within-subject temporal (day-today) variation, and (3) between-subject natural or biological variation. The dataset
contains 13 replicated groups, with each group containing five copies of the same
sample. Hence, the variation among five replicates within each replicated group originates from the technical variation in sample preparation, instrument calibration and
sample measurement in the flow cytometer. The within-subject temporal variation
reflects the environmental impact on the immune system on different days when the
blood was drawn from a subject. Finally, samples from different subjects have natural
between-subject variations. Different sources of variations present in the HD dataset
mate it an ideal case to demonstrate the functionality of the flowMatch pipeline.

1.6.2 T cell phosphorylation (TCP) dataset
I reanalyze a T cell phosphorylation (TCP) data set from Maier et al. [44] to determine differences in phosphorylation events downstream of T cell receptor activation

20
in naive and memory T cells. For each of the 29 subjects in this study, whole blood
was stained using labeled antibodies against CD4, CD45RA, SLP-76 (pY128), and
ZAP-70 (pY292) protein markers before stimulation with an anti-CD3 antibody, and
another aliquot underwent the same staining procedure five minutes after stimulation.
The first two markers (CD4, CD45RA) are expressed on the surface of different T
cell subsets and the last two (SLP-76 and ZAP-70) are highly expressed after T cells
are phosphorylated [44].
During the stimulation anti-CD3 antibody binds with T cell receptors (TCR) and
activates the T cells, initiating the adaptive immune response. The binding with
TCR induces dramatic changes in gene expression and cell morphology, and induces
the formation of a phosphorylation-dependent signaling network via multi-protein
complexes. ZAP-70 is a kinase that phosphorylates tyrosine in a trans-membrane
protein called LAT, and LAT and SLP-76 are part of a platform that assembles
the signaling proteins [53]. I reanalyzed this dataset in order to demonstrate that
computationally meta-clusters are preserved across experimental conditions (before
and after stimulation) when the homogeneity of meta-clusters is preserved.
The AML dataset is discussed in Chapter 7.

1.7 Related work
Recent advances in FC technology have led to an influx of automated tools to
analyze FC data [27, 32, 39, 40]. However, many of the automated tools solve a small
subset of the problems arising in FC data analysis. For example, spectral unmixing (compensation) is discussed in [13–15] and various data transformation methods
are discussed in [17–20, 23, 24]. Automated gating or clustering is arguably the most
discussed problem in FC data analysis [26, 27, 31, 32] and Aghaeepour et al. [32] provides a state-of-the-art summary of the field. Cluster matching and meta-clustering
have been studied only recently by [23, 27], but have received relatively less attention from the researchers. Other general-purpose and problem-specific methods are

21
also discussed in the literature [54–58]. A number of the aforementioned tools are
implemented as free, open-source R packages such as flowCore [59], flowViz [60], flowClust [61], flowTrans [23], flowStats [62], flowType [54] and other packages available
through Bioconductor [43].
Recently Spidlen et al. introduced a web-based FC data analysis pipeline called
“GenePattern Flow Cytometry Suite” (http://www.genepattern.org) that includes 34
open-source modules performing preprocessing, normalization, gating, cluster matching and other post-processing steps [39]. flowMatch is similar to the GenePattern
Flow Cytometry Suite in terms of the problem it solves, but significantly different on
how each step is performed. For example, GenePattern normalizes FC samples by
aligning density peaks on each channel as described by Hahne et al. [52]. In contrast,
I stabilize variances of the density peaks on each channel without shifting the signals.
Likewise, other steps of the flowMatch pipeline are significantly different from the
corresponding steps in the GenePattern Flow Cytometry Suite.
To the best of my knowledge, there is no other software tool that would provide a comprehensive pipeline for FC data analysis. However, a few software tools,
most of them commercial, integrate one or two steps of the complete analysis
pipeline. For example, the Immunology Database and Analysis Portal (ImmPort,
https://immport.niaid.nih.gov) integrates the FLOCK software that performs normalization and density based clustering [63]. Cytobank [40] is a web-based application focusing mainly on the organization and storage of cytometry data. Finally, most
of the major commercial third party software vendors, including Tree Star, De Novo
Software, and Verity Software House, offer computational tools for certain steps of the
FC data analysis. However, all these tools solve only a few steps of the overall computational analysis with limited support for the other steps. I hope that flowMatch
will be a useful addition to the available FC data analysis tools and can contribute
to faster analysis of FC datasets.

22
1.8 Outline of the thesis
This thesis describes various computational aspects of analyzing flow cytometry
data. I have developed a systematic pipeline, flowMatch containing five functionally
distinct modules for analyzing large volume of multi-parametric FC data. These five
algorithmic modules are discussed in five chapters of this thesis. In Chapter 2, I
describe flowVS, a method for stabilizing variance in FC data by transforming each
channel with nonlinear functions. Chapter 3 discusses several basic and two consensus clustering algorithms and explains how multiple cluster validation indices can
simultaneously be optimized to select the “best” clustering algorithm and algorithmic parameters. Chapter 4 discusses a robust mixed edge cover (MEC) algorithm
for registering (labeling) cell clusters across samples. The next Chapter 5 discusses a
hierarchical matching-and-merging (HM&M) algorithm that summarizes a collection
of similar samples with templates consisting of several homogeneous meta-clusters.
I discuss how the templates are used to classify new samples in a dynamic fashion
in Chapter 6. Chapter 7 discusses algorithms for classifying and immunophenotyping the acute myeloid leukemia (AML). Concluding remarks and future directions of
research are presented in Chapter 8.

23

2 VARIANCE STABILIZATION IN FLOW CYTOMETRY
2.1 Introduction
In this chapter, I discuss flowVS – a novel method for stabilizing within-population
variances across flow cytometry (FC) samples. flowVS stabilizes variance by transforming FC samples with the inverse hyperbolic sine (asinh) function whose parameters are optimized to homogenize the within-population variances. Variance stabilization (VS) is a data-transformation process for dissociating data variability from the
mean values. In flow cytometry, the purpose of VS is to decouple biological signals
(usually measured by average marker expressions of cell populations) from different
sources of variations and noise so that only biologically significant effects are detected.
Variance inhomogeneity is an inherent problem in fluorescence-based FC measurements and is a bottleneck for automated multi-sample comparisons. The origin
of the problem is the fluorescence signal formation and the detection process that
monotonically increases the variance of the fluorescence signal with the average signal intensity [15, 16]. Due to such signal-variance dependence, a cell population (a
cluster of cells with similar marker expressions) with higher level of protein expressions
(i.e., higher fluorescence emission) has higher variance than another population with
relatively low level of protein expressions (i.e., low fluorescence emission). This inhomogeneity of within-population variance creates problems with extracting features
uniformly and comparing cell populations with different levels of marker expressions.
Furthermore, detecting statistically significant changes among populations, such as in
an analysis of variance (ANOVA) model, explicitly requires that variance be approximately stabilized in populations. By removing mean-variance dependence from FC
data, VS makes it possible to detect biologically and statistically meaningful changes
across populations from different samples.

24
VS is an explicit preprocessing step for other fluorescence-based technologies such
as the microarrays [22, 64–66]. However, unlike microarray data, explicit VS is often not performed in FC data analysis. Traditionally, FC data is transformed with
nonlinear functions to project cell populations with normally distributed clusters – a
choice that usually simplifies subsequent visual analysis [17–20, 23, 26]. Recently Finak et al. used the maximum likelihood approach [23] with different transformations
to explicitly satisfy normality of the cell populations. Ray et al. [24] transformed
each channel with the asinh function whose parameters are optimally selected by the
Jarque-Bera test of normality (a goodness-of-fit test of whether sample data have the
skewness and kurtosis matching a normal distribution). While these transformations
approximately normalize FC data, they might not stabilize the variance.
The VS problem in FC, however, cannot be solved directly by applying the mature
VS techniques from the microarray literature. In microarrays, each gene is measured
multiple times (possibly under multiple conditions) and the between-sample variance
for each gene is stabilized with respect to the average expression of the gene across
samples. In contrast, variance is defined by within-population, cell-to-cell variation
in FC and this within-population variance is stabilized with respect to the average
expression of markers within each population. These contrasting objectives prevent
us from applying VS methods from microarray literature directly to flow cytometry.
I address the need for explicit VS in FC with a maximum likelihood (ML) based
method, flowVS, which is built on top of a commonly used asinh transformation.
The choice of asinh function is motivated by its success as a variance stabilizer for
microarray data [22,66]. flowVS stabilizes the within-population variances separately
for each marker (fluorescence channel) z across a collection of N samples. After
transforming z by asinh(z/c) (c is a normalization cofactor), flowVS identifies onedimensional clusters (density peaks) in the transformed channel. Assume that a
total of m 1-D clusters are identified from N samples with the ith cluster having
variance σi2 . Then the asinh(z/c) transformation works as a variance stabilizer if
2
the variances of the 1-D clusters are approximately equal, i.e., σ12 ∼ σ22 ∼ ... ∼ σm
.

25
To evaluate the homogeneity of variance (also known as homoskedasticity), I use
Bartlett’s likelihood-ratio test [67]. From a sequence of cofactors used with the asinh
function, flowVS selects one with the “best” VS quality computed by Bartlett’s test.
flowVS is therefore an explicit VS method that stabilizes within-cluster variances in
each marker/channel by evaluating the homoskedasticity of clusters with a Likelihoodratio test.
I show, with a five-dimensional healthy dataset, that flowVS removes the meanvariance dependence from raw FC data and makes the within-population variance
relatively homogeneous. Such variance homogeneity is especially useful to build metaclusters from a collection of phenotypically similar cell populations across samples.
Previous studies (Hahne et al. [52], for example) shifted the distribution of each
fluorescence channel to ensure homogeneity in meta-clusters, but such artificial shifting may hide useful biological signals. By contrast, flowVS builds homogeneous
meta-clusters from variance-stabilized clusters without losing the biological differences among samples. I will discuss the impact VS on comparisons among samples
(with related concepts of meta-clusters and templates) in Chapter 5.
The rest of the chapter is organized as follows. I start with a short Section 2.2 on
related work and the current transformation techniques employed in FC. In Section
2.3 I describe flowVS, a method for stabilizing variance of FC data. The next Section
2.4 describes applications of this VS technique to an FC dataset and a microarray
dataset. I conclude this Chapter in Section 2.5 by discussing limitations of flowVS
and possible future work.

2.2 Related work
From the beginning of the twentieth century, VS has been widely studied for its
central role in making heteroskedastic data easily tractable by standard methods.
Heteroskedasticity appears in various datasets mostly because the data follows a
distribution with correlated mean and variance, e.g., the Poisson distribution. For

26
well-known distribution families, VS is usually performed by transforming data with
p
an analytically chosen function f . For example, f (z) = z + 3/8 works as a good
(asymptotic) stabilizer for a random variable z following the Poisson distribution
[68]. Variance stabilizers for several well-known distribution families are described
in [68, 69]. For unknown distributions, heuristic and data-driven stabilizers are often
used, e.g., see [21, 70, 71].
However, traditional transformations are often inadequate for low-count (photon
limited) signals [22,72] because of unknown error patterns in fluorescence data. Hence
various ad hoc variance stabilization schemes have been developed for different types
of fluorescence data. In microarrays, the VS problem has been addressed by various non-linear transformations [22, 64–66]. Most notably, the widely used approach
by Huber et al. [22] uses the inverse hyperbolic sine (asinh) transformation whose
parameters are selected by a maximum-likelihood (ML) estimation.
For flow cytometry data, researchers have used various non-linear transformations,
such as the logarithm, hyperlog, generalized Box-Cox, and biexponential (e.g., logicle
and generalized arcsinh) functions [17–20, 23, 26]. In the past work, the parameters
of these transformations were adjusted in a data-driven manner to maximize the
likelihood (flowTrans by Finak et al. [23]), to satisfy the normality (flowScape by Ray
et al. [24]), and to comply with simulations (FCSTrans by Qian et al. [73]). flowTrans
estimates transformation parameters for each sample by maximizing the likelihood of
data being generated by a multivariate-normal distributions on the transformed scale.
flowScape optimizes the normalization factor of asinh transformation by the JarqueBera test of normality. FCSTrans selects the parameters of the linear, logarithm,
and logicle transformations with an extensive set of simulations. In contrast to these
approaches that transform a single sample, flowVS transforms a collection of samples
together for stabilizing within-population variations. Note that normalizing data may
p
not necessarily stabilize its variance, e.g., for a Poisson variable z, z + 3/8 is an
approximate variance-stabilizer, whereas z 2/3 is a normalizer [21].

27
2.3 Variance stabilization for flow cytometry data
2.3.1 The goal of variance stabilization
The aim of variance stabilization (VS) in FC is to make within-population variances of different cell populations approximately equal and thereby independent of
the average protein expressed by populations. Recall that the expression of a protein
is measured by the intensity of a channel capturing the fluorescence of a particular
wavelength. VS therefore stabilizes the within-population fluorescence variance and
makes it independent of the mean fluorescence intensities (MFI) of the cell populations. In this context, I use the terms “a fluorescence channel” and “a protein marker”
equivalently because we infer information about the latter through the signal collected
at the former. However, I will use “fluorescence channel” more frequently because the
nature of fluorescence emissions – not the protein expressions – dominates the meanvariance relationship in FC data. I do not stabilize variance on the scatter channels
because, as pointed out by Finak et al. [23], there are few benefits to transforming
forward and side scatter channels.

2.3.2 Channel-specific variance stabilization
I assume that compensated fluorescence channels are independent and stabilize
variance on each channel (a column of the data matrix) separately. Besides being simple, one-dimensional VS prevents unnecessary correlation among transformed
channels incurred by multi-dimensional VS. Note that the correlations among fluorescence channels due to spectral overlap are compensated before we stabilize variance.
Even though the protein expressions can still be correlated [18], I do not include such
correlations in the VS process because the nature of such problem-specific correlation
is difficult to model.
Since the actual error model of FC data is unknown, it is not trivial to select
a function to transform this data. Even though researchers have studied a number

28
of normalization functions, they are often selected arbitrarily [23, 24]. Considering
the similarity in fluorescence-based data collections between FC and microarrays, I
decided to use an inverse hyperbolic sine (asinh) function that has been shown to
successfully stabilize variance in fluorescence readouts from microarray data [22, 66].
This choice of asinh function is also motivated by its success in FC data visualization
and normalization [23, 24]. Stabilizing variance with other transformations can be
performed using the same flowVS framework but is not discussed here.
To transform a fluorescence channel z, I use the asinh transformation with a single
parameter c:
asinh(z/c) = ln(z/c +

p
(z/c)2 + 1).

(2.1)

In this transformation, c is called the normalization cofactor whose value is optimally
selected to stabilize variance in channel z. Let σij2 be the variance of the ith cluster
defined in channel/marker z in the j th sample. My objective is to select a cofactor
for the asinh transformation such that after transforming channel z in each sample,
variance σij2 of every cluster becomes approximately homogeneous.
In a more general form, asinh transformation is expressed with three parameters, a ∗ asinh(b + z/c), where in addition to the cofactor c, a denotes a scaling after
transformation, and b denotes a translation before transformation. I set a = 1 since
other values do not affect downstream analysis, and b = 0 to avoid shifting of cell
populations. Hence I am left with a single parameter, c, that I aim to set in order to
stabilize the variance. Note that other transformations such as logarithmic, hyperlog [17], logicle [18], Box-Cox [26] etc., may also stabilize the variance but a detailed
analysis covering all these transformations is out of the scope of this study.

2.3.3 flowVS : an algorithm for per-channel variance stabilization
Given a collection of N FC samples, the flowVS algorithm stabilizes the variance
in a fluorescence channel z with the following steps.

29
1. Selecting a sequence of cofactors: I select an evenly spaced increasing sequence
of cofactors c1 , c2 , ..., cl to be used with the asinh transformation. The start and
end values (c1 and cl ) are empirically selected so that the sequence includes a
variance stabilizing cofactor.
2. Transforming data and evaluating homoskedasticity for each cofactor: For each
cofactor cq ∈ {c1 , c2 , ..., cl }, the following steps are performed.
(a) Transforming channel/marker z in each sample: Let zj be a vector denoting the selected channel in the j th sample where 1 ≤ j ≤ N . The
algorithm transforms zj by the asinh function: zj0 = asinh(zj /cq ), where zj0
is the same channel after the transformation.
(b) Detecting 1-D density peaks (1-D clusters): I estimate the density of each
transformed fluorescence vector zj0 by a kernel density estimation method.
The peaks in the density of zj0 are identified as regions of high local density and significant curvature (also called landmarks in [52]). To identify
the 1-D density peaks, flowVS uses the curv1Filter function from the
flowCore package [59] in R. Here a density peak represents a 1-D cluster
of cells and therefore can also be identified by a clustering algorithm [54].
Let Pj be the collection of density peaks identified from zj0 .
(c) Collecting density peaks from all sample: Density peaks from all samples
are collected into a set P such that P = ∪1≤j≤N Pj . Let P contain a total
of m density peaks where the ith peak contains ni cells with mean µi and
variance σi2 .
(d) Testing homoskedasticity: The performance of the asinh transformation
with cofactor cq is evaluated by a test of variance homogeneity (homoskedasticity). For this purpose, I use Bartlett’s test [67], a well-known
P
likelihood-ratio test for homoskedasticity. Assuming n =
1≤i≤m ni to
be the total number of cells in P and σp2 to be the pooled variance of m
density peaks, I compute Bartlett’s statistics as follows:

30

P
2
(n − m) ln(σp2 ) − m
i=1 (ni − 1) ln(σi )


B(cq ) =
.
Pm 1
1
1
1 + 3(m−1)
−
i=1 ni −1
n−m

(2.2)

Bartlett’s statistics B(cq ) computes the degree of homogeneity across all
1-D clusters in channel z after it is transformed by asinh(zj /cq ).
3. Finding a cofactor for optimum VS: The optimum variance stabilization is
achieved by a transformation giving minimum value of Bartlett’s statistics.
Therefore, the asinh transformation with the cofactor
l

cq∗ = argmin B(cq ),
q=1

(2.3)

gives the optimum VS for the channel/marker z. Channel zj in each sample is
then transformed by asinh(zj /cq∗ ) and used in subsequent analysis.

2.4 Results
I demonstrate how the flowVS algorithm stabilizes variance with the HD dataset
described in Section 1.6.1. Recall that the HD dataset consists of 65 samples from five
healthy individuals who donated blood samples on different days. Each sample was
divided into five replicates and each replicate was stained using labeled antibodies
against CD45, CD3, CD4, CD8, and CD19 protein markers. Before variance stabilization each sample is preprocessed, compensated for spectral overlap, and gated on
FS/SS channels to identify lymphocytes. Since lymphocytes always express CD45
protein (CD45 is a common leukocyte marker), I omit this marker from the rest of
the discussion.

2.4.1 Selecting the optimum cofactors for the asinh transformation
For each sample of the HD dataset, the flowVS algorithm identifies density peaks
in CD3, CD4, CD8, and CD19 markers/channels by following step 2(b) in Section 2.3.3. In each of these four channels, the algorithm identifies two density peaks

31
Markers:

CD19

CD3

CD4

Variance

(a) No Transformation

CD8
(b) Cofactor = 1

2.0e+09

4

1.5e+09

3

1.0e+09

2

5.0e+08

1

0.0e+00

0
0e+00

5e+04

1e+05

−5

(c) Cofactor = 10,000

0

5

10

(d) Cofactor = optimal
0.25

0.15

0.20
0.10

0.15
0.10

0.05

0.05
0.00

0.00
0

1

2

3

0

1

2

3

Mean Fluorescence Intensity (MFI)

Figure 2.1. Mean Fluorescence Intensity (MFI) of each 1-D cluster is plotted against the variance of the cluster for different choice of cofactors used
with the asinh transformation. Clusters in each marker are shown with
the same symbol and color. (a) no transformation: variance increases
monotonically with the mean, (b) small cofactor: VS is not achieved, (c)
reasonable value of cofactor (same for all channels): mean-variance dependence remains except for CD4 channel/marker, and (d) optimal values of
cofactors: variance is approximately stabilized for each marker/channel.

representing high-expressing (“positive”) and low-expressing (“negative”) cell populations (e.g., CD3− , CD3+ clusters in the CD3 marker/channel). Therefore, from the
65 samples in the HD dataset, I obtain 130 (65 × 2) 1-D clusters for each marker,
giving a total of 520 (65 × 2 × 4) 1-D clusters in CD3, CD4, CD8, and CD19 channels.
For each of these 520 clusters, I compute the within-cluster variance and average marker expression (Mean Fluorescence Intensity, MFI). Figure 2.1 plots the
mean-variance relationship for every cluster (density peak) before transforming the
channels and after they are transformed by asinh function with different cofactors.
In this figure, clusters identified in channels transformed with different cofactors are
shown in different panels and in each panel, clusters in a marker are shown with
the same symbol and color. Subfig. 2.1(a) reveals the non-linear correlation between

Bartlett's test statistics

32
CD3

CD4
1.0e+06
8.0e+05

4e+05

CD19

4e+05

4e+05

3e+05

3e+05

2e+05

2e+05

6.0e+05

2e+05
0e+00

CD8

5e+05

1.2e+06

6e+05

4.0e+05
5

10

15

20

2.0e+05

5

10

15

20

1e+05

1e+05
5

10

15

20

5

10

15

20

Cofactor in asinh transformation ( x 1000)

Figure 2.2. Finding the optimum values of the cofactors in asinh transformation for each fluorescence channel in the HD dataset.

cluster variance and mean, which is typically observed in raw FC data before applying any transformation. The mean-variance dependence is not alleviated after
transforming the data by asinh function with arbitrary cofactors as can be seen in
Subfig. 2.1(b,c). Finally, Subfig. 2.1(d) shows that the variances of the 1-D clusters
become approximately stabilized and independent of the means after the optimum
variance stabilization is performed. On CD3 marker, for example, CD3− , CD3+ clusters (shown by green triangles in Subfig. 2.1(d)) have approximately stable variances
and no visible correlation exists between the variances and the cluster means.
The optimum cofactor for the asinh transformation is selected by minimizing
Bartlett’s statistics separately for each of the four markers. Figure 2.2 shows Bartlett’s
statistics computed in each channel after it has been transformed by asinh function
with a sequence of cofactors. A minimum is observed for every channel and the
cofactor is set to the value of the minimizer of Bartlett’s statistics. The variance
stabilizing cofactors for different markers are: (a) 5,000 for CD8, (b) 6,000 for CD19,
(c) 7,000 for CD3, and (d) 10,000 for CD4. Therefore, the channels of the HD
dataset are transformed by asinh function with the optimum cofactors. As shown
in Subfig. 2.1(d), the optimum transformations approximately stabilize variances in
different channels.
I plot the density of the variance stabilized channels in Fig. 2.3, where different
colors are used to denote the samples from five different subjects. In Fig. 2.3, both
positive and negative density peaks (clusters with high or low marker expression)

33

Figure 2.3. Density plot of the variance stabilized channels across all
samples in the HD dataset. Different colors used for samples from different
subjects.

spread approximately equally across all samples, confirming the homogeneity of variances in one dimensional clusters. For this dataset, the density curves from the same
subjects are tightly grouped together as expected. However, clusters across subjects
may not be well aligned due to the between-subject variations. Aligning density
peaks across samples – as was done by Hahne et al. [52] – is not an objective of the
VS algorithm, because such shifting of density may potentially eclipse true biological
signals across samples.

2.4.2 Normality of the variance-stabilized clusters
In addition to stabilizing the variances, the transformed channels approximately
follow the normal distribution. To see this, I draw the Quantile-Quantile plots (QQ plots) [74] for eight 1-D clusters obtained from a representative sample in the
HD dataset in Figure 2.4. In each Q-Q plot, the distribution of a 1-D cluster is
compared with the standard normal distribution by plotting their quantiles against
each other. If a cluster is normally distributed (i.e., linearly related to the standard
normal distribution), the points in the Q-Q plot approximately lie on a straight line.
All eight Q-Q plots in Fig. 2.4 show linearity in their central parts, except small
deviations at the ends, indicating that the 1-D clusters approximately follow normal
distributions with heavier tails. As I will discuss in Section 5.3, the normality of

34

Figure 2.4. The Q-Q plots for the eight 1-D clusters obtained from a
representative sample in the HD dataset. Every Q-Q plot shows linearity
in the central part, except for a little deviation at the end, indicating that
the clusters approximately follow a normal distributions with heavier tails.

clusters is a desired condition for the analysis of variance (ANOVA) model used to
evaluate the homogeneity of a collection of similar clusters, also known as a metacluster.

2.4.3 Application to microarray data
The VS approach based on optimizing Bartlett’s statistics can also be used to
stabilize variance in microarray data. However, the initial steps of flowVS need to
be adapted for microarrays. Assume that the expressions of m genes are measured
from N samples in a microarray experiment. After transforming the data by the
asinh function, the mean µi and variance σi2 of the ith gene gi are computed from
the expressions of gi in all samples. flowVS then stabilizes the variances of the genes
by transforming data using the asinh function with an optimum choice of cofactor.
Unlike FC, a single cofactor is selected for all genes in the microarray data.
I have applied the modified flowVS to the publicly available Kidney microarray
data provided by Huber et al. [22]. The Kidney data reports the expression of 8704

0.10
0.04

0.06

0.08

No Transformation
VS by flowVS
VS by VSN
VS by DDHFm

0.00

0.02

Standard deviation

9000
8000
7000

Bartlett's Statistics

11000

35

0

5

10

15

20

0.0

0.2

0.4

0.6

0.8

Cofactor of asinh transformation (log scale)

Mean expression by a gene

(a) Selecting optimum cofactor for flowVS

(b) VS by different methods

1.0

Figure 2.5. (a) For Kidney microarray data [22], flowVS selects the optimum cofactor for the asinh transformation by minimizing Bartlett’s statistics. The cofactors are shown in the natural logarithm scale. (b) The
standard deviation and mean of each gene from the Kidney data are plotted before transformation and after variance stabilization by flowVS, VSN,
and DDHFm. Loess regression is used to smoothen the curves.

genes from two neighboring parts of a kidney tumor by using cDNA microarray technology. For different values of the cofactor, flowVS transforms the Kidney data with
the asinh function and identifies the optimum cofactor by minimizing Bartlett’s statistics. Subfig. 2.5(a) shows that a minimum value of Bartlett’s statistics is obtained
when the cofactor is set to exp(6) (∼ 400). The optimum cofactor is then used with
the asinh function to transform the Kidney data.
I compare the VS performance of flowVS with two software packages, VSN by
Huber et al. [22] and DDHFm by Motakis et al. [75]. Similar to flowVS, VSN uses
asinh transformation whose parameters are optimized my maximizing a likelihood
function [22]. DDHFm applies a data-driven Haar-Fisz transformation (HFT) [75, 76]
to stabilize the variance. Both VSN and DDHFm are developed for stabilizing variance
in microarray data and can not be applied to flow cytometry data.
Before transforming the Kidney data and after transforming it by flowVS, VSN,
and DDHFm, I plot the mean and standard deviation of every gene in Subfig. 2.5(b).

36

Figure 2.6. Variance stabilization of the Kidney microarray data [22] by
(a) flowVS and (b) VSN [22]. Each black dot plots the standard deviation
of a gene against the rank of its mean. The red lines depict the running
median estimator. If there is no mean-variance dependence, then the red
lines should be approximately horizontal.

In this figure, I have applied a loess regression to obtain smooth average curves. We
observe in Subfig. 2.5(b) that the standard deviation of the untransformed Kidney
data increases monotonically with the mean. Both VSN and flowVS approaches
stabilize the variance approximately for all genes in this data. However, the HaarFisz transformation achieves good VS properties only for genes with higher levels of
expressions.
To take a closer look at the transformed data by flowVS and VSN, I plot the
variances of the genes against the ranks of the means with two subfigures in Fig. 2.6.
These figures are generated by meanSdPlot function from the VSN package. Here,
the ranks of the means distribute the data evenly along the x-axis and thus make it
easy to visualize the homogeneity of variances. Both VSN and flowVS remove the
mean-variance dependence since the red lines are approximately horizontal in both
Subfig. 2.6(a) and Subfig. 2.6(b). Therefore, flowVS performs equally well compared
to the state-of-the-art approach developed for the microarray data.

37
2.5 Conclusions
I describe a variance stabilization framework, flowVS, that removes the meanvariance correlations observed in cell populations from flow cytometry samples. This
framework transforms each marker/channel by the asinh function whose normalization cofactor is optimally selected by Bartlett’s likelihood-ratio test. I show, with
a five-dimensional healthy dataset consisting of 65 FC samples, that flowVS removes the non-linear mean-variance dependence from raw FC data and makes the
within-population variances relatively homogeneous across all populations. flowVS
also performs comparably to the state-of-art variance stabilization approaches for the
microarray data.
Variance homogeneity (homoskedasticity) is a desirable property for comparing
populations across conditions, building meta-clusters from phenotypically similar populations, and analyzing meta-clusters in an ANOVA model. However, unlike the
earlier approach by Hahne et al. [52], flowVS does not artificially shift populations
to align them in the marker space. By stabilizing the variances, flowVS homogenizes similar cell populations and establishes the foundation of biologically meaningful
meta-clusters and templates as will be discussed in Chapter 5.
The VS framework presented here has several limitations. First, flowVS stabilizes
variance separately in each marker/channel. This approach is inadequate to stabilize
covariances across multiple channels, which is necessary when channels are correlated.
Second, flowVS repeatedly identifies 1-D cell clusters (density peaks) and evaluates
the homogeneity of clusters by the likelihood-ratio test. Therefore, this framework
does not perform well when cell clusters are not easily identifiable. Third, flowVS
stabilizes variance more accurately when more samples are simultaneously passed to
the framework. Hence, the approach is not suitable for normalizing a single sample or
stabilizing variances of sequentially arriving samples. Note that we stabilize betweensample variances in microarray data; therefore, VS can not performed on a single
microarray sample. Finally, Bartlett’s test used in flowVS assumes that the deviation

38
from normality is relatively modest. If data deviates significantly from normality,
other likelihood ratio tests can be employed, such as Levenes test [77] or the BrownForsythe test [78]. However, I tested flowVS with several FC datasets and in every
case Bartlett’s test outperforms the Levenes and Brown-Forsythe tests in selecting
variance stabilizing trnasformations.
flowVS operates as an independent module in the FC data analysis pipeline. It
does not depend on the preprocessing algorithms applied before VS nor on the postanalysis methods such as matching, meta-clustering, and classification algorithms.
Hence, flowVS is capable of working with other downstream algorithms developed
by other researchers, such as FLAME by Pyne et al. [27] and flowTrans by Finak et
al. [23].

39

3 POPULATION IDENTIFICATION BY CLUSTERING ALGORITHMS
3.1 Introduction
In this chapter, I discuss clustering algorithms for identifying phenotypically distinct cell clusters in a flow cytometry (FC) sample. These algorithms partition a
multidimensional sample into several phenotypic clusters such that cells within a
cluster are biologically similar to each other but distinct from those outside the cluster. A phenotypic cell cluster usually represents a particular sub-type of cells with
specific biological function and often called a cell population in flow cytometry. Analyzing cellular functions at the level of populations instead of individual cells conveys
more robust biological information because of the natural variations within cells of
the same type. Therefore, identifying cell populations from the mixture of different
cell-types turns into an important step in any FC data analysis pipeline.
Traditionally, cell populations are identified by a manual process known as “gating”, where cell clusters are recognized in a collection of two-dimensional scatter
plots (see Fig. 3.3(b) for an example). However, with the ability to monitor a large
number of protein markers simultaneously and to process a large number of samples with a robotic arm, manual gating is not feasible for high-dimensional or highthroughput FC data. To address the gating problem, researchers have proposed
several automated clustering algorithms, such as CDP [25], FLAME [27], FLOCK [28],
flowClust/Merge [26, 79], flowMeans [31], MM [80], curvHDR [81], SamSPECTRAL [30],
SWIFT [82], RadialSVM [83], etc. For a summary of these algorithms, see Table 1
of [32]. Aghaeepour et al. [32] provides a state-of-the-art summary of the field.
Different algorithms perform better for different FC datasets as was
observed in a set of challenges organized by the FlowCAP consortium
(http://flowcap.flowsite.org/) [32]. Given the large number of algorithmic op-

40
tions, it is often difficult to select the best algorithm for a particular dataset. When
the “ground truth” or “gold standard” about the clustering pattern is unavailable,
we can evaluate the quality of a clustering solution with the cluster validation methods [33, 34]. The validation methods evaluate how well a given partition captures the
natural structure of the data based on information intrinsic to the data alone. They
can be used in selecting the optimum parameters for a clustering algorithm (e.g., the
optimum number of clusters), as well as choosing the best algorithm for a dataset.
I describe several cluster validation methods that can evaluate the quality of the
clustering solution given by an algorithm. In general terms, there are three major
cluster validation approaches based on external, internal, and relative validation criteria [33, 34]. The internal validation techniques evaluate how well a given partition
captures the natural structure of the data based on information intrinsic to the data,
and therefore suitable to select optimum parameters for a clustering algorithm. I
discuss five popular internal cluster validation methods and show that they can be
simultaneously optimized to select the algorithm with the best performance on an
FC sample as well as the parameters with the algorithm.
If an agreement among the validation methods can not be reached when choosing
an algorithm, we use a consensus of several clustering solutions [32,84]. I present two
heuristic algorithms that compute consensus clusterings from a collection of partitions
(cluster ensembles). The first heuristic approach is called Clue developed by Hornik et
al. [35,84], while the second heuristic approach is flowMatch developed by myself [36].
Using a representative sample, I show that consensus clustering performs better than
the individual algorithms under different cluster validation methods. The superior
performance of consensus clustering was also observed in [32], where the consensus
clustering by Clue [84] outperformed the “best performing” algorithm based on their
similarities with the manual (visual) gating (when evaluated by an external validation
method called the F-measure).
The rest of the chapter is organized as follows. In Section 3.2, I discuss several
simple clustering algorithms that can be used as off-the-shelf tools to cluster FC

41
data. Section 3.3 discusses different cluster validation methods. The next Section 3.4
discusses the two heuristic algorithms for constructing a consensus clustering from
a collection of partitions (cluster ensembles). In Section 3.5, I demonstrate different
aspects of clustering algorithms with two FC samples from two separate datasets. I
conclude the chapter in Section 3.6.

3.2 Clustering algorithms
Clustering (automated gating) is arguably the most researched topic in computational cytometry [25–28, 31, 32, 58, 79–83, 85]. A state-of-the-art summary of this
field is discussed by Aghaeepour et al. [32]. These algorithms often take few parameters whose values must be set appropriately to obtain good clustering solutions. For
example, the spectral clustering package SamSPECTRAL [85] takes two arguments (in
addition to other arguments), (a) normal.sigma – a scaling parameter that determines the“resolution” in the spectral clustering stage and (b) separation.factor –
a threshold controlling clusters separation. To obtain a good clustering solution from
SamSPECTRAL, these two parameters need to be selected carefully for every dataset.
As a second example, the simple and fast algorithm flowMeans [31] also depends on a
parameter MaxN that influences the quality of clustering. I will show how the selection
of parameter influences clustering solution, with an example in Section 3.5.1.
The algorithms discussed in FC literature are built on top of a few fundamental algorithms, such as the k-means, Gaussian mixture modeling, spectral clustering,
hierarchical clustering, etc. [33]. Here, I move one step back to see how the basic
algorithms perform, in a completely unsupervised setting, in clustering FC samples.
For this purpose, I selected six popular algorithms whose efficient implementations
are available as open-source packages. The algorithms, their computational complexity, and the R packages that implement them are listed in Table 3.1. K-means is a
popular algorithm that partitions n observations into k clusters in which each observation belongs to the cluster with the nearest mean [86,87]. Clara (Clustering LARge

42
Table 3.1
Several clustering algorithms are listed along with their complexity and
the R packages implementing them. In the complexity, n denotes the
number of cells in a sample and p idenotes the number of features (dimension) measured pre cell. The parameter l is the number of iterations
required before an algorithm converges. For Clara, m denotes the number
of subsamples and s denotes the number of items in each subsample.
Clustering algorithm

Computational complexity

R package

K-means [86, 87]

O(nl)

stats [96]

Clara (PAM) [88]

O(n + ms2 )

cluster [97]

Hclust [33]

O(n2 )

fastcluster [89]

GMM [90]

O(nl)

Rmixmod [91]

SOTA [92]

O(n log n)

clValid [98]

O(n3 )

kernlab [99]

Spectral [93, 94]

Applications) is a sampling based algorithm that creates a collection of m subsamples of size s from n observations. Once k representative objects have been selected
from the sub-dataset, each observation of the entire dataset is assigned to the nearest
medoid [88]. Hclust is a hierarchical clustering algorithm that builds a hierarchy of
data points into k clusters. Here, I used the Unweighted Pair Group Method with
Arithmetic Mean (UPGMA) method [33, 89]. GMM is the Gaussian mixture modeling algorithm that models a sample with a mixture of k normal distributions and
assigns observations into k Gaussian components by the Expectation-Maximization
(EM) algorithm [90, 91] . The Self Organizing Tree Algorithm (SOTA) uses an unsupervised neural network with a binary tree topology and recursively divides clusters
with the largest diversity until k clusters remain [92]. The spectral clustering works
by embedding the data points into the subspace of the k largest eigenvectors of a
normalized affinity/kernel matrix [93, 94]. An informative discussion about different
clustering algorithms can be found in [95].

43
I apply each of the six algorithms to cluster an FC sample. For slower algorithms,
such as the spectral clustering, I downsample the data into a smaller size so that the
algorithms finish in a reasonable amount of time. I always use the default arguments
of these algorithms except the number of clusters k. However, I often perform a
second phase to estimate the statistical parameters of the clusters identified by the
clustering algorithms. For this purpose, I characterize an FC sample with a mixture of
k normally distributed clusters of p-dimensional points. Each cluster is characterized
by a multi-dimensional normal distribution and is represented by two parameters µ,
the p-dimensional mean vector, and Σ, the p × p covariance matrix [26]. To estimate
the parameters of k clusters, I use the Expectation-Maximization (EM) algorithm [90].

3.3 Cluster validation methods
Clustering is an unsupervised process of identifying phenotypically similar cell
populations from an FC sample. When clustering patterns and the number of clusters
are not known a priori, the clustering solution is evaluated for quality assurance
[33, 34, 100]. Cluster validation usually answers questions like “how well does the
resulting partition fit the data?”, “how many clusters are there in a sample?”, and
“from a collection of algorithms, which algorithm provides the best partition?”.
In general terms, there are three major cluster validation approaches based on
external, internal, and relative validation criteria [33,34]. External validation methods
evaluate a clustering result based on an a priori knowledge of correct class labels
or the “gold standard”. Internal validation techniques evaluate how well a given
partition captures the natural structure of the data based on information intrinsic to
the data alone. Relative validation methods compare two partitions to identify their
relative differences. While external and relative validation techniques depend on some
benchmarking or “gold standard”, internal validation methods do not depend on any
prior knowledge. Given the limited number of “gold standards” in flow cytometry,
internal validation is the most practical approach for most FC dataset, and it is

44
the focus of my discussion. However, occasionally prior human interpretation (e.g.,
manual gating) is available for a subset of samples of an FC dataset [32]. In this
scenario, I discuss the application of external cluster validation methods briefly in
the latter part of this section. The following discussion is limited to validating hard
clustering where each data item is assigned to exactly one cluster. Evaluation methods
for fuzzy clustering are discussed in [100–102].

3.3.1 Internal cluster validation methods
Consider an n × p data matrix A storing n p-dimensional observations. In flow
cytometry, A represents a biological sample measuring p features from n cells. Let
d(x, y) be the Euclidean distance between two data items, x and y. I use d2 (x, y) to
denote the squared Euclidean distance between x and y. Assume that A is partitioned
into k clusters C = {c1 , c2 , ..., ck }, where the ith cluster ci contains |ci | data items
with mean µi .
Most internal cluster validation methods use the concepts of within-cluster compactness and between-cluster separation. The former concept minimizes the intracluster distances, while the latter maximizes the between-cluster distances. In the
discussion on internal validation methods, I use ∆(ci ) to denote the intra-cluster distance of a cluster ci and D(ci , cj ) to denote the between-cluster distance from ci to cj .
Different cluster validation methods define the intra- and inter-cluster distances differently. Based on these definitions, I discuss five popular internal cluster validation
methods that I use to evaluate automated gating of FC samples.
Calinski-Harabasz (CH) Index: Calinski and Harabasz [103] defined the intracluster distance ∆(ci ) of a cluster ci as the sum of squared distances from each data
item x ∈ ci to the cluster center µi . They defined the separation D(ci ) of cluster ci
as the squared distance between the center µi and the overall center µ of the entire

45
sample. Then the Calinski-Harabasz (CH) index [103] is defined as the ratio of the
average cluster separation to the average within-cluster distance.
(n − k)
∆(ci ) =

X

2

d (x, µi ),

2

D(ci ) = |ci | d (µi , µ),

CH =

x∈ci

P

D(ci )

ci ∈C

(k − 1)

P

∆(ci )

. (3.1)

ci ∈C

A large value of the CH index denotes larger separation among clusters relative to
the average within-cluster distance. The CH index is limited to the interval [0, +∞]
and should be maximized. The time needed to compute the CH index is O(n + k),
which is linear in the number of data points, and thus faster for large data matrices.
Dunn’s Index: Dunn defined the intra-cluster distance ∆(ci ) of a cluster ci as the
maximum distance between pairs of data items x, y ∈ ci and the between-cluster
distance D(ci , cj ) for a pair of clusters ci and cj as the minimum distance over all
pairs of data items x ∈ ci and y ∈ cj . Dunn’s index [104] then measures the ratio of
the smallest between-cluster distance to the largest intra-cluster distance.
∆(cl ) = max d(x, y),
D(ci , cj ) = min d(x, y),
x,y∈cl
x∈ci ,y∈cj


1
Dunn = max (∆(cl )
D(ci , cj ) .
min
cl ∈C

(3.2)

ci ,cj ∈C,ci 6=cj

Dunn’s index is limited to the interval [0, +∞] and should be maximized. The time
complexity for computing Dunn’s index is O(n2 + k 2 ), which reduces to O(n2 ) for
bounded k. Therefore, Dunn’s index is computationally expensive when the data
matrix is large.
Average Silhouette Width (ASW): Let a(xi ) be the average distance from the ith
data item xi to all other data items within the same cluster, and let b(xi ) be the
lowest average distance from xi to a cluster to which xi does not belong. Then the
silhouette width of xi is computed as follows:
S(xi ) =

b(xi ) − a(xi )
.
max{b(xi ), a(xi )}

(3.3)

The Average Silhouette Width (AWS) of the partition C is computed by averaging
S(xi ) over all data items [105]. The AWS is limited to the interval [−1, 1] and should

46
be maximized. The time to compute the AWS is O(n2 ), and similar to Dunn’s index,
it is computationally expensive when the data matrix is large.
Davies-Bouldin Index: Davies and Bouldin [106] defined the intra-cluster distance
∆(ci ) of a cluster ci as the square root of the average squared distance from each
data item x ∈ ci to the cluster center µi . They defined the between-cluster distance
D(ci , cj ) for a pair of clusters ci and cj as the distance between their clusters centers
µi and µj . Then the Davies-Bouldin index is defined as follows:
(
∆(ci ) =

)1/2
1 X 2
d (µi , x)
,
|ci | x∈c
i



∆(ci ) + ∆(cj )
1X
max
.
DB =
k c ∈C cj ∈C
d(µi , µj )
i

(3.4)

ci 6=cj

The Davies-Bouldin index is limited to the interval [0, +∞] and should be minimized.
The time to compute the Davies-Bouldin index is O(n + k 2 ), which is linear in the
number of data points. Therefore it is faster to compute for large data matrices.
S Dbw Index: Let σ 2 (ci ) be a p-dimensional vector whose q th component σq2 (ci )
contains the variance of data items x ∈ ci in the q th dimension. Also let σ 2 be a
p-dimensional vector whose q th component σq2 contains the variance of data items
from all clusters in the q th dimension. Then the average intra-cluster distance ∆(C)
of the partition C is computed as follows:
1
∆(C) =
k

)1/2

(
X

kσ 2 (ci )k

,

(3.5)

ci ∈C

where k.k is the L2 norm. Assume that the density ρ(ci ) of the cluster ci is defined as
the number of data points that lie within a hyper-sphere centered at µi with ∆(C)
as the radius.

ρ(ci ) =

X

f (x, µi ), where

f (x, µi ) =



0, if d(x, µi ) > ∆(C)

(3.6)


1, otherwise

x∈ci

The average inter-cluster density can be computed as
ρ(C) =

X
ρ(ci ∪ cj )
1
,
k(k − 1) c ,c ∈C max{ρ(ci ), ρ(cj )}
i

j

(3.7)

47
Table 3.2
Summary of the cluster validation indices. In the complexity, n is the
number of data points in a sample and k is the number of clusters. The
dimension of a sample p is omitted from the calculation of complexity.
Cluster validation methods

Range

Optimization

Time complexity

Calinski-Harabasz [103]

[0, ∞]

maximize

O(n + k)

Dunn [104]

[0, ∞]

maximize

O(n2 + k 2 )

Average Silhouette Width [105]

[-1, 1]

maximize

O(n2 )

Davies-Bouldin [106]

[0, ∞]

minimize

O(n + k 2 )

S Dbw [107]

[0, ∞]

minimize

O(nk 2 )

where ρ(ci ∪ cj ) is the density computed after merging ci and cj and then using
Eq. 3.6. The S Dbw index [107] is then defined as the summation of the normalized
intra-cluster distance and average inter-cluster density:
S Dbw =

(∆C)2
+ ρ(C).
kσ 2 k

(3.8)

The S Dbw index is limited to the interval [0, +∞], and should be minimized. The
time to compute the S Dbw index is O(nk 2 ), which is linear in the number of data
points, and can be computed fast for large data matrices.
Table 3.2 gives a summary of these five internal cluster validation methods. Besides these five internal cluster validation methods, several other methods have also
been proposed in the literature, such as Ball-Hall [108], C [109], Ray-Turi [110],
Scott-Symons [111], and other indices. The papers [34, 95, 112] provide more details.
Different cluster validation methods are also implemented in several R packages such
as clv [113], clValid [114], clusterCrit [115].

3.3.2 External cluster validation methods
Unlike internal cluster validation methods, external methods evaluate a clustering
result based on a prior knowledge of correct class labels or the “gold standard”. In

48
FC, we often seek completely unsupervised clustering because of the unavailability
of “gold standards”. However, occasionally prior human interpretation (e.g., manual
gating ) is available for a subset of a larger FC dataset [32]. Then the external cluster
validation methods can be applied to evaluate the consensus between the clustering
solution provided by an algorithm and the known “ground truth”.
In flow cytometry, F-measure [116] is a commonly used external method to evaluate the closeness of a partition to the “gold standard” or manual gating. Assume
that C = {c1 , c2 , ..., ck } is a set of clusters computed by a clustering algorithm while
T = {t1 , t2 , ..., tl } is a set of true clusters of the same sample. Then, precision is the
number of data points in the computed cluster cj that belong to the correct cluster
ti and recall is the number of data points in the true cluster ti that are recovered by
the computed cluster cj . The F-measure F (ti , cj ) between ti and cj is the harmonic
mean of precision and recall. Let |ti | and |cj | be the number of data points in ti
and cj respectively and |ti ∩ cj | be the number of points belonging to both ti and
cj simultaneously. Then the precision, recall, and F-measure between ti and cj are
defined as follows.
|ti ∩cj |
, Recall(ti , cj )
|cj |
2 · Precision(ti ,cj ) · Recall(ti ,cj )
Precision(ti ,cj )+Recall(ti ,cj )

Precision(ti , cj ) =
F (ti , cj ) =

=

|ti ∩cj |
|ti |

(3.9)

The overall F-measure for the partitioning C with respect to T is computed as
F (T, C) =

X |ti |
ti ∈T

n

max{F (ti , cj )},
cj ∈C

(3.10)

where n is the number of data points in the sample.
Several other external cluster validation methods were also proposed in the literature, such as Rand index [117], Jaccard coefficient [118], Minkowski score [119],
Fowlkes-Mallows index [120], etc. External cluster validations based on combinatorial
optimization have also been used, such the R-metric, transfer distance or partition distance that computes the minimum number of augmentations and removals of points
needed to transform one partition into another [121–124]. Note that the external cluster validation approaches always compare two partitions of the same sample. These

49
methods are used to compare the quality of a clustering algorithm relative to the
“gold standard” and to compare the performance of multiple algorithms applied to
the same sample. However, they cannot be used to compute the dissimilarity between
partitions from two different samples. In Chapter 4, I will discuss a combinatorial
algorithm for computing dissimilarities between a pair of partitions from different
samples.

3.3.3 Selecting the number of clusters (cell populations)
Most clustering algorithms take the number of clusters k as an input and assign
the data points into k clusters. However, the optimum number of clusters k ∗ is often
not known in unsupervised clustering problems. Especially in FC, the number of phenotypically distinct cell populations may not be known in advance. In this situation,
a clustering algorithm is run for different number of clusters in a range [kmin , kmax ].
The clustering quality for each k is then computed by internal cluster validation methods and an optimum number of clusters k ∗ is selected by maximizing/minimizing the
validation indices. For example, the values of avg. silhouette width (ASW), CalinskiHarabasz (C-H), and Dunn indices are maximized and Davies-Bouldin and S Dbw
indices are minimized to obtain the optimum number of clusters. However, if different cluster validation methods disagree with each other about k ∗ , a consensus (e.g.,
majority voting) of them is used to select k ∗ .

3.3.4 Selecting the “best” algorithm
Given a collection of algorithms, which algorithm should we use to cluster a sample
for the selected optimum number of clusters k ∗ ? To select an algorithm for clustering
a particular sample, I consider the following three conditions. First, if most clustering
algorithms perform equally well under all validation indices, then I select the fastest
of the better performing algorithms. Second, if an algorithm consistently performs
better than others under several validation methods, then I select the best-performing

50
algorithm. Finally, when no agreement can be reached about the best performing
algorithm because different validation methods favor different algorithms, I compute
a consensus of the clustering solutions provided by the algorithms.

3.4 Consensus clustering
To describe how a consensus clustering is computed, we first need a dissimilarity
measure between a pair of partitions. Assume that a partition is defined as a binary
membership matrix P such that P [i, j] = 1 if the ith object belongs to the j th cluster
and otherwise, P [i, j] = 0. Then the dissimilarity between two partitions P and Q is
defined as
d(P, Q) = min ||P − QΠ||,
Π

(3.11)

where the minimum is taken over all permutation matrices Π, and ||·|| is the Frobenius
norm (so that ||Y ||2 = tr(Y 0 Y )). This dissimilarity measure computes the minimum
number of augmentations and removals of items needed to transform one partition
into another and is called the transfer distance or partition distance [121–123]. The
partition distance can be computed by formulating an edge-weighted matching problem in a bipartite graph and solving it by efficient combinatorial algorithms (e.g., the
Hungarian method) in O(k 3 ) time, where k is the number of clusters in the partitions [121, 122, 125].
Given a collection of partitions E (possibly generated by several algorithms), a
consensus clustering algorithm finds a new partition P such that the total dissimilarity between P and each partition in E is minimized [35, 126, 127]. The initial set
of partitions E is often called a cluster ensemble [35, 84]. An optimum consensus
partition P ∗ minimizes the total dissimilarity between P and each partition in the
ensemble E:
P ∗ = argmin
P

X
Q∈E

min ||P − QΠ||.
Π

(3.12)

This optimization is an instance of multidimensional assignment problem, which is
known to be NP-hard (by reducing it to the 3-dimensional matching problem [128]).

51
Hence, various heuristics have been developed to solve the consensus clustering problem. Here I will discuss two heuristic approaches to approximately compute a consensus clustering.
The first heuristic approach is called Clue developed by Hornik et al. [35, 84].
Clue initializes the consensus partition P with a randomly selected partition from
the ensemble. In the ith iteration, the algorithm randomly selects a partition Q not
already included in the consensus clustering. The algorithm then optimally matches
the clusters between Q and Pi−1 (the consensus partition created thus far) and creates
an updated consensus partition Pi by taking a weighted average of Pi−1 and QΠi ,
where Πi is the permutation matrix found by the optimum matching.
The second heuristic approach is flowMatch developed by myself [36]. flowMatch
computes the dissimilarity between partitions by a mixed edge cover (MEC) algorithm
that allows a cluster from a partition to be matched to zero or more clusters in
another partition [37]. Let N be the number of partitions in the ensemble E. In
each iteration, the flowMatch algorithm finds the most similar pair of partitions,
merges them into an intermediate consensus partition and continues. The merging
is performed by matching clusters across two partitions and collapsing the matched
clusters into meta-clusters. Let P be the consensus-partition with K meta-clusters
created by the above algorithm. The collection of these meta-clusters then defines
the consensus partition. I will discuss this algorithm in more detail in Chapter 4 and
Chapter 5.

3.5 Results
3.5.1 Identifying cell populations in a healthy sample
Data description: I cluster a representative sample from the HD dataset described
in Section 1.6.1. Each sample in this dataset measures the abundance of CD45, CD3,
CD4, CD8, and CD19 protein markers in peripheral blood collected from a healthy
individual. I selected a representative sample from this dataset to demonstrate differ-

52
Calinski−Harabasz

Dunn

Avg. Sil. Width

8000
1.5

0.4

1.0

0.2

0.5

0.0

6000

2000
2

4

6

8

10

2

4

Davies−Bouldin

6

8

10

1.6

1.0

1.4

0.8

1.2
1.0
4

6

8

4

6

8

10

K−means

0.6

2

2

S_Dbw

Algorithms

Value of the indices

4000

10

0.4

2

4

6

8

10

Clara
Hclust
GMM
SOTA
Spectral

Number of clusters

Figure 3.1. Evaluating the performance of six clustering algorithms
(shown in different colors) by five internal cluster validation methods
(shown in different panels). A representative 5-D sample from the HD
dataset is clustered by the algorithms for a sequence of k. Each clustering solution is then evaluated by five cluster validation methods. The
optimum number of clusters, k ∗ is selected by maxima in the top three
methods and by minima in the bottom two methods.

ent aspects of clustering algorithms. The selected sample is compensated to remove
the effect of spectral overlap, transformed to stabilize variance, and gated on FS/SS
channels to identify lymphocytes. The preprocessed five-dimensional data is then
clustered to identify different subsets of lymphocytes in the healthy immune system.
Selecting the optimum number of clusters (k ∗ ): I have applied six clustering (Table 3.1) algorithms to the 5-D healthy sample for different number of clusters in the
interval 2-10. The range for k can be increased if the optimum solution is not found
in the selected range. Each clustering solution is evaluated by five internal cluster
validation methods described in Table 3.2. Fig. 3.1 shows the values of different cluster validation indices for different algorithms. The optimum number of clusters k ∗ is
selected by maxima in the top three methods (Calinski-Harabasz, Dunn, and Average
silhouette width) and by minima in the bottom two methods (Davies-Bouldin and

53
S Dbw). Form Fig. 3.1 we observe that all validation methods unanimously indicate
k = 4 as the optimum number of clusters across all clustering algorithms except for
the spectral clustering. The spectral clustering does not perform well because a user
needs to pass a set of carefully tuned arguments to the algorithm for better performance [85]. For this sample, I select k ∗ = 4 as the optimum number of clusters as
per the consensus of the five cluster validation methods.
Researchers have proposed several ad hoc criteria to select the optimum number
of clusters k ∗ for FC data. For example, the flowMeans algorithm [31] developed
by Aghaeepour et al. starts with a relatively large number of clusters (Max k) and
merges two closest clusters in each iteration. The algorithm then plots the distances
between the merged clusters at each iteration and selects the value of k ∗ where a
sharp change in the segmented regression lines is observed. I cluster the same healthy
sample used in the previous paragraph by the flowMeans software package [129] for
three choices of Maximum k (parameter MaxN in flowMeans package) and plot the
results in Fig. 3.2. Observe that flowMeans algorithm selected three different k ∗
(shown by red circles) for three different choices of initial number of clusters. Only
Fig. 3.2(b) selects the correct k ∗ as unanimously suggested by five well-established
cluster validation methods in Fig. 3.1. Therefore, flowMeans algorithm depends on a
hidden parameter (Max k) when selecting k ∗ . flowMeans estimates the initial number
of clusters to 5 when the user does not supply it; however, Fig. 3.2(a) shows that the
auto tuning fails to identify the correct number of clusters for this sample. Hence,
I prefer using well-known cluster validation methods to select optimal number of
clusters k ∗ .
Selecting the “best” algorithm: Which clustering algorithm should we use to cluster this sample? Fig. 3.1 shows that except for spectral clustering, all clustering
algorithms perform equally well since the validation indices have optima at k = 4.
In this case, computing a consensus clustering does not improve the quality of the
overall clustering solution because the individual clusterings from five algorithms (for

54

5

4

3

2

1

Number of clusters (k)

10

8

6

4

2

Number of clusters (k)

0 20

60

(c) Max k=20
Distance between
merged clusters

60
0 20

Distance between
merged clusters

20 40 60 80

(b) Max k=10

0

Distance between
merged clusters

(a) Max k=5

20 16 12

8

4

Number of clusters (k)

Figure 3.2. Selecting the optimum number of cell populations in a sample
from the HD dataset by the flowMeans package [31, 129]. The maximum
number of clusters (MaxN parameter) is set to: (a) 5 clusters (automatically
selected by algorithm), (b) 10 clusters, and (c) 20 clusters. The optimum
number of clusters is selected by detecting change point in the segmented
regression lines and is shown with a red filled circle in each subfigure.

k = 4) have the same quality under different validation methods. Therefore, I select
the fastest k-means algorithm to cluster this sample.
Identifying lymphocyte sub-populations: The four clusters chosen by the k-means
algorithm represent four biologically distinct lymphocyte sub-populations defined
in the five dimensional marker space. For visualization purposes, I show the cell
populations by a collection of 2-D projections in Figure 3.3(b), where cell populations are shown in four different colors denoting (a) red: natural killer cells
(CD45+ CD3− CD19− ), (b) blue: B cells (CD45+ CD3− CD19+ ), (c) black: helper
T cells (CD45+ CD3+ CD4+ ), and (d) green: cytotoxic T cells (CD45+ CD3+ CD8+ ).
Here, every cell cluster is CD45+ because CD45 is a common leukocyte antigen present
in all lymphocytes and I pre-selected lymphocytes on the forward and side scatter
channels.

3.5.2 Identifying cell sub-populations in T cells
Data description: As a second example, I cluster a pre-stimulation sample from the
T cell phosphorylation (TCP) dataset described in Section 1.6.2. The selected sample
measures the abundance of four protein markers expressed on T cells: CD4, CD45RA,

55

1.00

(b)

Davies-Bouldin
S_Dbw

CD4
−1
1

0.75
0.50

Helper T Cells (CD3+ CD4+ )
Cytotoxic Cells (CD3+ CD8+)

2

4

6

1.00

8

10

ASW
C-H Index
Dunn

0.75

3

0.00

CD8
−2 0 2

0.25

0.50

CD19
0 2 4

Cluster Validation Indices

NK Cells (CD3- CD19-)
B Cells (CD3- CD19+)

CD3
−1 1

(a)

0.25
0.00
2

4

6

8

10

Number of clusters

1 2 3 4
CD45

−1

1 2 −2

CD4

0 2
CD8

−1

1 3
CD3

Figure 3.3. (a) Simultaneous optimization of five cluster validation criteria (scaled to [0,1]) suggests that four cell populations are present in
the healthy sample. Here three of the indices are maximized and two
are minimized. (b) Bivariate projections of lymphocyte sub-populations:
red (natural killer cells), blue (B cells), black (helper T cells), and green
(cytotoxic T cells).

SLP-76 and ZAP-70. The first two markers (CD4, CD45RA) are expressed on the
surface of different T cell subsets and the last two (SLP-76 and ZAP-70) are highly
expressed after T cells are phosphorylated [44]. Since I selected a pre-stimulation
sample (for simplicity), I consider only CD4, CD45RA to identify different subsets of
T cells by using clustering algorithms.
Selecting the optimum number of clusters (k ∗ ): I have applied six clustering algorithms to the selected 2-D sample. The algorithms were run for different number
of clusters and each clustering solution is evaluated by five cluster validation indices.
The values of the cluster validation indices are shown in Fig. 3.4. The optimum number of clusters k ∗ is selected by maxima in the top three methods (Calinski-Harabasz,

56
Calinski−Harabasz

Dunn

20000

2.5

15000

2.0

Avg. Sil. Width

0.6
0.5
0.4

1.5
0.3
1.0

0.2

5000
0.5
2

4

6

8

10

Davies−Bouldin

0.1
2

4

6

8

10

2

4

6

8

10

S_Dbw

1.0

K−means
1.3

0.8

1.1

0.6

0.9

0.4

0.7

0.2

2

4

6

8

10

Algorithms

Value of the indices

10000

Clara
Hclust
GMM
SOTA

2

4

6

8

10

Spectral

Number of clusters

Figure 3.4. A representative 2-D sample from the TCP dataset is clustered
using six clustering algorithms for a sequence of k (number of clusters).
Each clustering solution is evaluated by five cluster validation methods
(shown in different panels). The optimum number of clusters k ∗ is selected
by the maxima in the top three methods and by the minima in the bottom
two methods.

Dunn, and Average silhouette width) and by minima in the bottom two methods
(Davies-Bouldin and S Dbw). Form Fig. 3.4 we observe that all validation methods
unanimously indicate k = 4 as the optimum number of clusters across all clustering algorithms except for the spectral clustering. Therefore, for this sample, I select
k ∗ = 4 as the optimum number of clusters.
Selecting the “best” algorithm: Unlike the HD sample (Fig. 3.1), the values of the
cluster validation indices are different across the algorithms for k ∗ = 4 as can be seen
in Fig. 3.4. Furthermore, different algorithms perform best under different validation
indices. For example, the hierarchical clustering is the best algorithm under Dunn’s
index, while K-means and Clara are the best performers under Calinski-Harabasz
index. Therefore, creating a consensus clustering is useful for this sample.

57

Validation Index

Algorithms
Calinski−Harabasz

Best−Algorithm
Dunn

Consensus−Clue
Avg. Sil. Width

Consensus−flowMatch
Davies−Bouldin

S_Dbw

1.00
0.75
0.50
0.25
0.00

Algorithms after setting k = 4

Figure 3.5. Five cluster validation methods are used to compare the
quality of the “best-performing” algorithms with two consensus clustering
methods (Clue and flowMatch) for a 2-D sample from the TCP dataset.
A “better” clustering solution is denoted by higher values of the first three
indices and lower values of the last two indices.

I compute consensus solutions by two heuristic algorithms, Clue and flowMatch,
discussed in Section 3.4. The consensus clusterings are computed from the solutions
of six clustering algorithms after the number of clusters is set to four (k = 4). Once
again I evaluate the performance of the consensus clustering solutions by five cluster
validation methods whose values are scaled to [0, 1] for comparison purpose. I show
the values of the validation indices in five different panels in Fig. 3.5. In addition to the
consensus partitions, I show the validation indices of the best-performing algorithm
under each validation method in its respective panel. According to Table 3.2, a
“better” clustering solution is denoted by higher values of the first three indices
and lower values of the last two indices. We observe in Fig. 3.5 that the consensus
solutions perform better under four validation methods (except the Dunn’s index)
than the best performing algorithms. The consensus clustering based on flowMatch
performs slightly better than the solution based on Clue under all validation methods.
The relatively poor performance of the consensus methods under Dunn’s index
can be explained if we look closely at the definition of the within-cluster and betweencluster distances used in Eq. 3.2. Notice that the within-cluster distance is defined by
the diameter of a cluster and the between-cluster distance is defined as the minimum
distance between a pair of clusters. These definitions are not robust especially in the

1.5
1.0
0.0

0.5

CD45RA

2.0

2.5

58

0.0

0.5

1.0

1.5

CD4

Figure 3.6. The consensus clustering computed by the flowMatch algorithm created from the solutions of six clustering algorithms with
k = 4. Four T cell sub-populations are shown in different colors; black:
CD4+ CD45RAlow T cells, green: CD4+ CD45RAhigh T cells, red: CD4−
CD45RAhigh T cells, and blue: CD4− CD45RAlow T cells.

presence of outlying data items that are far apart from their cluster centers. Therefore,
Dunn’s index is less robust when evaluating the quality of robust consensus clustering
solutions.
Identifying T cell sub-populations: I select the consensus clustering by flowMatch
algorithm as the final clustering solution for the selected TCP sample. The consensus
clustering solution for this sample is shown in Fig. 3.6, where four clusters representing
different T cell sub-populations are shown in different colors: (a) CD4+ CD45RAlow T
cells in black, (b) CD4+ CD45RAhigh T cells in green, (c) CD4− CD45RAhigh T cells
in red, and (d) CD4− CD45RAlow T cells in blue. Here ‘+’ and ‘high’ indicate higher
abundances of a marker, and ‘−’ and ‘low’ indicate lower levels of it. Two clusters
with high CD4 expression, CD4+ CD45RAlow and CD4+ CD45RAhigh cells, are called
the memory and naive T cells respectively. Few domains of the CD4+ cell subsets are
phosphorylated upon stimulated by anti-CD3 antibody. To study the effect of this
stimulation was the main purpose of the TCP dataset generated originally by Maier

59
et al. [44]. I will discuss algorithms to automatically detect phosphorylation changes
across pre- and post-stimulated samples in Chapter 4 and Chapter 5.

3.6 Conclusions
We can achieve better confidence in a computed clustering when several algorithms produce similar clusterings. I demonstrated that several simple, off-the-shelf
clustering algorithms can be used to compute more accurate and robust partition of
an FC sample than a specialized algorithm. Internal cluster validation methods can
be used to select parameters of an algorithm such as the optimal number of clusters.
More than one validation method yet again provide more confidence and robustness
in model selection.
I have discussed a set of five cluster validation methods – Calinski-Harabasz, Dunn,
Average silhouette width, Davies-Bouldin and S Dbw – that can be simultaneously
optimized to select algorithm parameters, as well as the best-performing algorithm for
an FC sample. However, it is possible that different validation methods disagree about
the best performing algorithm because different validation methods favor different
algorithms. Then a consensus of different clustering algorithm usually provides a
“better” solution. I use the flowMatch algorithm (originally developed for creating
a template from similar samples) to create consensus clustering from a collection
of partitions (cluster ensembles). By comparing the consensus clustering with the
“best performing” algorithm, I showed that the consensus solution performs better
when evaluated by different cluster validation methods. The superior performance
of consensus clustering was also observed in the clustering challenges organized by
the FlowCAP consortium (http://flowcap.flowsite.org/). In these challenges,
more than 15 clustering algorithms developed by different independent researchers
were used to cluster same set of samples. However, often the consensus clustering by
Clue [84] outperformed the “best performing” algorithm based on their similarities
with the manual (visual) gating [32].

60
Clustering (automated gating) is arguably the most researched topic in computational cytometry. More than twenty algorithms customized for FC data are available
as software packages to be used by cytometrists. However, the large number of options
often confuses cytometrists due to the lack of validation methods needed to select a
clustering algorithm for a particular dataset. I argue that several cluster validation
methods should be used to evaluate the clustering quality and that a consensus clustering be constructed whenever necessary. This approach produces a robust clustering
solution and increases confidence on the quality of clustering in FC data.

61

4 REGISTERING CELL POPULATIONS ACROSS FC SAMPLES
4.1 Introduction
Cell populations with different phenotypes and functions often respond differently upon perturbation by stimuli or change of biological conditions. To track these
population-specific changes, we need to register corresponding cell clusters across samples. The population registration is a process where phenotypically similar cell clusters
are matched to establish the correspondence of clusters across samples [27, 37]. Furthermore, the matched clusters are often labeled with abstract or biologically relevant
descriptions, thus solving the population/cluster labeling problem [39].
I solve the population registration problem with a combinatorial mixed edge cover
(MEC) algorithm [37]. Given a pair of clustered sample, I create a bipartite graph
whose vertices are denoted with cell clusters from the samples. An edge of the graph
is created by joining a pair of clusters with the dissimilarity between the clusters as
the edge-weight. The MEC algorithm then matches vertices (clusters) in the bipartite
graph by optimizing an appropriate objective function. Unlike conventional matching
algorithms, the MEC algorithm allows a cluster from one sample to be matched with
zero or more clusters in another sample and thus solves the problem of missing or
splitting biological populations. In addition to solving the population registration
problem, an optimal MEC solution provides a combinatorial dissimilarity measure
between a pair of partitions from different FC samples. This between-sample dissimilarity works as a building block of the meta-clustering and classification approaches
discussed in Chapter 5 and Chapter 6.
The ability to register multi-dimensional populations across FC samples is useful
in various applications of flow cytometry [27, 36, 37, 130, 131]. In a cluster labeling
application, cell clusters in a collection of samples S are labeled based on the given

62
labeling of another FC sample A. This problem can be solved by matching clusters
between A and each sample B ∈ S, and labeling each cluster in B same as to the
matched cluster from A. I give an example of labeling different sub-populations of
lymphocytes in samples from a healthy dataset. In addition to labeling clusters,
the MEC algorithm allows an objective way of evaluating the phenotypic differences
between the matched clusters. By mapping clusters across two samples before and
after stimulating T cells, I demonstrate how we can assess the population-specific
effects of the stimulation experiment. Furthermore, I register different cell types in a
sample from an Acute Myeloid Leukemia (AML) patient with a healthy sample and
demonstrate a conventional procedure of AML diagnosis.
The MEC algorithm is similar – only in principle – to the FLAME approach proposed by Pyne et al. [27], while differing from it in significant ways. First, FLAME
does not match clusters directly across a pair of samples. Instead, it constructs a template of a class of samples and matches generic meta-clusters from the template to the
clusters from each sample; therefore, performs a global registration of clusters. In contrast, MEC algorithm performs a direct, sample-to-sample cluster matching, thereby
emphasizes the local patterns. In fact, the approach taken by FLAME is more similar to the meta-clustering algorithm discussed in Section 5. Second, FLAME solves
a relaxed min-cost flow problem [132] by an integer-programming solver, whereas
MEC uses a combinatorial algorithm to solve a relaxed minimum-weight matching
in a bipartite graph. Several other subtle differences also exist between these two
approaches, such as the methods used to compute distance between clusters and the
use of cluster sizes in matching. The cluster labeling approaches [23, 39] discussed
in FC literature are very different from the MEC algorithm. These labeling algorithms run a second stage of clustering from the cluster-centers and hence perform a
global labeling similar to the first phase of FLAME. I will discuss more about this
approaches in the next Chapter 5.
The rest of this chapter is organized as follows. At first, I discuss different methods to compute dissimilarity between a pair of clusters, which is used by population

63
registration algorithms. In Section 4.3, I describe the mixed edge cover algorithm
with a proof of its optimality. Section 4.4 describes different properties of the MEC
algorithm and their implications on the population registration problem. In Section 4.5, I demonstrate, with three representative datasets, that the MEC algorithm
matches phenotypically similar populations across samples. I conclude this chapter
in Section 4.6.

4.2 Dissimilarity between a pair of cell clusters
Computing distances between clusters is an integral part of any cluster-matching
algorithm. In the past, researchers have used various parametric and non-parametric
methods in this purpose, such as the Euclidean distance [27], Mahalanobis distance
[23], the Kullback-Leibler (KL) divergence [36, 37], and the Earth Mover’s distance
(EMD) [133]. To compute dissimilarity between two clusters c1 and c2 , the parametric
methods use distribution parameters of the clusters while non-parametric methods use
statistical significance testing. I discuss very briefly several widely used parametric
and non-parametric dissimilarity measures.
Parametric dissimilarity measures: To compute parametric distances, it is assumed that a cell cluster approximately follows a known probability distribution.
Dissimilarity between a pair of cell clusters is then computed by the dissimilarity
between the corresponding multivariate probability distributions. To model cell populations, researchers have used several well-characterized distribution families, such
as normal, skew-normal, t, skew-t distributions [23, 25–27, 36]. For simplicity, I assume normally distributed cell populations in the rest of my discussion, but other
distributions are equally applicable to the dissimilarity methods discussed below.
Let c1 (µ1 , Σ1 ) and c2 (µ2 , Σ2 ) be two cell populations modeled by multivariate
normal distributions with mean vectors µ1 , µ2 and covariance matrices Σ1 , Σ2 respectively. The Euclidean distance computes the distance between the centers (µ1
and µ2 ) of the distributions without considering the spreads of the distributions. The

64
symmetric version of the Kullback-Leibler (KL) divergence [134,135] uses both centers
and covariances of the distributions to compute dissimilarity dKL (c1 , c2 ) between c1
and c2 :
1
1
−1
−1
−1
dKL (c1 , c2 ) = (µ1 − µ2 )> (Σ−1
1 + Σ2 )(µ1 − µ2 ) + tr(Σ1 Σ2 + Σ2 Σ1 − 2I). (4.1)
2
2
The symmetrized KL divergence, however, is not a metric because it does not satisfy
the triangle inequality. Mahalanobis distance [136] uses the pooled estimate of common covariance Σp from the two distributions to compute distance between clusters:
Σp =

(n1 − 1)Σ1 + (n2 − 1)Σ2
,
n1 + n2 − 2

1
dM D (c1 , c2 ) = (µ1 − µ2 )> Σ−1
p (µ1 − µ2 ). (4.2)
2

Note that, the above definition of Mahalanobis distance satisfies metric properties,
whereas the Mahalanobis distance defined by Aghaeepour et. al. [31] (Equation 3.7)
is not a metric since it fails to satisfy triangle inequality [133].
Non-parametric dissimilarity measures: The non-parametric measures use statistical significance testing to compute dissimilarity between cell populations. For
example, the Kolmogorov-Smirnov (KS) statistic [137, 138] computes the maximum
absolute vertical difference between two cumulative distribution functions (CDFs).
Another non-parametric measure uses chi-squared statistics after applying adaptive
probability binning [133] that divides a p-dimensional cell population into bins such
that each bin contains the same number of cells. The normalized chi-squared statistics is then used to compute the dissimilarity between the populations. The earth
mover’s distance (EMD) [133, 139] considers the histograms of two populations as
two piles of dart in multivariate space and computes the minimum cost of moving
one pile into another. Here the cost of moving dart is defined as the amount of dirt
moved times the distance by which it is moved. EMD can be efficiently computed by
first applying adaptive probability binning on the cell populations and then solving
transportation problem on the bins across the clusters [139].
In the rest this chapter, I used Mahalanobis distance to compute dissimilarity
between a pair of clusters because it is a metric and uses the centers and covariance

65
matrices of the clusters. However, every algorithm described in this thesis works with
other dissimilarity measures as well.

4.3 The mixed edge cover (MEC) algorithm
4.3.1 Overview of the algorithm
Given a dissimilarity measure between cell cluster, I develop an algorithm to
optimally register clusters across a pair of FC samples. I make the algorithm robust
by allowing a cluster from one sample to be matched to zero or more clusters in
another sample. This approach covers possible circumstances when a cell cluster in
one sample is absent from another sample, or when a cluster in one sample splits into
two or more cell populations in a second sample, which can happen due to biological
reasons or due to the limitations of clustering methods.
I characterize an FC sample by a mixture of cell clusters. Consider two FC
samples A and B containing of ka and kb cell clusters such that A = {a1 , a2 , ..., aka }
and B = {b1 , b2 , ..., bkb }, where ai is the ith cluster from A and bj is the j th cluster from
B. I developed a robust variant of matching algorithm called the Mixed Edge Cover
(MEC) algorithm that matches a cluster from A to zero or more clusters from B [37].
Suppose mec is a matching of clusters across A and B such that mec(ai ) ∈ P(B)
and mec(bj ) ∈ P(A), where P(A) (P(B)) is a subset (possibly empty) of clusters in
A (B). When a cluster ai (or bj ) remains unmatched under mec, i.e., mec(ai ) = ∅,
I set d(ai , −) = λ where the fixed cost λ is used as a penalty for leaving a cluster
unmatched, and is set to a value such that the number of such clusters remains
small. I select λ empirically by plotting the total number of unmatched clusters in
all pair wise matchings of samples against λ, and finding a “knee” in the curve [37].
The cost of mec is therefore computed as the summation of the dissimilarities of all

66
pairs of matched clusters and the penalties coming from the unmatched clusters. A
minimum-weight mixed edge cover is a mixed edge cover with the minimum cost:


kb
ka
X
X
X
X
d(bi , aj ) .
(4.3)
argmin 
d(ai , bj ) +
i=1 bj ∈mec(ai )

i=1 aj ∈mec(bi )

Here d(ai , bj ) is the dissimilarity between clusters ai and bj .

4.3.2 Bipartite graph model
I compute a minimum-weight mixed edge cover (MEC) algorithmically in a complete bipartite graph G(A, B, E) created from a pair of sample, A = {a1 , a2 , ..., aka },
and B = {b1 , b2 , ..., bkb }. In the bipartite graph G, each cluster ai ∈ A represents a
vertex in one part and each cluster bi ∈ B from represents a vertex in the other part.
The edge set E is created by joining each pair (ai , bj ) ∈ (A × B) of vertices with an
edge of weight d(ai , bj ). Here, d(ai , bj ) denotes the dissimilarity between ai and bj
and is computed by using Mahalanobis distance from Equation 4.2.
Since low edge weight implies high similarity among vertices (clusters) I match
vertices connected by edges with small weights and leave a vertex unmatched when
it has no low-weight edge adjacent to it. In the above graph model, a mixed edge
cover (MEC) is a collection of edges EC and vertices Vum such that each vertex in
A∪B \Vum has at least one edge incident on it and Vum remains unmatched with fixed
penalty λ for each vertex. Thus, a minimum-weight MEC is an MEC that minimizes
the following objective function:

min 


X

d(ai , bj ) + λ ∗ |Vum | .

(4.4)

(ai ,bj )∈EC

According to graph-theoretic terms, an MEC is a generalization of an edge cover
represented by a subset of edges such that each vertex in the graph has at least one
edge incident on it. An edge cover again is a generalization of a matching represented
by a subset of edges such that each vertex in the graph has at most one edge incident
on it.

67
4.3.3 MEC algorithm on the bipartite graph
A mixed edge cover in G can be computed from an edge cover in a transformed
graph G0 obtained from G by introducing two new distinguished vertices a0 ∈ A and
b0 ∈ B representing two dummy clusters one in each sample. In G0 , I add an edge
{a0 , b0 } with d(a0 , b0 ) = 0, and edges {ai , b0 } for each ai ∈ A, {bi , a0 } for each bj ∈ B,
with d(ai , b0 ) = d(bj , a0 ) = λ. For each such edge {ai , b0 } (or {bj , a0 }) included in a
minimum-weight edge cover computed on G0 , I leave the ai (bj ) unmatched in a MEC
computed on G, thereby paying a price of λ for each unmatched vertex. A minimumweight edge cover in G0 can be computed in polynomial time by making a copy of the
graph and connecting each vertex to its twin in the copy by an edge with weight equal
to twice the minimum weight among original edges incident on it. A minimum-weight
perfect matching in this graph can be used to compute a minimum-weight edge cover
in the original graph [132].
Following the above discussion, a minimum-weight MEC in G can be computed
in the following step:
1. Add dummy vertices: Create a new augmented graph G0 from G by adding
two distinguished vertices a0 ∈ A and b0 ∈ B representing two dummy clusters
one in each sample. In G0 I add an edge {a0 , b0 } with d(a0 , b0 ) = 0, and edges
{ai , b0 } for each ai ∈ A, {bj , a0 } for each bj ∈ B, with d(ai , b0 ) = d(bj , a0 ) = λ.
Here λ is the penalty for leaving a vertex unmatched.
2. Duplicate Graph: Let G00 be a disjoint copy of G0 . I create a new graph Ḡ by
taking the union of G0 and G00 and adding an edge {v 0 , v 00 } connecting every
vertex v 0 in G0 with its twin v 00 in G00 . The weight of edge {v 0 , v 00 } is set to
2µ(v 0 ), where µ(v 0 ) is the minimum weight of the edges of G0 incident on v 0 .
3. Compute matching: Compute a minimum-weight perfect matching M in Ḡ.
4. Compute edgecover from matching: Obtain a minimum-weight edge cover EC 0
of G0 by replacing every edge {v 0 , v 00 } ∈ M by an edge of weight µ(v 0 ) in G0
incident on v 0 .

68

(a)

(b)

A pair of samples

G

(c)

G"

a0

0
λ

Sample A

Sample B

A

B

Sample A

Sample B

A

B

G

b0

€

€

€

(d)

Vum

(h)

Cluster matching

(g) MEC

(f)

EC"

(e)

M

Figure 4.1. Steps €
of the MEC algorithm:
(a) two FC samples
A and B,
€
€
each with three cell clusters, (b) a complete bipartite graph G is created
from A and B, (c) an augmented graph G0 is obtained by adding two
dummy clusters a0 and b0 as described in step 1 of the MEC algorithm,
(d) an identical copy of G0 is combined with it to obtain Ḡ, (e) a minimumweight perfect matching M is computed in Ḡ, (f) a minimum-weight edge
cover EC 0 in G0 is constructed after replacing each edge of M connecting
G0 and its copy with an edge of minimum weight within G0 , (g) a minimumweight MEC is computed from EC 0 by removing dummy clusters and their
adjacent edges, and finally (h) the clusters are matched across A and B.

5. Compute MEC from edge cover: Remove all edges {ai , b0 } and {bj , a0 } from
EC 0 to obtain a reduced edge cover EC in G. Put all vertices in G not covered
by EC to the set of unmatched vertices (clusters) Vum . The resulting edge cover
EC together with the set of unmatched vertices Vum is a solution to the mixed
edge cover problem in G.
I show a workflow of the MEC algorithm with two hypothetical samples A and
B each with three clusters in Figure 4.1. In this example, a single cell population
is split into two clusters in sample B requiring one-to-many matching of clusters.
Additionally a cluster in sample A remains unmatched because it does not have
any corresponding cluster in sample B. The MEC algorithm covers both cases and
therefore provides a robust solution to the population registration problem.

69
4.3.4 Proof of correctness
Lemma:

The Algorithm described above computes an optimum mixed edge

cover in G.
Proof: The correctness of the algorithm for computing the edge cover EC 0 in the
graph G0 is shown in [132]. I obtain a mixed edge cover in G by deleting, the vertices
a0 and b0 and the edges incident on these vertices in EC 0 . Let Vum be the set of the
vertices adjacent to a0 and b0 , which will be identified as unmatched vertices. Let
EC be the edges remaining from the edge cover EC 0 in the modified graph G \ Vum .
I claim that EC together with Vum is an optimal solution for the mixed edge
cover problem in G. Assume that there is an optimal solution in G consisting of
the set of unmatched vertices Vum and an edge cover EC ∗ in G \ Vum . Clearly
P
P
(ai ,bj )∈EC d(ai , bj ) =
(ai ,bj )∈EC ∗ d(ai , bj ), for otherwise one of the solutions could
be improved upon, thereby contradicting their minimality in G \ Vum respectively.
It remains to prove that there is no other MEC solution in G with a different set of
˜ together with Ṽum gives a MEC solution
unmatched vertices and smaller cost. Let EC
in G with a cost smaller than the MEC solution given by EC and Vum (Equation 4.4).
˜ together with an edge {o, a0 } or {o, b0 } for every o ∈ Ṽum and the edge
Then EC
{a0 , b0 } is an edge cover in G0 with cost smaller that the cost of EC 0 , contradicting
the optimality of EC 0 .

4.3.5 Complexity of the MEC algorithm
For a graph with n vertices and m edges, a minimum-weight edge cover can be
computed in time O(n(n + m log n)) [132]. For a pair of sample A = {a1 , a2 , ..., aka },
and B = {b1 , b2 , ..., bkb }, let k = ka + kb be the total number of clusters. By the
construction of the graph model n = O(k), m = O(k 2 ). Therefore the time complexity
of a MEC algorithm is O(k 3 log k). The number of cell clusters k is usually small (less
than 50 in typical experiments). As such, the dissimilarity between a pair of samples
can be computed in seconds on a desktop computer.

70
4.4 Properties of mixed edge cover
To understand the conditions for an unmatched cluster, let bj be the nearest
cluster in sample B from a cluster ai in sample A. Then ai is always unmatched if
d(ai , bj ) > 2λ and is never unmatched if d(ai , bj ) < λ. If 2λ < d(ai , bj ) < λ, ai will
be unmatched if and only if it is not matched to a vertex in duplicate graph during
step 3 of the algorithm.
The edges contained in a minimum-weight MEC do not create any path of length
greater than two. Hence, MEC never creates a cycle in the optimum solution. To
see this, consider an MEC solution mec consisting of an edge cover EC and a set
of unmatched vertices Vum . The graph induced by EC in G does not have a path
of three edges since the middle edge can be removed from the optimal cover, thus
reducing its weight further, contradicting the optimality of mec. Therefore, mec does
not contain a path of length greater than two. In fact, mec is a union of disjoint
“stars” (trees of height 1) where each star has no more than one vertex of degree
greater than one, preventing cycle or long chain of matched vertices. This property
allows a cluster from sample A to be matched to the corresponding but spitted set of
clusters in sample B and vice versa. However, if a cell population is split up in both
samples, the MEC algorithm is unable to match all parts across samples because this
will require a path of length greater than 2 in the MEC solution, therefore violating
the disjoint “stars” constructions. This limitation, however, cannot be solved by an
algorithm that considers only the between sample dissimilarities.

4.5 Results
4.5.1 Registering populations across samples from two healthy subjects
Data description: I register cell populations across two five-dimensional samples
collected from two healthy subjects. These two samples are part of the HD dataset
described in Section 1.6.1 where blood was collected from five healthy individuals

8

cutoff value

6
4
2
0

Number of unmatched clusters, Vum

71

0

1

2
3
4
Penalty for leaving a cluster unmatched, λ

5

6

Figure 4.2. Selecting the unmatch-penalty, λ for the HD dataset. Each
black curve plots the numbers of unmatched clusters, Vum across a pair of
HD samples for a sequence of unmatch-penalty λ in the range [0,6]. The
red curve is a smooth-average of all individual curves and represents the
general trend for the whole dataset. From the average red curve, λ = 3.5
(shown as blue dashed line) is selected as a suitable unmatch-penalty
because, at this value, the curve becomes stable and horizontal.

on different days to study natural and instrumental variations among samples. For
demonstration purpose, I randomly selected two samples from different subjects in
the HD dataset. Each sample is preprocessed and clustered independently to identify
four cell clusters. Figure 3.3 in Chapter 3 displays these clusters with a collection of
two dimensional projections.
Selecting the unmatch-penalty, λ : To determine the unmatch-penalty λ for the
HD dataset, I compute the optimum mixed edge cover (MEC) between each pair
of samples in this dataset for different choices of λ in the range [0,6]. The number
of unmatched clusters, Vum obtained by each MEC solution is plotted against the
corresponding λ value in Figure 4.2. Each black curve in Figure 4.2 represents the
the number of unmatched clusters for different choices of λ when MEC algorithm is
applied to a particular pair of samples. I have applied local polynomial regression
(loess) method to smoothen the curves. The red curve is a smooth-average of all
individual curves and represents the general trend for the whole dataset. Observe
that an increase of λ quickly decreases the size of Vum , thus allowing more clusters to

72
Sample from subject B

Sample from subject A

T cells
4

3

3

2

CD3

CD3

T cells
4

B cells

1

2

B cells

1

0

0

NK cells

−1

−1
−1

0

1

2

3

4

5

CD19

NK cells
0

1

2

3

4

CD19

Figure 4.3. Cell populations are matched by the MEC algorithm across
two representative samples in the HD dataset. In addition to showing
individual cells with dots, I draw the 95th quantile of each cell population
with a dashed ellipse. I show a pair of matched clusters in same color
and join them by a line with arrowheads. Although the cell populations
are defined in five dimensions, I show a 2-D projection for visualization
purpose.

be matched ( from Equation 4.4). From the average red curve, λ = 3.5 (shown as blue
dashed line in Figure 4.2) is selected as a suitable unmatch-penalty because, at this
value, the curve becomes stable and horizontal. Since the samples are very similar
(healthy) in this dataset, we do not expect many unmatched clusters and therefore
λ = 3.5 looks like a reasonable choice. I use λ = 3.5 for any MEC computation
between two samples in the HD dataset.
Registering populations: I now apply the MEC algorithm, with λ = 3.5, to match
cell clusters across the selected pair of samples. For visualization purpose, I project
the matched populations onto two dimensions (CD3 and CD19) in Figure 4.3. I
selected CD3 and CD19 markers for projection because they cleanly define three
functional cell subsets – T cells, B cells and Natural Killer (NK) cells. The MEC
algorithm, however, does not use these biological labels, but views each cluster as
an unlabeled distribution of cells defined only by the distribution parameters. In
Figure 4.3, I show a pair of matched clusters in same color and join them by a line
with arrowheads. The matched clusters represent functionally equivalent cell subsets

73
and therefore confirm that the algorithm is actually matching biologically equivalent
cell populations across samples. Additionally the proportion of lymphocytes in each
clusters matches closely across the samples: T cell (71.1%, 75.4%), B cells (18.4%,
15.1%) and NK cells (10.5%, 9.5%). The proportions closely follow the lymphocyte
proportions within a healthy immune system described by Berrington et al. [140] and
further validate the effectiveness of the clustering and matching algorithms. Note
that, cell clusters are actually defined in five dimensions (Fig. 3.3), but I show a
simplified 2-D projection for visualization purpose.
In Figure 4.3, it may seem trivial to match these three clusters across samples
simply by visual inspection. However, the clusters are defined in five dimensions and
therefore it is impractical to visually match the clusters. For example, we are unable
to distinguish helper and cytotoxic T cell in the 2-D scatter plot shown in Figure
4.3 because we need additional set of markers (CD4 and CD8) to differentiate them
from one another. Furthermore, the matching algorithm uses statistical parameters of
clusters to compute their dissimilarity, which is not easy to perceive by visualization.
The MEC algorithm is completely unsupervised and matches clusters solely based on
their statistical parameters without using the biological labels (e.g., T cell, B cells
etc.) of the clusters. However, if the cluster labels are available for a sample, then
the algorithm has the ability to label another sample based on the matching pattern,
thus solving the cluster labeling problem.

4.5.2 Registering populations before and after stimulating T cells
Data description: As a second example, I use MEC algorithm to register cell populations across two four-dimensional samples collected before and after stimulating T
cells in whole human blood. These two samples are part of the TCP dataset described
in Section 1.6.2 where whole blood was collected from 29 subjects and stained using
labeled antibodies against CD4, CD45RA, SLP-76, and ZAP-70 protein markers before and five minutes after stimulation with an anti-CD3 antibody. The downstream

74

2.5

2.5

2.0

2.0
1.5

CD45RA

CD45RA

1.5
1.0

1.0

0.5
0.0
2.5

0.5
0.0
2.5

1.5

2.0
1.5

1.0

1.5

2.0
1.5

1.0
CD4

0.5

0.5

1.0
1.0

SLP76

0.0 0.0

(a) Before Stimulation

CD4

0.5

0.5

SLP76

0.0 0.0

(b) After Stimulation

Figure 4.4. Registering (matching) populations by the MEC algorithm
across a pair of samples before and after stimulating T cells with an antiCD3 antibody. Matched clusters are marked with same color and are
joined them by a line with arrowheads. The cell populations are defined
in four dimensions, but I show a 3-D projection for visualization purpose.

phosphorylation event caused by the stimulation increases the levels of SLP-76, and
ZAP-70 proteins in different T cell subsets [44].
I randomly selected a pair of samples from the same subject before and after the
stimulation. Each sample is clustered independently to obtain four cell clusters with
the following expression profiles: (a) CD4+ CD45RAlow , (b) CD4+ CD45RAhigh , (c)
CD4− CD45RAhigh , and (d) CD4− CD45RAlow . (Recall that ‘+’ and ‘high’ indicate
higher abundances of a marker, and ‘−’ and ‘low’ indicate lower levels of it.)
Registering populations: I select unmatch-penalty λ for the TCP dataset following
the similar procedure discussed in Section 4.5.1. The MEC algorithm is then used to
register cell population across the selected pair of samples. For visualization purpose,
I show the matching solution in three-dimensional projections (CD4, CD45RA and
SLP-76) in Fig. 4.4, where matched clusters are shown in same colors. By comparing
the matched clusters in Fig. 4.4, we observe an increased level of SLP-76 proteins after
the stimulation (and ZAP-70, although this is not included in the Fig.). The mapping
of clusters across pre- and post-stimulation samples can assess the population-specific
effects of the stimulation experiment.

Myeloid cells

Lymphoid blasts

Myeloid blasts

1.5%
0.2

0.4

0.6

CD45−ECD (log)

0.8

AML

0.4

28%

0.2

0.4

SS (log)

0.6

Normal

Monocytes

0.6

0.8

Lymphocytes

0.2

SS (log)

0.8

75

0.2

0.4

0.6

0.8

CD45−ECD (log)

Figure 4.5. Registering different clusters between normal and AML samples. Matched clusters are marked with same color. The proportion of
myeloid blasts (shown in red) increases significantly in the AML sample.

4.5.3 Registering population in diagnosing Acute Myeloid Leukemia (AML)
Acute Myeloid Leukemia (AML) is often diagnosed by abnormal increase (greater
than 20% of the white blood cells) of premature myeloid blast cells [141,142]. In flow
cytometry, the myeloid blasts can be identified in SS vs. CD45 plot. Here, the side
scatter (SS) measures the granularity of cells and CD45 is a marker for the leukocytes.
To show the first step of AML diagnosis, I use a normal and an AML samples from
the AML dataset [32]. I only consider SS channel and CD45 marker for this analysis.
I cluster the healthy and the AML samples with the k-means algorithm and obtain
five clusters in each sample. The five clusters represent lymphocytes, lymphoid blasts,
myeloid cells, myeloid blasts, and monocytes. The myeloid blasts are identified by
medium side scatter and medium CD45 expressions. Next, I match cell clusters in
order to detect same cell types between the samples. The result is illustrated in
Fig. 4.5, where a pair of matched clusters is shown in same color. After registering
clusters, we observe that the fraction of myeloid blasts (shown in red) increases from
1.5% in healthy sample to 28% in the AML sample. This observation confirms that

76
the second sample has Acute Myeloid Leukemia. The mixed edge cover algorithm is
able to detect abnormally behaving cell populations indicative AML and therefore,
can be used in automated diagnosis of this cancer.

4.6 Conclusions and future work
Population registration or labeling is a fundamental problem in flow cytometry
since it is used to evaluate population level differences across biological conditions.
To solve this problem computationally, I have developed a robust mixed edge cover
(MEC) algorithm that registers high-dimensional clusters across a pair of FC samples.
The MEC algorithm uses a robust graph-theoretic framework to match a cluster from
a sample to zero or more clusters in another sample and thus solves the problem of
missing or splitting clusters. I demonstrated, with three representative datasets, that
this algorithm correctly matches phenotypically similar clusters despite heterogeneity
across samples. Given a sample with known cluster labels, the MEC algorithm labels
clusters from another sample, thus solving the cluster labeling problem.
Beside matching and labeling populations, an optimal MEC solution computes
a combinatorial dissimilarity between a pair of FC samples. This between-sample
dissimilarity works as a building block of the meta-clustering and classification approaches discussed in Chapter 5 and Chapter 6.
MEC algorithm has three limitations. First, it does not use the proportion of
cells in the populations while matching them across samples. It has been observed
that samples from same biological status approximately preserve the proportion of
cells in different populations (e.g., see the discussion in Section 4.5.1 and also by
Pyne et al. [27]). Hence, cell proportions can be used directly in Eq. 4.4 to provide a
second level of verification. However, care must be taken when using cell proportion
to match populations from different disease status. For example, the proportion
of CD4+ cells reduces significantly after HIV infection, therefore this proportion of
CD4+ cells will not match between healthy subject and HIV patient. Second, MEC

77
algorithm can match populations more accurately if it uses the relative arrangement
of populations within a sample. In this approach, each sample is modeled by a
network of populations and two such networks are aligned to match populations
across samples. This approach has been extensively used to align protein and gene
regulatory networks [143, 144]. Aligning two networks, however, is an NP-complete
problem; therefore, approximation algorithms are often used to align large networks.
Finally, the dissimilarity measure given by the MEC solution is not a metric since it
fails to satisfy triangle inequality. Distance metrics are especially useful for creating
hierarchical organization of samples, as will be discussed in next Chapter 5.
In current work, I am improving the MEC algorithm by addressing the limitations
discussed in the previous paragraph. In particular, I am developing a between-sample
distance metric similar in spirit of the earth mover’s distance [133, 139] such that
the combinatorial dissimilarity measure becomes a metric, as well as remains robust
similar to the MEC.

78

5 META-CLUSTERS AND CLASS TEMPLATES
5.1 Introduction
Consider a collection of flow cytometry samples belonging to a few representative classes with each class of samples indicating the same biological status (e.g., a
disease). I describe an algorithm that builds a template for each class of samples
by emphasizing the common properties of the class while omitting sample-specific
details [23,27,36]. Samples within a class usually have shared populations expressing
similar phenotypes, whereas samples from different classes contain some unrelated
populations. Cell populations with similar phenotypes in different samples of a class
can be combined into a meta-population (also called a meta-cluster ) representing
a generic phenotype shared by the populations. A set of relatively homogeneous
meta-clusters forms the core pattern of a class of samples and groups together into a
prototypic template. I summarize the concepts of meta-cluster and template in Table
5.1 and in Figure 5.1(a).
I have developed a hierarchical matching-and-merging (HM&M) algorithm for constructing templates from a collection of samples. The algorithm repeatedly merges
the least dissimilar (most similar) pair of samples not already included in a template.
The dissimilarity between a pair of samples is computed by the cost of an optimal
mixed edge cover (MEC) solution discussed in Chapter 4. Towards this end, I assume that samples belonging to a particular class have smaller dissimilarity among
themselves than samples from other classes. The HM&M algorithm builds a binary
template-tree representing the hierarchical relationships among the samples. A leaf
node of the template-tree represents a sample and an internal (non-leaf) node represents a template created from the samples. Figure 5.1(b) shows an example of a
template-tree created from four hypothetical samples, S1 , S2 , S3 , and S4 . An internal

79
Table 5.1
Summary of concepts – cell population, sample, meta-cluster, and template – used in this chapter.
Terms

Meaning

Cell population

a group of cells expressing similar features, e.g., helper T cells,

(cell cluster)

B cells, etc.

Sample

a collection of cell populations within a single biological sample

Meta-cluster

a set of biologically similar cell clusters from different samples

Template

a collection of meta-clusters from samples of same class

node in the template-tree is created by matching similar cell clusters across the left
and right children and merging the matched clusters into meta-clusters. Fig. 5.1(c)
illustrates the creations of the internal node T (S3 , S4 ) in Fig. 5.1(b) by matching clusters across samples S3 and S4 . The root of the template-tree defines a class-template
when all samples in the leaf nodes belong to the same biological class, and otherwise,
the tree can be cut at an appropriate height to discover multiple class templates.
Just as a sample is characterized by a mixture of cell populations, a template
is characterized by a finite mixture of homogeneous meta-clusters. The homogeneity of meta-clusters needs to be evaluated statistically since there is no accepted
method for evaluating the biological homogeneity of clusters. However, conventional
methods for statistical significance testing (e.g., F-test or paired t-test) have a high
probability of making a Type I error when used to evaluate the homogeneity of a
meta-cluster because clusters in an FC sample are typically large [145, 146]. Instead,
the ratio of between-cluster to within-cluster variances, within a multivariate analysis
of variance (MANOVA) model, can evaluate the homogeneity of a meta-cluster more
effectively [147]. Based on a baseline experiment with a healthy dataset, I discuss a
tolerable limit for the between-cluster variance in a homogeneous meta-cluster.
The ability to systematically characterize a class of multi-dimensional samples
with a well-defined template is useful in various applications of flow cytometry. In

80
(a) Terminology
A meta-cluster

(b) Template tree

(c) One phase of the
HM&M algorithm

T(S1, S2, S3, S4)

A cluster

A template
T(S1, S2)

T(S3, S4)

Matched clusters
are merged to get
meta-clusters

A cluster
(population)

Cluster matching
by MEC algorithm

A cell
A sample

S1

S2

S3

S4

S3

S4

Figure 5.1. (a) The concepts of sample, cluster, template, and metacluster are illustrated graphically. Cells are denoted with dots, clusters
with solid ellipses and meta-clusters with dashed ellipses. (b) An example
of a hierarchical template-tree created from four hypothetical samples
S1 , S2 , S3 and S4 . A leaf node of the template-tree represents a sample
and an internal (non-leaf) node represents a template created from its
children in the tree. (c) One step of the HM&M algorithm creating a
template T (S3 , S4 ) from a pair of samples S3 and S4 . The algorithm first
matches clusters across S3 and S4 by the mixed edge cover algorithm and
then merges the matched clusters to construct new meta-clusters.

addition to providing a cogent description of the core population structure that is
shared among samples within a class, the templates also allow an objective way of
assessing the overall differences in those structures across classes. I demonstrate the
application of templates with a healthy donor (HD) dataset and a T cell phosphorylation (TCP) dataset. For the HD dataset, the algorithm is able to construct five
well-separated templates for five healthy subjects, despite different sources of withinsubject variations. For the TCP dataset, the algorithm creates pre- and a poststimulation templates from 29 pairs of samples collected before and after stimulating
blood cells with an anti-CD3 antibody. By matching meta-clusters across templates,
we can better assess the population-specific effects of the stimulation experiment.
Related work: Several researchers have used the concepts of templates and metaclusters to summarize collection of flow cytometry samples [23, 27, 39]. FLAME,

81
proposed by Pyne et al. [27], pools cluster medoids from a class of samples and
applies a second stage of clustering on the medoids to construct the global metaclusters. flowTrans, developed by Finak et al. [23], starts with seed meta-clusters
and assigns each cluster to a meta-cluster to which it is most similar. The HM&M
algorithm is significantly different from both FLAME and flowTrans in several ways.
First, FLAME and flowTrans both build a single template from samples of the same
class. Therefore, these algorithms need to know the class label of each sample, which
is often unknown in practice. In contrast, the HM&M algorithm is able to identify
templates as the roots of well-separated branches of a template-tree in an unsupervised
manner. This approach also permits multiple templates representing different subclasses within a single class, and therefore, is more flexible to capture sample diversity.
Second, instead of clustering population centers, the HM&M algorithm optimally
matches populations across samples and then merges the matched clusters into metaclusters (see Figure 5.1(c) for an example). Like FLAME, but unlike flowTrans,
this algorithm allows a cluster forming a self-contained meta-cluster by itself when
the cluster is significantly different from all other clusters. Finally, the hierarchical
organization of samples shown in Fig. 5.1(b) provides additional flexibility in creating
multi-layer templates, classifying samples, and updating templates dynamically.
The rest of the chapter is organized as follows. In Section 5.2, I describe a hierarchical algorithm for creating templates from a collection of samples. Section 5.3
discusses a statistical framework for analyzing the homogeneity of meta-clusters. I
demonstrate the application of templates with two representative FC datasets in Section 5.4. I finish this chapter in Section 5.5 with concluding remarks.

5.2 An algorithm for constructing templates
5.2.1 Dissimilarity between samples or templates
The template construction algorithm characterizes both a sample and a template
with a finite mixture of multivariate normal distributions each component of which

82
is a cluster or a meta-cluster. To compute the dissimilarity between a pair of samples
or templates, I create a complete bipartite graph with the clusters (meta-clusters) in
each sample (template) as vertices, and each edge is weighted by the Mahalanobis
distance between its endpoints. The cost of an optimal mixed edge cover (MEC) in
the bipartite graph gives the dissimilarity between the samples (templates). This dissimilarity measure is similar in spirit with the R-metric, transfer distance or partition
distance that computes the minimum number of augmentations and removals of cells
needed to transform one partition into another [121–123]. However, the partition
distance can only compare two partitions of the same sample, whereas MEC based
dissimilarity can work with partitions from the same sample, or from two different
samples. Partition distance matches a cluster to at most one cluster, while MEC is
able to match a cluster to zero or more clusters. Therefore, the latter approach is
more robust in the presence of missing or splitting cell populations.

5.2.2 The hierarchical matching-and-merging (HM&M) algorithm
Consider a collection of N flow cytometry samples {S1 , S2 , ..., SN }. Each sample
is clustered independently to identify phenotypically distinct cell populations. The
HM&M algorithm organizes the samples into a template-tree data structure as was
described in Fig. 5.1. Each node vi in the template-tree represents either a sample
(leaf node) or a template (internal node). Let vi consist of ki clusters or meta-clusters,
vi = {ci1 , ci2 , . . ., ciki }. vi is called an “orphan” if it does not have a parent in the
template-tree. At each step, the HM&M algorithm identifies the most similar pair of
orphan nodes and merges them into a new node denoting a template of the merged
nodes. This process continues until a single orphan node (root) remains. The HM&M
algorithm can be described with the following three steps.
1. Initialization: Create a node vi for each of the N samples Si . Define the set of
orphan nodes, Orphan = {v1 , v2 , ..., vN }. Repeat the following matching and merging
steps until a single orphan node remains.

83
2. Matching: Compute the dissimilarity D(vi , vj ) between every pair of nodes vi
and vj in the current Orphan set by the cost of an optimal mixed edge cover solution.
3. Merging: Find a pair of orphan nodes (vi , vj ) with minimum dissimilarity
D(vi , vj ) and merge them to create a new node vl . Let mec be a function denoting
the mapping of clusters from vi to vj . That is, if cix ∈ vi is matched to cjy ∈ vj ,
then cjy = mec(cix ), where 1 ≤ x ≤ ki and 1 ≤ y ≤ kj . Create a new meta-cluster clz
from each set of matched clusters, i.e., clz = {cix ∪ mec(cix )}. Let kl be the number
of new meta-clusters created above. Then the new node vl is created as a collection
of these newly created meta-clusters, i.e., vl = {cl1 , cl2 , ..., clkl }. The distribution parameters, (µlz , Σlz ), of each of the newly formed meta-clusters clz are estimated by the
Expectation-Maximization (EM) algorithm. The height of vl is set to D(vi , vj ). The
node vl becomes the parent of vi and vj , and the set of orphan nodes is updated to
orphan = orphan \ {vi , vj } ∪ {vl }. If there are orphan nodes remaining, we return to
the matching step, and otherwise, we terminate.

5.2.3 Creating templates from a template-tree
Let the samples {S1 , S2 , ..., SN } belong to M disjoint classes where M may or may
not be known. Then, the following three cases are considered to create templates from
the template-tree.
(a) Class label of each sample is known: A template-forest with M disjoint trees is
constructed where each tree includes samples belonging to the same class. The roots
of the M trees represent the templates of the M classes of samples.
(b) M is known but the class label of each sample is unknown: A single templatetree is created from N samples. Then, the tree is cut at a suitable height so that M
disjoint subtrees are produced. The root of each subtree represents a template of the
samples placed in the leaves of that subtree.
(c) Both M and the class labels of the samples are unknown: A single templatetree is created from N samples. The templates are created from the roots of the well-

84
separated branches of the template-tree such that within-class variations (heights of
the subtrees) are small relative to the between-class variations (heights of the ancestors of the subtrees). In this context, the HM&M algorithm is similar to the spirit
of the hierarchical clustering algorithm UPGMA [33, 95], with significant differences
in the distance computation and management of the internal nodes. Assume that
M well-separated templates are produced from the template tree. Then, N samples are predicted to be generated from these M classes. This approach leads to an
unsupervised classification of samples discussed in the next chapter.

5.2.4 Computational complexity
The HM&M algorithm requires O(N 2 ) dissimilarity computations and O(N )
merge operations for creating a template from a collection of N samples. Let k
be the maximum number of clusters or meta-clusters in any of the nodes of the
template-tree. Then a dissimilarity computation takes O(k 3 log k) time whereas the
merge operation takes O(k) time when distribution parameters of the meta-clusters
are computed by maximum likelihood estimation. Hence, the time complexity of the
algorithm is O(N 2 k 3 log k), which reduces to O(N 2 ) for bounded k.

5.3 The homogeneity of meta-clusters and templates
A template summarizes the common features of a group of similar samples. These
common features are captured by a collection of meta-clusters (meta-populations)
formed by combining cell clusters expressing similar phenotypes in different samples.
If a template correctly represents a collection of samples with the same biological
status, each meta-cluster would contain a homogeneous collection of cell clusters with
similar phenotypes. However, there is no standard method for computing biological
homogeneity of a collection of cell populations. Therefore, I consider a statistical
procedure, in a Multivariate Analysis of Variance (MANOVA) model, to evaluate

85
the homogeneity of meta-clusters. For simplicity, I first discuss the homogeneity of
one-dimensional meta-clusters, followed by the multi-dimensional case.

5.3.1 Analyzing homogeneity of a one-dimensional meta-cluster
Let C be a meta-cluster consisting of k one-dimensional (1-D) clusters c1 , c2 , ..ck
defined within a single marker/channel. A 1-D cluster usually represents a distribution of cells with a marker either being expressed or not being expressed. For
example, CD3+ and CD3− represent two 1-D clusters in CD3 channel, with the former expressing high levels of CD3 marker and the latter expressing low levels of it.
CD3 is a marker of T lymphocytes, and therefore, a meta-cluster denoting T cells is
biologically homogeneous if it contains only CD3+ cell clusters.
Let the ith cluster ci ∈ C contain ni cells and be normally distributed with mean µi
and variance σi2 . The normality assumption was justified in Chapter 2, where I showed
that cell clusters usually follow normal distribution after stabilizing their variances.
In spite of variance stabilization, I still use σi2 to denote the variance of the ith cluster
(instead of using a common variance) to emphasize that the variances can not be
made exactly equal by the variance stabilization process. The mean and variance
of each cluster are estimated by the E-M algorithm (alternatively, with an unbiased
maximum likelihood estimator) after the clusters are identified as was discussed in
Chapter 3.
Let the entire meta-cluster C contain n cells in total with mean µ. The separation
of a cluster ci from the meta-cluster C can be approximated by the squared deviation
of their centers (µi − µ)2 . In behavioral and biological sciences, (µi − µ)2 is generally
called the “effect-size” because it indicates the effect of the ith treatment [147]. In
the meta-clustering context, it denotes the “cluster separation” of the ith cluster from
the meta-cluster center. The between-cluster variation σb2 of a meta-cluster is then
computed with the average separation of the clusters:
σb2 =

k
1 X
(ni − 1)(µi − µ)2 .
n − k i=1

(5.1)

86
The within-cluster variance, σw2 , is estimated by a weighted average of all individual
cluster variances (pooled variance):
σw2

k
1 X
=
(ni − 1) σi2 .
n − k i=1

(5.2)

I calculate the “Relative Cluster Separation” (φ) after dividing σb2 by σw2 and taking
a square root of the ratio:
φ=

σb
.
σw

(5.3)

Note that the square of the above ratio, φ2 , is also known as the signal-to-noise ratio
(SNR) [148] or Cohen’s f 2 statistics [147]. φ is a dimensionless number and can take
values between zero (when the clusters collapse into a single point) and an indefinitely
large number (when the clusters become further apart relative to σw ). For example,
φ = 0.1 conveys that the average separation among clusters (σb ) is one-tenth of
their (pooled) standard deviation (σw ), indicating a significant overlap (homogeneity)
among the clusters. In contrasts, φ = 2 conveys a relatively inhomogeneous group of
clusters because the average between-cluster separation is twice as large as the withincluster standard deviation. A meta-cluster is considered relatively homogeneous when
φ is small relative to a predefined threshold. For FC data, this threshold can be set to
one, i.e., a collection of clusters is relatively homogeneous when φ < 1, and otherwise,
inhomogeneous. I justify this choice of threshold in Section 5.4.1 with a healthy
dataset. A guideline, although controversial, for setting the threshold at three levels
– .1 for small, .25 for medium and, .4 for large effect – is suggested by Cohen for
behavioral studies [147]. However, I found these levels too small for relatively large
cell clusters observed in FC samples.
I compute the uncertainty associated with φ by computing the confidence interval
around it. Assume, for simplicity, that the clusters within a meta-cluster have equal
sizes n0 ( here, n0 = n/k, where n is the total size of the meta-cluster and k is the
number of cluster in the meta-cluster). Then the confidence interval for φ is calculated

87
from the confidence interval of the non-central F distribution whose non-centrality
parameter λ is calculated with:
λ=

n0 σb2
= n0 φ2 .
σw2

(5.4)

Let [λL , λU ] be the 100(1−α)% confidence interval for λ, then the following equations
hold:
p[λL ≤ λ ≤ λU ] = 1 − α
"r
r #
λL
λU
p
= 1 − α.
≤φ≤
0
n
n0
Hence, the confidence interval [φL , φU ] for φ is calculated with

(5.5)
(5.6)
q

λL
,
n0

q

λU
n0


[146,149].

Note that I employ φ to evaluate the homogeneity of a meta-cluster obtained from
any meta-clustering algorithm. However, a meta-clustering algorithm can directly
minimize φ and obtains the “optimum” homogeneity of meta-clusters. This approach
is very similar to Fisher’s linear discriminant analysis that maximizes the separation
between clusters relative to within-cluster variations [90]. I leave this optimization
approach as a future work and will not discuss it any further.

5.3.2 Comparison with null hypothesis based significance testing
Consider a meta-cluster consisting of k cell clusters, where the ith cluster contains
ni cell with mean µi . To evaluate the homogeneity of this meta-cluster in an Analysis
of Variance (ANOVA) model, we can consider a null hypothesis of no difference among
cluster centers:
H0 : µ1 = µ2 = · · · = µk .

(5.7)

The normality and homoskedasticity assumptions required for the ANOVA model are
approximately satisfied by the variance stabilization step discussed in Chapter 2. The
validity of the above null hypothesis can be tested by an F-test that measures the
following F-statistics:
1
k−1

Fobs =

k
P

ni (µi − µ)2

i=1

σw2

,

(5.8)

88
where, µ is the mean of the entire meta-cluster and σw2 is the pooled variance of
the clusters as defined in Eq. 5.2. The p-value of the F-test is computed with the
probability of obtaining a test statistic at least as extreme as Fobs assuming that the
null hypothesis is true, i.e., we compute P (F ≥ Fobs ), where F is a random variable
following F-distribution with k − 1 and n − k degrees of freedom. In a meta-cluster
analysis, p-value evaluates whether the difference among cluster locations can occur
by chance. The null hypothesis H0 is rejected when the p-value is less than a certain
significance level (often 0.05 or 0.01). Hence, we can declare a meta-cluster to be
inhomogeneous (H0 is rejected) when the p-value of the F-test is less the significance
level, and otherwise, declare it to be homogeneous (H0 in not rejected).
The F-test depends on the size of clusters because the cluster size (ni ) appears on
the numerator of Fobs in Eq. 5.8. In the Null Hypothesis based Significance Testing
(NHST) framework, large clusters produce high Fobs (low p-value of the F-test) and
therefore, tend to declare a meta-cluster to be inhomogeneous even though the average
cluster-separation is relatively small. As a matter of fact, given sufficiently large
cluster sizes, an F-test always rejects H0 unless the locations of the clusters collapse
at a single point, which is extremely unlikely in practice. In flow cytometry, the
number of cells in a cluster is typically large, often in the range of tens of thousands
cells. Hence, NHST has a high probability of making a Type I error, even at a very low
alpha such as at .001, and incorrectly declares a meta-cluster inhomogeneous when
the cluster sizes are large. In contrast to the F-test, the relative cluster separation (φ)
does not depend on the cluster sizes and is therefore more applicable to meta-cluster
analysis in flow cytometry.
To see the relationship between φ and the paired t-test, consider a meta-cluster
consisting of two equal-size (n0 ) clusters, with means µ1 and µ2 and a common variance
σ 2 . In this case, Eq. 5.3 simplifies to
φ=

1
|µ
2 1

− µ2 |
d
= ,
σ
2

(5.9)

89
where d is the standardized mean difference between two clusters, also known as
Cohen’s d [147]. In this settings, a two-group t-test statistics (tobs ) is computed by
r
n0 µ1 − µ2
·
.
(5.10)
tobs =
2
σ
Similar to Fobs in Eq. 5.8, tobs depends on the cluster sizes. Consequently, the t-test
can also report a small difference to be highly significant when the cluster sizes are
large relative to the within-cluster variance. Therefore, φ can also be used to assess
the separation of a pair of clusters instead of traditional t-test.

5.3.3 Analyzing homogeneity of high-dimensional meta-clusters
I analyze the homogeneity of high-dimensional meta-clusters in a fixed-effect Multivariate Analysis of Variance (MANOVA) model [150]. As before, let C be a pdimensional meta-cluster consisting of k clusters, c1 , c2 , ..ck , with the ith cluster ci
P
containing ni cells and the size of the entire meta-cluster to be n = ki=1 ni . Assume that the ith cluster ci is modeled by a multivariate normal distribution with a
p-dimensional mean vector µi and a p×p covariance matrix Σi . The mean vector µ of
P
the entire meta-cluster C is estimated by n1 ki=1 ni µi . Similar to the one-dimensional
setting, I compute the within-cluster covariance matrix, Σw , and the between-cluster
covariance matrix, Σb , as follows:
Σw =

k
1 X
(ni − 1)Σi
n − k i=1

k
1 X
(ni − 1)(µi − µ)(µi − µ)| .
Σb =
n − k i=1

(5.11)

(5.12)

The relative cluster separation, φ, in multidimensional setting is then computed with:
r
1
trace(Σ−1
(5.13)
φ=
w Σb ).
p
In MANOVA, trace(Σ−1
w Σb ) is known as the Lawley-Hotelling statistics [150–152]
and is computed by the summation of the eigenvalues of Σ−1
w Σb . I divide the LawleyHotelling statistics by p so that φ becomes independent of the dimensionality and

90
take a square root of it to keep it in the original unit of measurement. Similar to the
univariate case, φ < 1 denotes that the between-cluster variation is less than naturally
occurring within-cluster variation, and therefore, the meta-cluster can be considered
homogeneous. As pointed out by Ito et al. [153, p. 75-78], φ is a robust estimator of
the homogeneity of meta-clusters even in the presence of limited heteroskedasticity
of covariances in large clusters. Therefore, this measure can be applied to analyze
homogeneity of heteroskedastic clusters as well.
In the multi-dimensional setting, computing an exact confidence interval around
φ is difficult because the exact distribution of the Lawley-Hotelling statistics is not
known for general k and p. According to the discussion in [152, 154, 155], I approximatethe distribution with a non-central high-dimensional F distribution with
degrees of freedom a and b and the non-centrality parameter, λ, where a = p(k − 1),
b = p(n − k − p − 1) + 2, and λ = φ2 (a + b + 1). The confidence interval [φL , φU ]
q
q
λL
λU
around φ is therefore computed with [ a+b+1 , a+b+1
], where [λL , λU ] is the confidence interval of the non-centrality parameter, λ. I calculate the confidence interval
for λ by using the R package MBESS [156]. Note that Tg2 = (n − k)trace(Σ−1
w Σb ) is
Hotelling’s generalized T 2 statistics [150–152] and is equivalent to the F statistics in
the univariate case. Similar to the univariate case, Tg2 also depends on cluster sizes
and has a high probability of making a Type I error by declaring trivial differences
as statistically significant when cluster sizes are large.

5.4 Results
5.4.1 Creating templates from healthy samples
Data description: The healthy donor (HD) dataset consists of 65 samples from five
healthy individuals who donated blood on different days. Each sample was divided
into five replicates and each replicate was stained using labeled antibodies against
CD45, CD3, CD4, CD8, and CD19 protein markers. Section 1.6.1 provides a detail

91

Figure 5.2. (a) The template-tree created by the HM&M algorithm from
all samples of the HD dataset. Leaves of the dendrogram denote samples
from five healthy individuals. An internal node represents a template and
the height of an internal node measures the dissimilarity between its left
and right children. The sample-specific subtrees are drawn in different
colors. (b) Bivariate projections of the combined healthy template (the
root of the tree in Subfig. (a)) are drawn in terms of the meta-clusters.
Here, each meta-cluster is represented by a homogeneous collection of cell
clusters that are drawn with the 95th quantile contour lines. Clusters
participating in a meta-cluster are drawn in same color.

description about this dataset. Each sample of the HD dataset was preprocessed,
variance stabilized, and clustered to identify cell populations (see Fig. 3.3).
Creating healthy templates: Figure 5.2(a) shows the template-tree created from
the HD dataset. A leaf node of the tree denotes a healthy sample, and an internal
node represents a template created from samples placed in the underlying subtree.
The height of an internal node measures the dissimilarity between its left and right
children. We observe that 65 samples from the five healthy subjects are organized
into five well-separated branches shown in five different colors in Fig. 5.2(a). From
the roots of these five subtrees, we can construct five subject-specific templates, e.g.,
TA represents a template created from 15 samples from subject A . In this dataset,

92
the variations within a subject-specific template arise from the environmental impact
on individual immune system on different days and the technical variation in flow
cytometry sample preparation and measurement. By contrast, the between-subject
variations arise from the natural biological variations among healthy subjects. In this
dataset, we observe more natural between-subject variations than the temporal and
instrumental variations. Hence, samples from the five subjects create concise and well
separated templates representing immune profiles for different healthy individuals.
The HD dataset includes three sources of variations – the technical, day-to-day
within-subject, and between-subject variations. The template-tree captures these
multi-level variations with different internal nodes that can be used as multi-layer
templates. In the lower level, a day specific template is constructed from five replicates
of a sample collected on a particular day from a subject. In the middle level, samples
from a subject collected on different days create a subject-specific template (the roots
of colored subtrees in Fig. 5.2(a)). Finally, in the top level, the root of the whole tree
represents a combined template representing a healthy immune profile of these five
subjects. This multi-level construction is especially useful to design a multi-level
sample classification framework, which is the topic of the next chapter.
Meta-clusters in the healthy template: The template created from the HD dataset
(the root of the tree in Fig. 5.2(a)) represents a healthy immune profile of the five
subjects. This template consists of four meta-clusters denoting four biologically distinct cell sub-types within lymphocytes (we have isolated lymphocytes on the scatter channels in the pre-processing steps). Each meta-cluster is a collection of biologically equivalent cell populations from different samples. Figure 5.2(b) shows
2-D projections of these meta-clusters in terms of the participating clusters. The
95th quantiles of the clusters within each meta-cluster are shown in same color
denoting (1) green: CD8+ T cells (CD45+ CD3+ CD8+ ), (2) black: CD4+ T cells
(CD45+ CD3+ CD4+ ), (3) blue: B cells (CD45+ CD3− CD19+ ), and (4) red: natural
killer cells (CD45+ CD3− CD19− ). These meta-clusters represents core population
pattern of healthy lymphocytes excluding the subject-specific variations.

93

1.00

CD4+T cells

NK cells

B cells

CD8+Tcells

RCS (φ)

0.75

Avg. RCS of
meta-clusters in
samples from:

0.50

Day-specific
templates

0.25

Subject-specific
templates
Healthy
template

0.00

Grouping of Samples

Figure 5.3. The homogeneity (Relative Cluster Separation, φ) of four
healthy meta-clusters shown in different panels. The meta-clusters are
created from three different groupings of the healthy samples shown in
different colors.

Homogeneity of meta-clusters: How homogeneous are the meta-clusters contained
in different templates of the HD dataset? Here, I discuss the homogeneity of three
levels of templates: (a) the healthy template created from all 65 samples, (b) 5 subjectspecific templates, each of which is created from samples from a subject, and (c)
13 day-specific templates, each of which is created from five replicates of a sample
collected on the same day from a subject. Every template consists of four metaclusters similar to the healthy template described in Fig. 5.2(b). We can evaluate the
homogeneity of the high-dimensional meta-clusters in each template with the Relative
Cluster Separation (RCS), φ, as discussed in Section 5.3.3.
Fig. 5.3 shows the RCS (φ) of four meta-clusters (different panels) denoting four
subtypes of cells across three groups of templates (different colors). For the subjectspecific and day-specific templates, I computed the the average RCS of the metaclusters in each group of templates. Recall that a high value of φ indicates low
homogeneity (high inhomogeneity) of a meta-cluster and vice versa. We observe, in
each panel of Fig. 5.3, that a meta-cluster becomes increasingly inhomogeneous (i.e.,
φ decreases) as we increase variations from different sources. This is expected because
variations in data (even though from natural sources) reduce the uniformity of the cell
populations. However, we do not expect any biologically significant variation within
a meta-cluster (denoting a cell-type) because the observed variations are originated
from natural sources among healthy individual. The highest value of φ is less than

94
one for any meta-cluster in Fig. 5.3. Therefore, we consider a meta-cluster to be
biologically homogeneous when φ < 1. That is, a meta-cluster is homogeneous when
the between-cluster variation is less then the pooled within-cluster variation. This
assertion is satisfied by the healthy meta-clusters, as expected, because all samples
are from the same biological status.
The threshold for φ can be adjusted for a biological experiment depending on the
natural variability expected in the experimental condition. Therefore, it is advisable
to run a pilot study similar to the HD dataset to determine baseline/trivial homogeneity measurements, which can subsequently be used to assess biologically significant
variations across different classes of samples.

5.4.2 Creating templates from the TCP dataset
Data description: T cell phosphorylation (TCP) dataset was originally generated
by Maier et al. [44] to study the effect of phosphorylation upon stimulating blood
with anti-CD3 antibody. The abundance of four protein markers (CD4, CD45RA,
SLP-76, and ZAP-70) was measured before and five minutes after stimulating whole
blood with an anti-CD3 antibody [44]. I reanalyzed 29 pairs of samples of this dataset
to demonstrated the creation of templates and the detection of general effect of stimulation at the meta-cluster level. Section 1.6.2 provides a detail description about this
dataset. Each of the 58 samples in the TCP dataset was preprocessed and clustered
independently to identify cell populations (Section 3.5.2).
General effects of stimulation on phosphorylation responses: During the stimulation, anti-CD3 antibody binds with T cell receptors (TCR) and activates the T
cells, initiating the adaptive immune response. The binding with TCR induces dramatic changes in gene expression and cell morphology, and induces the formation of
a phosphorylation-dependent signaling network via multi-protein complexes. ZAP-70
is a kinase that phosphorylates tyrosine in a trans-membrane protein called LAT, and
LAT and SLP-76 are part of a platform that assembles the signaling proteins [53].

95
Previous studies have shown that different T cell subsets (naive, memory, effector) display different phosphorylation responses upon stimulation [44, 157–159]. In
these studies, each sample was gated to identify cell populations of interest, and
each pair of samples – before and after stimulation – were compared to detect the
phosphorylation responses. However, Maier et al. [44] reported that the autoimmune
disease-associated allele at CTLA4 gene on chromosome 2q33 alters phosphorylation
responses in naive and memory T cells. Thus, depending on their genetic profiles,
different subjects might display different phosphorylation responses upon stimulation.
It is therefore challenging to summarize the general effect of phosphorylation from
observing the stimulation effect in individual samples. An alternative and robust
approach is to create a pre-stimulation and a post-stimulation template. By matching meta-clusters across these templates we can better assess the population-specific
effects of the stimulation experiment.
Creating pre- and post-stimulation templates: By applying the HM&M algorithm, I create a pre-stimulation template from 29 samples before stimulation and
a post-stimulation template from 29 samples after the stimulation.

Both tem-

plates consist of four meta-clusters denoting: (a) CD4+ CD45RAlow memory T
cells, (b) CD4+ CD45RAhigh naive T cells, (c) CD4− CD45RAhigh cells, and (d)
CD4− CD45RAlow cells. Fig. 5.4.2 shows three-dimensional projections of these metaclusters: pre-stimulation meta-clusters in blue and post-stimulation meta-clusters in
red. We observe an increased levels of SLP-76 protein in every meta-cluster after
stimulation than its pre-stimulation state. However, the increment is more clear in
naive and memory T cells, as was observed in earlier publications [44, 157–159]. Similar phosphorylation effect, although smaller than SLP-76, was observed for ZAP-70
protein as well. Therefore, two templates can concisely represent stimulation states of
58 samples in terms of the generic meta-clusters, and comparing meta-clusters across
templates evaluates the overall phosphorylation shifts across conditions.
Homogeneity of meta-clusters:

How homogeneous are the pre- and post-

stimulation meta-clusters? To answer the question more rigorously, I create a com-

96
Before stimulation
After stimulation
2.5

2.5

1.5

1.5
CD45RA

2.0

CD45RA

2.0

1.0
0.5

1.0
0.5

0.0
2.5

0.0
2.5
1.5

2.0
1.5

1.5

2.0
1.5

1.0
1.0

CD4

1.0
1.0

0.5

0.5

CD4

0.0 0.0

SLP76
0.0 0.0

(a) CD4+ CD45RAlow memory T cells

2.5

(b) CD4+ CD45RAhigh naive T cells

2.5
2.0

1.5

1.5
CD45RA

2.0

CD45RA

0.5

0.5

SLP76

1.0

1.0

0.5
0.0
2.5

0.5
0.0
2.5

1.5

2.0
1.5

1.0

1.5

2.0
1.5

1.0
CD4

1.0
1.0

0.5

0.5

SLP76

0.0 0.0

(c) CD4− CD45RAhigh cells

CD4

0.5

0.5

SLP76

0.0 0.0

(d) CD4− CD45RAlow cells

Figure 5.4. Three-dimensional projections of the meta-clusters created
from the TCP dataset: Pre- and post-stimulation meta-clusters are shown
in blue and red, respectively. The four meta-clusters represent: (a)
CD4+ CD45RAlow memory T cells, (b) CD4+ CD45RAhigh naive T cells,
(c) CD4− CD45RAhigh cells, and (d) CD4− CD45RAlow cells.

bined template from all 58 samples in the TCP dataset. Table 5.2 shows the Relative Cluster Separation (RCS, φ) with the 95% confidence intervals for every fourdimensional meta-cluster from three templates (pre-stim, post-stim, and combined).
The combined meta-clusters in Table 5.2 are less homogeneous (i.e., larger values of
φ) than the pre- and post-stimulation meta-clusters. As expected, the homogeneity of
meta-clusters decreases with the increase of variations in the TCP dataset, as was also

97
Table 5.2
Relative Cluster Separation (φ) with 95% confidence intervals (CI) for
each of the four meta-clusters in the TCP dataset. Meta-clusters are
computed from (a) all 58 samples across before and after stimulation, (b)
29 samples before stimulation, and (c) 29 samples after stimulation.
Meta-cluster

φ [95% CI]
Before stimulation

After stimulation

Combined

CD4+ CD45RAlow

0.541 [0.537, 0.545]

0.495 [0.491, 0.499]

1.023 [1.018, 1.026]

CD4+ CD45RAhigh

0.647 [0.642, 0.651]

0.545 [0.540, 0.550]

1.056 [1.051, 1.060]

CD4− CD45RAlow

0.328 [0.324, 0.332]

0.291 [0.287, 0.294]

0.476 [0.472, 0.478]

CD4− CD45RAhigh

0.565 [0.561, 0.568]

0.364 [0.360, 0.367]

0.400 [0.397, 0.403]

observed in the HD dataset. In particular, the homogeneity of meta-clusters denoting
the naive and memory T cells decreases by a factor of two (twofold increment of φ)
in the combined template. For these two meta-clusters, the values of RCS are greater
than one (φ > 1) in the combined template indicating higher between-cluster variance
than the within-cluster variance. Therefore, the combined template is biologically inhomogeneous based on the homogeneity threshold (φ = 1) discussed earlier for the
HD dataset. The inhomogeneity in the combined template implies that the combined
template is created from a heterogeneous collection of samples from more than one
biological classes, and one should not build a single template from these collection of
samples. Therefore, the RCS statistics provides an objective way of constructing and
evaluating templates and prevents us from building templates from inhomogeneous
collection of samples from multiple biologically distinct classes (such as the pre- and
post-stimulation samples in the TCP dataset).

5.5 Conclusions and future work
Templates and meta-clusters can succinctly summarize a large collection of samples belonging to a few biological classes. With a collection of homogeneous meta-

98
clusters, a template provides a concise description of a biological condition and reduces
the complexity of data by emphasizing the key characteristics of a class while masking
statistical noises and low-level details. I discuss a hierarchical matching-and-merging
(HM&M) algorithm for constructing templates that describe distinct biological states
available in a collection of samples. The HM&M algorithm can operate both in supervised (class labels of samples are known) and unsupervised settings (class labels
of samples are not known). Templates created in an unsupervised setting can lead to
a robust classification scheme, as will be discussed in the next chapter.
A meta-cluster within a template performs as a blueprint for a particular type
of cells and represents the generic cell population with a statistical description while
omitting sample-specific variations. Meta-clusters can be employed for measuring
general effect on cell populations as biological conditions changes across templates.
As an example, the memory and naive T cells upon stimulated by anti-CD3 antibody
display increased levels of SLP76 and ZAP70 proteins, an indication of increased
phosphorylation in these T cell subpopulations. Despite sample-specific variations,
the T cell subpopulations from 29 pre-stimulation samples can be encapsulated with a
set of homogeneous meta-clusters. Therefore, we can evaluate the population-specific
effect of the stimulation by registering these meta-clusters with their corresponding
meta-clusters in a post-stimulation template.
I discuss a statistical framework, in an multivariate analysis of variance
(MANOVA) model, for evaluating the homogeneity of meta-clusters. For a collection of variance-stabilized clusters within a meta-cluster, this approach computes the
ratio of between-cluster to within-cluster variance and uses the ratio to evaluate the
homogeneity of the meta-cluster. Based on the natural variations among healthy individuals, a meta-cluster can be declared relatively homogeneous when the ratio of
between- to within-cluster variance is less than one.
In continuing work, I plan to investigate the use of networks instead of trees to
organize the templates, similar in spirit to the use of networks rather than trees in
phylogenetics [160]. Another issue is that the combinatorial dissimilarity measure

99
between two samples is not a metric, and when the dissimilarity is extended to two
templates, this value does not monotonically increase in the hierarchical matching and
merging algorithm. I plan to investigate other dissimilarity measures in this regard.

100

6 CLASSIFYING FC SAMPLES BASED ON TEMPLATES
6.1 Introduction
Consider a collection of flow cytometry samples, each sample consisting of fluorescence measurements of protein markers made at the single-cell level from hundreds
of thousands of cells, indicating different cell types present in each sample. I describe
an algorithm to dynamically classify such samples into several classes based on phenotypically distinct templates. As described in Chapter 5, the class templates can
be constructed by first organizing the samples into a template-tree data structure,
and then identifying the templates by the roots of the well separated branches. In
this way, templates work as prototypes of different biological classes (e.g., disease
status, time points, etc.) and emphasize the common properties of the class while
omitting sample-specific details. In this chapter, I discuss classifying new samples
by comparing them with templates and dynamically updating the templates (and
the template-tree) as new samples are classified. The template-base classification is
robust and efficient because it compares samples to cleaner and fewer class templates
rather than the large number of noisy samples themselves.
The concepts of cluster, meta-cluster, sample, and template are explained in Chapter 5. Briefly, a template is a collection of relatively homogeneous meta-clusters
commonly shared across samples of a given class, thus describing the key immunephenotypes of an overall class of samples in a formal, yet robust, manner [23, 27, 36].
Here, a meta-clusters or meta-population is a generic (abstract) population formed
by combining cell populations expressing similar phenotypes in different samples.
Clusters participating in a meta-cluster usually represent the same type of cells and
thus have overlapping distributions in the marker space. Therefore, a template is
characterized by a mixture of (normally distributed) meta-clusters.

101
Besides their use in high-level visualization and between-class comparisons, templates can be employed to classify new samples with unknown status. In this chapter,
I use this approach to classify samples in terms of their expression of markers of the
immune system. In the static classification approach, I build a fixed number of templates, each representing samples from a particular class, and organize them into a
template-tree data structure. A new sample is then predicted to come from a class
whose template it is most similar to. In the dynamic classification approach, I update
the templates and also the template-tree, as new samples are classified.
I demonstrate the use of template-based classification with two different datasets.
The first dataset measures the differences in phosphorylation events before and after
stimulating T cells in human whole blood with an anti-CD3 antibody. By creating
pre-stimulation and post-stimulation templates, we can classify samples according
to their stimulation status. The second dataset studies the natural variations among
different subsets of immune cells in five healthy individuals. Blood was collected on up
to four different days from each subject and five technical replicates were created from
each subject. Five templates could succinctly represent samples from five individuals
despite the within-subject temporal and technical variations, demonstrating the fact
that technical and day-to-day variations are smaller than the natural variation across
individuals in this dataset.
Template-based classification has been used in several areas such as face recognition, speech recognition, character recognition, etc. In face recognition [161], a
template library is created with one or more digital images from each person. An
unclassified image is compared to each database image by computing correlations of
different features (eyes, nose, mouth etc.) and is classified as the one giving the highest cumulative score. In speech recognition [162, 163], a template is created for each
speaker by a sequence of consecutive acoustic feature vectors and an incoming signal is
classified by comparing it with the templates using the Dynamic Time Warping algorithm. In character recognition [164], representative prototypes for each character are
created from different writing styles and an incoming character is classified by com-

102
paring it to existing prototypes using a feature matching algorithm. The algorithms
discussed in this chapter have similarities to these methods in principle but differs
from them significantly in how the templates are created, represented, and compared
with incoming samples. In contrast to these approaches, I maintain a hierarchy of the
training samples in order to use their relationships in future classification. A template is then represented with the shared features of all samples in a class whereas
the methods discussed above use representatives from the training set. Furthermore,
the dynamic template algorithm continuously updates templates as new samples are
classified, which improves the accuracy of future classification.
The rest of this chapter is organized as follows. In Section 6.2, I describe the
classification methods based on static templates created from a collection of training
samples. Section 6.3 outlines a robust dynamic classification algoritm. The next
Section 6.4 demonstrates the application of template-based classification with two
representative datasets. I conclude this chapter in Section 6.5.

6.2 Classifying Samples with Static Templates
6.2.1 Creating static templates from a collection of FC samples
Consider a collection of N FC samples belonging to M disjoint classes. In Section 5.2, I described a hierarchical matching-and-merging (HM&M) algorithm that
organizes N samples into a binary template-tree data structure. A node in the tree
represents either a sample (leaf node) or a template (internal node). In both cases
a node is characterized by a finite mixture of multivariate normal distributions each
component of which is a cluster or meta-cluster. The height of an internal node in
the template-tree is measured by the dissimilarity between its left and right children.
By recursion, a template denoted by a relatively lower internal node represents a
relatively homogeneous collection of samples and vice versa.
After building a template-tree, we can cut the tree at a suitable height so that
M disjoint subtrees are produced. The root of each subtree represents a template of

103
the samples placed in the leaves of that subtree. The class (label) of a template is
determined by the label of the majority of the samples in the subtree rooted at the
template. However, if the number of classes M is not known a priori , M is set to the
number of well-separated branches based on the relative heights of the subtrees. The
roots of these well-separated subtrees represent the class templates, where within-class
variations (heights of the subtrees) are small relative to the between-class variations
(heights of the ancestors of the subtrees).

6.2.2 Classifying new samples with static templates
Let T1 , T2 , . . ., TM be M templates created from a collection of N samples, where
the ith template Ti summarizes samples of the ith class. The dissimilarity D(S, Ti )
between a sample S and a template Ti is computed by the mixed edge cover (MEC)
algorithm described in Chapter 4. (Note that both a sample and a template are
characterized by finite mixtures of multivariate normal distributions each component
of which is a cluster or meta-cluster.) The new sample S is predicted to belong to
the class whose template it is most similar (least dissimilar) to:
i∗ = arg min D(S, Ti ),
1≤i≤M

class(S) = class(Ti∗ ).

(6.1)

During classification, if the sample’s dissimilarity with the closest template is above
a threshold (i.e., it is not similar to any of the class templates), then it represents a
new class not represented by a template. Hence we need to create a new template for
this sample. I address this issue in the next section.
The template-based classification is fast because we need to compare a new sample
only with M templates instead of with N samples. Let K be the maximum number of
clusters or meta-cluster present in a samples or template. Then the time complexity
of a classification is O(M K 3 log K), where O(K 3 log K) time is required to compute
dissimilarity (mixed edge cover) between samples. Typically the number of distinct
classes (M ) is much smaller than the number of samples N . Hence, computing O(M )

104
dissimilarity is faster than classifying the sample from scratch, which requires O(N )
dissimilarity computations.

6.3 Building dynamic templates
6.3.1 The algorithm
The classification method based on static templates has two limitations. First,
the algorithm requires a significant number of samples from different biological classes
to construct meaningful class templates. Hence, this approach is inadequate when
samples arrive sequentially or in batches, as for instance in a longitudinal study of
an epidemic. Second and more important, the algorithm builds a fixed set of static
templates and does not update templates as new samples are classified. Therefore,
future classification can not use the information gained from samples classified with
the static template-tree.
I address both of these limitations with dynamic updates of templates as new
samples are classified. The update operation is performed by inserting the new sample
into the current template-tree and updating necessary internal nodes (templates) in
the tree. Subsequent classification tasks are performed on the regularly updated
templates. This approach also works when we do not have any training dataset to
begin with. In that case, the template-tree is created from the scratch by repeated
insertion of samples in a dynamic fashion starting with empty templates. Consider
an existing template-tree TT (possibly empty) with r as the root node. Note that r
can be considered as the template of all samples in the leaves of the tree. In order to
insert a new sample S in TT, I first create a singleton node v from S. If TT is an empty
tree I make v the root of the template-tree, and otherwise, I insert v into the tree TT
by invoking the procedure insert shown in Fig. 6.1 with r and v as the parameters.
The procedure insert works in a recursive fashion. It follows a path from the
root to a node (a leaf or internal node), to be identified by the algorithm, where the
new node v is inserted. The procedure then backtracks by updating the mixtures of

105
1:

procedure insert(u, v)

. Insert leaf node v in the subtree rooted at u

2:

if u is a empty then

. Inserting in an empty tree

3:

return v

4:

end if

5:

if u is a leaf then

6:
7:

w ← empty node, wl ← u, wr ← v, x ← w
else

8:

D ← min{D(ul , ur ), D(ul , v), D(ur , v)}

9:

if D(ul , ur ) = D then

else if D(ul , v) = D then

else

. when D(ur , v) = D, Case 4

ur ← insert(ur , v), x ← u

14:
15:

. Case 3

ul ← insert(ul , v), x ← u

12:
13:

. Case 2

w ← empty node, wl ← u, wr ← v, x ← w

10:
11:

. Case 1

end if

16:

end if

17:

update node x by matching and merging meta-clusters from xl and xr

18:

height(x) = D(xl , xr )

19:

return x

20:

end procedure

. Going up in the tree

Figure 6.1. Inserting a leaf node (sample) v in a subtree rooted at u
(template or sample)

the internal nodes found in the return path back to the root. I consider four cases
while inserting v in a subtree rooted at u. The cases are illustrated in Fig. 6.2. In the
first case u is a leaf node, and I create a new node w and make u and v the children of
w. I create a template from the samples in the leaves u and v and save it in node w.
In the other cases u is an internal node. Let ul and ur be the left and right children
of u, respectively. I compute dissimilarities D(ul , ur ), D(ul , v) and D(ur , v) between

106

w
u

u

w
u

v
ul

(a) case 1

v

ul,v

u

ul

ur,v

ur

(b) case 2

(c) case 3

(d) case 4

Figure 6.2. Four cases to consider when inserting a leaf node v into the
subtree rooted at u. (a) case 1 (u is also a leaf): a new internal node w is
created and is made the parent of u and v, (b) case 2 (u is a non-leaf and
the left and right children of u are more similar to each other than to v):
a new internal node w is created and is made the parent of u and v, (c)
case 3 (u is a non-leaf and the left child ul of u is more similar to v than
to the right child ur ): insert v into the subtree rooted at ul by calling
insert(ul , v), and (d) case 4 (u is a non-leaf and the right child ur of u
is more similar to v than to the left child ul ): insert v into the subtree
rooted at ur by calling insert(ur , v). The dotted parts in Subfigure (c)
and (d) are determined by the insert function in a recursive fashion.

each pair of nodes from ul , ur , and v. If D(ul , ur ) is the smallest among the three
dissimilarities, then v cannot be inserted in a subtree rooted at u. Thus I create a
new node w and make u and v the children of w. I create a new template from the
template u and sample v, save it in node w and return. When D(ul , v) is the smallest
dissimilarity, I insert v in a subtree rooted at ul by calling the procedure insert
with ul , v as parameters. In this case the left subtree of u gets updated. Similarly, if
D(ur , v) is the smallest then v is inserted in the right subtree rooted at ur .

6.3.2 Computational complexity
To insert a new sample, we need to traverse a path starting from the root to a leaf
or an internal node in a template-tree. In the worst case the length of the traversed
path is the height of the template-tree. Let N be the number of samples and h be
the height of a template-tree where (N − 1) ≤ h ≤ log2 (N ). The former equality

107
holds when the tree is completely unbalanced (a chain) whereas the latter equality is
satisfied when the tree is balanced. At each node in the traversed path we need to
compute three dissimilarities and one update operation (when backtracking). Let K
be the maximum number of clusters or meta-clusters in a node of the template-tree
and p be the dimension (number of features) of the data. A dissimilarity computation
takes O(K 3 log K) time whereas an update operation takes O(K 3 log K)+O(Kp) time
when meta-cluster parameters are computed by the maximum likelihood estimation.
Hence, the time complexity of inserting a sample in a template-tree is O(hK 3 log K).

6.3.3 Classifying a sample
To classify a new sample S, it is inserted into the current template-tree using
the procedure described in Fig. 6.1. The class of S is predicted to be the class of
the template created from the subtree where S is inserted. At the time of insertion
the template-tree is dynamically updated to reflect the information gained from the
new sample. The dynamic template approach is especially useful in unsupervised
classification where the class labels of the samples are not known in advance. In
that case, the class templates are created from the well-separated subtrees such that
within-class variations (heights of the subtrees) are small relative to the between-class
variations (heights of the ancestors of the subtrees). In this context, the algorithm
is similar to the spirit of the hierarchical clustering algorithm UPGMA, with significant differences in the distance computation and management of the internal nodes.
Furthermore, when a new sample is highly dissimilar to every existing template, the
algorithm automatically creates a new branch in the tree indicating a new class. This
approach therefore has the ability to discover unknown classes from the incoming
samples, which, for example, is very useful in detecting new strains of a disease.
The algorithm inserts samples into the template-tree in a particular order, which
can determine the relative positions of nodes in the template-tree. How sensitive
is the template-based classification to the order in which the samples are inserted

108
into the template-tree? If the between-class variation is significantly higher than the
within-class variation (as is the case in the two datasets studied in this chapter), the
classification accuracy is unaffected by the small differences in the subtrees of the
template-tree. In current work, we are studying different rearrangement techniques
for creating robust template-tree insensitive to the order of sample insertions.

6.4 Results
6.4.1 Classifying stimulation status of T cells
I apply the template-based classification algorithm to classify the stimulation status of 29 pairs of samples collected before and after stimulating blood with anti-CD3
antibody. Each of the 29 pairs of samples in the T cell phosphorylation (TCP) dataset
measures the abundance of four protein markers (CD4, CD45RA, SLP-76, and ZAP70) [44]. During the stimulation, anti-CD3 antibody binds with T cell receptors
(TCR) and phosphorylate few domains of naive and memory T cells. The effect of
phosphorylation is revealed by the higher expressions of SLP-76 and ZAP-70 proteins
in T cells after the stimulation. Section 1.6.2 describes this dataset in detail.
For a pair of samples from the ith subject, I denote the unstimulated sample by
i− and the stimulated sample by i+. Each of the 58 samples in the TCP dataset
was preprocessed and clustered independently to identify four cell populations: (a)
CD4+ CD45RAlow T cells, (b) CD4+ CD45RAhigh T cells, (c) CD4− CD45RAhigh T
cells, and (d) CD4− CD45RAlow T cells (cf. Section 3.5.2). (Recall that ‘+’ and ‘high’
indicate higher abundances of a marker, and ‘−’ and ‘low’ indicate lower levels of it.)
Classification with static templates: I divide 29 pairs samples randomly into a
training set and a test set. From the training samples, the HM&M algorithm constructs a template-tree where the left and right children of the root represent the preand post-stimulation templates. Fig. 6.3 illustrates the classification process with a
template tree created from six pairs of samples. After constructing the tree, it is cut
beneath the root to create the pre-stimulation (Tbefore ) and post-stimulation (Tafter )

109

Figure 6.3. Illustration of sample classification based on static templates.
The HM&M algorithm creates two templates, Tbefore for before-stimulation
and Tafter for after stimulation classes, from six pairs of samples in the TCP
dataset. A new sample is compared with the templates, and is classified
with the template it is most similar to.

templates. To predict the stimulation status of the ith sample Si in the test set, I compute the dissimilarity D between Si and each of the templates with the cost of the optimum mixed edge cover algorithm. Si is predicted to come from the pre-stimulation
class when Si is more similar to Tbefore than to Tafter (i.e., D(Si , Tbefore ) < D(Si , Tafter )),
and otherwise, from the post-stimulation class. In Fig. 6.3, I show a sample from the
test set above the two templates. The algorithm correctly classifies it as a prestimulation sample, and the correctness of the classification can be verified visually
as this sample does not show a phosphorylation shift in SLP-76. (The 3-D scatter
plots are shown for visualization only; classification is performed in 4-D.)
I study the accuracy of the template-based classifier with a cross-validation. At
each stage of the cross-validation, training and test sets are created from 10 and 48
samples respectively. The status of each test sample is predicted by comparing it with
the templates created from the training set. A sample is considered to be misclassified

10

20

30

Before Stimulation (−)
After Stimulation (+)

1−
12−
16−
17−
13−
14−
20−
15−
24−
25−
27−
21−
26−
28−
29−
19−
22−
23−
4−
2−
3−
5−
7−
8−
6−
18−
9−
10−
1+
2+
3+
4+
7+
8+
5+
6+
14+
10+
19+
15+
21+
25+
23+
24+
26+
28+
29+
22+
27+
9+
13+
17+
20+
11+
16+
12+
18+
11−

0

Dissimilarity Between Samples (Templates)

40

110

Figure 6.4. A dynamic template-tree created incrementally by adding the
samples in the TCP dataset one after another. Minus and plus signs are
appended to the subject number to indicate pre- and post-stimulation
samples. Pre-stimulation samples are in blue, and post-stimulation samples are red. The height of a node measures the dissimilarity between its
left and right children, whereas the horizontal placement of a sample is
arbitrary.

when its predicted class is different from the actual class. This process is repeated
58 times for different combinations of training and test sets. I observed that three
pre-stimulation samples, 9-, 10- and, 11-, were consistently classified with the afterstimulation class whenever they were present in the test set. No other sample is
classified into a wrong class in the cross-validation. I consider these three samples
as outliers, show that they are likely to have been stimulated before the experiment,
and discuss their properties further in the following section.
Classification with dynamic templates: In order to demonstrate the classification
approach based on dynamic templates, I build a template-tree incrementally from the
samples in the TCP dataset. Starting with an empty tree, the algorithm described
in Sec. 6.3 inserts the samples one after another into the current tree. Fig. 6.4 shows
the complete template-tree where pre-stimulation samples are shown in blue and
post-stimulation samples are shown in red. Aside from three outlying samples, all
samples create two well-separated branches of the root denoting the pre- and post-

1−
12−
16−
17−
13−
14−
20−
15−
24−
25−
27−
21−
26−
28−
29−
19−
22−
23−
4−
2−
3−
5−
7−
8−
6−
18−
9−
10−
1+
2+
3+
4+
7+
8+
5+
6+
14+
10+
19+
15+
21+
25+
23+
24+
26+
28+
29+
22+
27+
9+
13+
17+
20+
11+
16+
12+
18+
11−

60

50

40

30

20

10

0

1−
12−
16−
17−
13−
14−
20−
15−
24−
25−
27−
21−
26−
28−
29−
19−
22−
23−
4−
2−
3−
5−
7−
8−
6−
18−
9−
10−
1+
2+
3+
4+
7+
8+
5+
6+
14+
10+
19+
15+
21+
25+
23+
24+
26+
28+
29+
22+
27+
9+
13+
17+
20+
11+
16+
12+
18+
11−

Samples after stimulation

Samples before stimulation

111

Samples before stimulation

Samples after stimulation

Figure 6.5. Heat plot showing the dissimilarity between pairs of samples
in the TCP dataset where the color of a square corresponds to the dissimilarity of a pair of samples. A square is drawn in a light shade when the
pair of samples is similar, and in a dark shade when the pair of samples
is highly dissimilar. The plot is symmetric about the main diagonal. The
samples are listed as they are ordered horizontally in Fig. 6.4.

stimulation templates. The height of an internal node in a template-tree is measured
by the dissimilarity between the pair of samples (templates) denoted by the left and
right children of the internal node. The height of the root in Fig. 6.4 is more than
twice of the height of any other node. Hence the algorithm successfully identifies two
templates with small within-template deviation while maintaining a clear separation
between them.
When inserting a new sample S, the template-tree is dynamically updated to
reflect the information gained from the new sample. After insertion, the position
of S in the tree determines its predicted class. S is classified as a pre-stimulation
sample when it is placed in the left (blue) subtree and otherwise, classified as a poststimulation sample. Similar to the classification with static templates, we observe in
Fig. 6.4 that all samples except 9-, 10- and 11-, are correctly classified.

112

Expression levels of SLP-76 protein

Outlying samples (9,10,11)
0.6

Normal samples

0.5

0.4

0.3

0.2

0.1

Before Stimulation

After Stimulation

Stimulation status

Figure 6.6. Levels of SLP-76 expression in each pair of samples (joined by
a line) from the TCP dataset. For most samples, SLP-76 levels increase
after the anti-CD3 stimulation. However, the three samples {9, 10, 11}
have high levels of SLP-76 protein in their pre-stimulation states, and do
not show the usual increase after stimulation.

Outlying samples: Now I discuss the three outlying pre-stimulation samples, 9, 10- and 11-, which are consistently classified with the post-stimulation samples by
both the static and dynamic classification algorithms. Fig. 6.5 shows the dissimilarity
between every pair of samples in the dataset in a heatplot where a square is drawn
in a lighter shade when a pair of samples is similar, and in darker shade when a pair
of samples is highly dissimilar. We observe that most squares in the top-left and
bottom-right quadrants are in light colors indicating similarity among samples within
pre- and post-stimulation classes. However, three pre-stimulation samples, 9-, 10and 11-, are more similar to the post-stimulation samples than to the pre-stimulation
samples. This anomaly can be explained by plotting the average expression of SLP-76
protein for each pair of samples in Figure 6.6. The three outlying samples {9, 10, 11}
have much higher levels of SLP-76 than the remaining samples in their pre-stimulation
states. On stimulation, two of these samples have decreased levels of SLP-76, while
one shows an increase. Consequently these samples are classified with the poststimulations samples by the templates-based classification algorithms presented here.

113

Figure 6.7. The template-tree created from samples in the healthy donor
dataset. The algorithm identifies five well separated branches denoting
templates for the five subjects. A subtree consisting of samples from the
same subject is shown in same color.

6.4.2 Classifying immune patterns in healthy individuals
I further validated the template-based classification with a healthy donor (HD)
dataset described in Section 1.6.1. The HD dataset represents a “biological simulation” where peripheral blood mononuclear cells (PBMC) were collected from five
healthy subjects on different days, and each sample was divided into five parts and
analyzed through a flow cytometer at Purdue’s Bindley Biosciences Center. Each of
the 65 samples is preprocessed, variance stabilized, and clustered to identify four cell
populations: (a) helper T cells (CD3+ CD4+ ), (b) cytotoxic T cells (CD3+ CD8+ ), (c)
B cells (CD3− CD19+ ), and (d) natural killer cells (CD3− CD19− ). Detail discussion
about the clustering step can be found in Section 3.5.1.
A template tree is created from the 65 samples in the HD dataset by repeated insertion of samples with the procedure described in Sec. 6.3. Fig. 6.7 shows the complete
template-tree where samples from five individuals are shown in five different colors.

114
We observe that samples from the five subjects create five well-separated branches and
the roots of the five branches denote subject-specific templates. Intuitively we expect
samples from each subject to be classified together. Here, the within-subject variations of a subject come from day-to-day natural variations and technical variations in
flow cytometry sample preparation and measurement, whereas the between-subject
variations come from the innate biological variability in the healthy subjects. In this
dataset we observe more natural variation than the temporal and technical variations.
The observations from the healthy donor dataset confirm that we can build immune profiles for individuals despite within-subject variations from different sources.
Additionally, the five templates from the five subjects create another level of hierarchy and the root of the tree in Fig. 6.7 can be considered as a template for healthy
individuals. This combined template represents a healthy immune profile by preserving the common features of healthy individuals and by removing between subject
variations. This template can be compared against templates created from diseased
samples in order to diagnose diseases and to perform comparative study of healthy
and diseased immune profiles.

6.5 Conclusions
I describe template-based classification methods for flow cytometry samples displaying a combination of different immunophenotypes. A template built from samples
of a class provides a concise description of the class by emphasizing the key characteristics while masking statistical noise and low-level details, and thus helps to measure
overall changes in cell populations across different conditions. By moving beyond
sample-specific variations, the templates act as the blueprints for different classes,
and can be used to classify future samples to different classes in a more relevant parameter space. It is also more efficient to classify a sample using templates rather
than all of the previously seen samples. I maintain a hierarchy of the samples in a
template-tree such that samples can be analyzed in higher resolution as needed.

115
The major contribution in this chapter is a dynamic algorithm to construct and
update the templates, and build and maintain the template-tree, when the samples
arrive continuously over a period of time. As new samples come in, the templates are
dynamically updated to reflect the information gained from them. This is a desirable
property in dynamic situations, as in the course of an epidemic, when new samples
are being collected and analyzed. Another context where the dynamic classification
approach is useful is when the samples are collected at a large number of hospitals or
labs; the data at each hospital can be analyzed in situ, and only the summaries need
to be shared among the hospitals to create a global profile of the immune system,
thus avoiding issues with privacy of clinical data.
Dynamic classification is a critical step towards characterizing diverse states of
the human immune system from big datasets of samples collected at geographically distributed laboratories, e.g., the Human Immunology Project Consortium
(www.immuneprofiling.org). This work makes it possible to summarize the data
from each laboratory using templates for each class, and then to merge the templates
and template-trees across various laboratories, as the data is being continuously collected and analyzed.

116

7 CLASSIFICATION OF ACUTE MYELOID LEUKEMIA
7.1 Introduction
Can Acute Myeloid Leukemia (AML) samples be distinguished from healthy ones
using flow cytometry data from blood or bone marrow with a template-based classification method? This method builds a template for each class to summarize the
samples belonging to the class, and uses them to classify new samples as described in
Chapter 6. This question is interesting because AML is a heterogeneous disease with
several subtypes and hence it is not clear that a template can succinctly describe all
types of AML. Furthermore, we wish to identify immunophenotypes (cell types in the
bone marrow and blood) that are known to be characteristic of subtypes of AML.
Pathologists use these immunophenotypes to visualize AML and its subtypes, and a
computational procedure that can provide this information would be more helpful in
clinical practice than a classification score that indicates if an individual is healthy
or has AML.
In Chapter 6, I described a template-based classification framework for analyzing
flow cytometry (FC) data [46]. In this framework, each sample is characterized by
means of the cell populations that it contains. Similar samples belonging to the same
class are described by a template for the class. A template consists of meta-clusters
that characterize the cell populations present in the samples that constitute the class.
I described a hierarchical algorithm in Chapter 5 that organizes the templates into a
template tree. Given a sample to classify, we can compare it with the nodes in the
template tree, and classify it to the template that it is closest to. A combinatorial
measure for the dissimilarity of two samples or two templates, computed by means
of a mixed edge cover in a graph model (described in Chapter 4), is at the heart of
this approach.

117
The algorithmic pipeline for template-based classification has been applied to
various problems: to distinguish the phosphorylation state of T cells; to study the
biological, temporal, and technical variability of cell types in the blood of healthy
individuals; to characterize changes in the immune cells of Multiple Sclerosis patients
undergoing drug treatments; and to predict the vaccination status of HIV patients [37,
46]. However, it is not clear if the AML data set can be successfully analyzed with
this scheme, since AML is a heterogeneous disease at the morphologic, cytogenetic
and molecular levels, and a few templates may not describe all of its subtypes.
AML is a disease of myeloid stem cells that differentiate to form several types
of cells in the blood and marrow. It is characterized by the profusion of immature myeloid cells, which are usually prevented from maturing due to the disease.
The myeloid stem cell differentiates in several steps to form myeloblasts and other
cell types in a hierarchical process. This hierarchical differentiation process could
be blocked at different cell types, leading to the multiple subtypes of AML. Eight
different subtypes of AML based on cell lineage are included in the French-AmericanBritish Cooperative Group (FAB) classification scheme [165]. (A different World
Health Organization (WHO) classification scheme has also been published.) Since
the prognosis and treatment varies greatly among the subtypes of AML, accurate
diagnosis is critical.
In this chapter, I extend the template-based classification scheme presented in
Chapter 6 by developing a scoring function that accounts for the subtleties of FC data
of AML samples [45]. Only a small number of the myeloid cell populations in AML
samples are specific to AML, and there are a larger number of cell populations that
these samples share with healthy samples. Furthermore, the scoring function needs
to account for the diversity of the myeloid cell populations in the various subtypes of
AML. This approach has the advantage of identifying immunophenotypes of clinical
interest in AML from the templates. Earlier work on the AML dataset used in
this chapter has classified AML samples using methods such as nearest neighbor

118
classification, logistic regression, matrix relevance learning vector quantization, etc.,
but they have not identified these immunophenotypes; e.g., [166–168].
Template-based classification has the advantage of being more robust than simple
nearest neighbor classification since a template summarizes the characteristic properties of a class while ignoring small sample-to-sample variations. It is also scalable
to large numbers of samples, since it compares a sample to be classified only against
a small number of templates rather than the much larger number of samples. The
comparisons with the templates can be performed efficiently using the structure of
the template tree. It also reduces the data size by clustering the data to identify cell
populations and then working with the statistical distributions characterizing the cell
populations, in contrast to some of the earlier approaches that work with data sets
even larger than the FC data by creating multiple variables from a marker (reciprocal,
powers, products and quotients of subsets of the markers, etc. [167]).
Template-based classification has been employed in other areas such as character,
face, and image recognition, but its application to FC is relatively recent. In addition
to our work, templates have been used for detecting the effects of phosphorylation [27],
evaluating the efficiency of data transformations [23], and labeling clusters across
samples [39].

7.2 Methods
7.2.1 The AML Dataset
I have used an FC dataset on AML that was included in the DREAM6/FlowCAP2
challenge of 2011 [169]. The dataset consists of FC measurements of peripheral blood
or bone marrow aspirate collected from 43 AML positive patients and 316 healthy
donors over a one year period. Each patient sample was subdivided into eight aliquots
(“tubes”) and analyzed with different biomarker combinations, five markers per tube
(most markers are proteins) as described in Table 7.1. In addition to the markers, the
forward scatter (FS) and side scatter (SS) of each sample was also measured in each

119
Table 7.1
The fluorophore-conjugated antibodies contained in each of the 8 tubes in
which the samples were incubated.
Tubes

FL1
(FITC)

FL2
(PE)

FL3

FL4

FL5

(ECD)

(PC5)

(PC7)

1

IgG1

IgG1

CD45

IgG1

IgG1

2

Kappa

Lambda

CD45

CD19

CD20

3

CD7

CD4

CD45

CD8

CD2

4

CD15

CD13

CD45

CD16

CD56

5

CD14

CD11c

CD45

CD64

CD33

6

HLA-DR

CD117

CD45

CD34

CD38

7

CD5

CD19

CD45

CD3

CD10

8

NA

NA

NA

NA

NA

tube. Hence, the dataset contains 359 × 8 = 2, 872 samples and each sample is sevendimensional (five markers and the two scatters). Tube 1 is an isotype control used to
detect non-specific antibody binding and Tube 8 is an unstained control for identifying
background or autofluorescence of the system. Since the data has been compensated
for autofluorescence and spectral overlap by experts, I omit these tubes from the
analysis. The disease status (AML/healthy) of 23 AML patients and 156 healthy
donors are provided as training set, and the challenge is to determine the disease status
of the rest of the samples, 20 AML and 157 healthy, based only on the information in
the training set. The complete dataset is available at http://flowrepository.org/.
The side scatter (SS) and all of the fluorescence channels are transformed logarithmically, but the forward scatter (FS) is linearly transformed to the interval [0,1]
so that all channels have values in the same range. This removes any bias towards
FS channel in the multi-dimensional clustering phase. After preprocessing, an FC
sample is stored as an n × p matrix A, where the element A(i, j) quantifies the j th

120
feature in the ith cell, and p is the number of features measured in each of n cells. In
this dataset, p = 7 for each tube and n varies among the samples.

7.2.2 Identifying cell populations in each sample
I employ a two-stage clustering approach for identifying phenotypically similar
cell populations (homogeneous clusters of cells) in each sample. At first, I apply the
k-means clustering algorithm for a wide range of values for k, and select the optimum
number of clusters k ∗ by simultaneously optimizing the Calinski-Harabasz and S Dbw
cluster validation methods [34]. Next, the clusters identified by the k-means algorithm
are modeled with a finite mixture model of multivariate normal distributions. In the
mixture model, the ith cluster is represented by two distribution parameters µi , the
p-dimensional mean vector, and Σ, the p × p covariance matrix. The distribution
parameters for each cluster are then estimated using the Expectation-Maximization
(EM) algorithm. The statistical parameters of a cluster are used to describe the
corresponding cell population in the rest of the analysis. The population identification
process is described in Chapter 3.

7.2.3 Creating templates from a collection of samples
The hierarchical matching-and-merging (HM&M) algorithm described in Chapter 5 is used to create templates representing distinct classes of samples. The HM&M
algorithm arranges a set of similar samples into a binary template tree data structure [36]. The dissimilarity between a pair of samples is computed by the cost of
optimum mixed edge cover solution discussed in Chapter 4.

7.2.4 Classification score of a sample in AML dataset
Consider a sample X consisting of k cell populations S = {c1 , c2 , ..., ck }, with
the ith cluster ci containing |ci | cells. Let T − and T + be the templates created from

121
AML-negative (healthy) and AML-positive training samples, respectively. I describe
how to compute a score f (X) in order to classify the sample X to either the healthy
class or the AML class.
The intuition behind the score is as follows. An AML sample contains two kinds
of cell populations: (1) AML-specific myeloblasts and myeloid cells, and (2) AMLunrelated cell populations, such as lymphocytes. The former cell populations correspond to the immunophenotypes of AML-specific metaclusters in the AML template,
and hence when we compute a mixed edge cover between the AML template and an
AML sample, these clusters get matched to each other. (Such clusters in the sample
do not match to any metacluster in the healthy template.) Hence a positive score
is assigned to a cluster in sample when it satisfies this condition, signifying that it
is indicative of AML. AML-unrelated cell populations in a sample could match to
meta-clusters in the healthy template, and also to AML-unrelated meta-clusters in
the AML template. When either of these conditions is satisfied, a cluster gets a negative score, signifying that it is not indicative of AML. Since AML affects only the
myeloid cell line and its progenitors, it affects only a small number of AML-specific cell
populations in an AML sample. Furthermore, different subtypes of AML affect different cell types in the myeloid cell line. Hence, there are many more clusters common
to healthy samples than there are AML-specific clusters common to AML samples.
(This is illustrated later in Fig. 7.2 (c) and (d).) Thus the range of positive scores
are made relatively higher than the range of negative scores. This scoring system is
designed to reduce the possibility of a false negative (an undetected AML-positive
patient), since this is more serious in the diagnosis of AML. Additional data such
as chromosomal translocations and images of bone marrow from microscopy could
confirm an initial diagnosis of AML from flow cytometry.
In the light of the discussion above, we need to identify AML-specific metaclusters
initially. Given the templates T + and T − , we create a complete bipartite graph with
the meta-clusters in each template as vertices, and with each edge weighted by the
Mahalanobis distance between its endpoints. A minimum cost mixed edge cover

122
solution in this graph will match meta-clusters common to both templates, and such
meta-clusters represent non-myeloid cell populations that are not AML-specific. On
the other hand, meta-clusters in the AML template T + that are not matched to a
meta-cluster in the healthy template T − correspond to AML-specific metaclusters.
Such meta-clusters in the AML template T + are denoted by the set M + .
Now we can proceed to compare a sample against the template for healthy samples
and the template for AML. I compute a minimum cost mixed edge cover between
a sample X and the healthy template T − , and let mec− (ci ) denote the set of metaclusters in T − mapped to a cluster ci in the sample X. Similarly, compute a minimum
cost mixed edge cover between X and the AML template T + , and let mec+ (ci ) denote
the set of meta-clusters in T + mapped to a cluster ci . These sets could be empty if ci
is unmatched in the mixed edge cover. I compute the average Mahalanobis distance
between ci and the meta-clusters matched to it in the template T − , and define this as
the dissimilarity d(ci , mec− (ci )). From the formulation of the mixed edge cover in [37],
we have d(ci , mec− (ci )) ≤ 2λ, where λ is the cost of leaving a cluster unmatched
in the mixed edge cover solution. Hence we can define the similarity between ci
and mec− (ci ) as s(ci , mec− (ci )) = 2λ − d(ci , mec− (ci )). By analogous reasoning, the
similarity between ci and mec+ (ci ) is defined as s(ci , mec+ (ci )) = 2λ − d(ci , mec+ (ci )).
The score of a sample is the sum of the scores of its clusters. I define the score
of a cluster ci , f (ci ), as the sum of two functions f + (ci ) and f − (ci ) multiplied with
suitable weights. A positive score indicates that the sample belongs to AML, and a
negative score indicates that it is healthy.
The function f + (ci ) contributes a positive score to the sum if ci is matched to an
AML-specific meta-cluster in the mixed edge cover between the sample X and the
AML template T + , and a non-positive score otherwise. For the latter case, there are
two subcases: If ci is unmatched in the mixed edge cover, it corresponds to none of
the meta-clusters in the template T + , and gets a zero score. If ci is matched only to
non-AML specific meta-clusters in the AML template T + , then it is assigned a small

123
negative score to indicate that it likely belongs to the healthy class (recall that k is
the number of clusters in sample X).




s (ci , mec+ (ci )) ,



f + (ci ) =
− k1 [s(ci , mec+ (ci ))] ,





0,

Hence
if mec+ (ci ) ∩ M + 6= ∅,
if mec+ (ci ) ∩ M + = ∅, and mec+ (ci ) 6= ∅,
if mec+ (ci ) = ∅.

The function f − (ci ) contributes a negative score to a cluster ci in the sample X
if it is matched with some meta-cluster in the healthy template T − , indicating that
it likely belongs to the healthy class. If it is not matched to any meta-cluster in T − ,
then it is assigned a positive score λ. This latter subcase accounts for AML-specific
clusters in the sample, or a cluster that is in neither template. In this last case, we
acknowledge the diversity of cell populations in AML samples. Hence we have


− 1 [s(ci , mec− (ci ))] , if mec− (ci ) =
6 ∅,
k
−
f (ci ) =

λ,
if mec− (ci ) = ∅.

Finally, we define
f (X) =

X |ci | 1
(f + (ci ) + f − (ci )).
|X| 2
c ∈X

(7.1)

i

Here |X| is the number of cells in the sample X. The score of a cluster ci is weighted
by the fractional abundance of cells in it.

7.3 Results
7.3.1 Cell populations in healthy and AML samples
In each tube, I identify cell populations in the samples using the clustering algorithm described in Section 7.2.2. Each sample contains five major cell types that
can be seen when cell clusters are projected on the side scatter (SS) and CD45 channels, as depicted in Fig. 7.1. (Blast cells are immature progenitors of myeloid cells

Myeloid cells

Lymphoid blasts

Myeloid blasts

SS (log)
0.2

0.4

0.6

0.8

CD45−ECD (log)

0.4

0.4

1.5%

AML

28%

0.2

0.6

Normal

Monocytes

0.6

0.8

Lymphocytes

0.2

SS (log)

0.8

124

0.2

0.4

0.6

0.8

CD45−ECD (log)

Figure 7.1. Cell types identified on the side scatter (SS) and CD45 channels for a healthy and an AML positive sample. Cell populations are discovered in the seven-dimensional samples with the clustering algorithm
and then projected on these channels for visualization. A pair of clusters
denoting the same cell type is marked with the same color. The proportion
of myeloid blast cells (shown in red) increases significantly in the AML
sample.

or lymphocytes.) The side scatter measures the granularity of cells, whereas CD45
is variably expressed by different white blood cells (leukocytes). AML is initially diagnosed by rapid growth of immature myeloid blast cells with medium SS and CD45
expressions [141] marked in red in Fig. 7.1. According to the WHO guidelines, AML
is initially confirmed when the sample contains more than 20% blasts. This is the
case for all, except one of the AML samples in the DREAM6/FlowCAP2 training set,
and the latter will be discussed later.

7.3.2 Healthy and AML templates
From each tube of the AML dataset, using the training samples, we build two
templates: one for healthy samples, and one for AML. As described in Section 7.2.3,
the HM&M algorithm organizes samples of the same class into a binary template
tree whose root represents the class template. The template trees created from the
healthy and AML training samples in Tube 6 are shown in Subfigures 7.2(a) and
7.2(b) respectively. The height of an internal node in the template tree measures

APL

116
101
7
172
49
103
88
5
26
9
60
105
33
134
174
165
151
95
117
89
67
37
58

0

20

40

60

80 100

(b)

86
23
137
145
142
131
82
72
129
101
105
15
146
54
128
46
116
93
65
62
140
130
118
58
39
91
9
124
155
50
110
57
13
139
134
156
51
78
100
89
67
60
41
43
7
19
114
47
14
73
147
30
143
2
109
27
11
18
153
61
75
90
117
4
126
97
99
98
24
49
59
44
83
127
95
10
45
125
34
144
76
103
1
154
20
42
87
52
135
74
38
36
112
17
68
150
5
77
64
102
121
16
70
3
123
22
148
48
84
21
92
37
96
94
29
63
111
79
133
115
120
106
141
138
66
151
26
152
132
56
33
85
80
25
69
31
107
119
88
122
113
53
136
32
55
6
108
8
71
12
149
40
81
28
104
35

0

10

20

30

40

Dissimilarity between
samples (templates)

(a)

AML positive patients

100
80

(d)

CD38
CD34
CD117
HLA−DR
CD45
SS

20

40

60

0.0

(e)

0.2

0.4

CD38
CD34
CD117
HLA−DR
CD45
SS

0.6

(f)

0.0
0.2
0.4
0.6
Expression levels of markers

0

60
40
20

Meta-clusters in the healthy template

Fraction of samples present in a meta-cluster (%)

(c)

80

100

Healthy individuals

0

Fraction of samples present in a meta-cluster (%)

Dissimilarity between
Dissimilarity
between
samples (templates)
samples
(templates)

125

Meta-clusters in the AML template

Figure 7.2. The healthy and AML templates created from Tube 6. (a)
The template-tree created from 156 healthy samples in the training set.
(b) The template-tree created from 23 AML samples in the training set.
Samples in the red subtree exhibit the characteristics of Acute Promyelocytic Leukemia (APL) as shown in Subfigure (f). (c) Fraction of 156
healthy samples present in each of the 22 meta-clusters in the healthy
template. Nine meta-clusters, each of them shared by at least 60% of the
healthy samples, form the core of the healthy template. (d) Fraction of
23 AML samples present in each of the 40 meta-clusters in the AML template. The AML samples, unlike the healthy ones, are heterogeneously
distributed over the meta-clusters. (e) The expression levels of markers
in the meta-cluster shown with blue bar in Subfigure (d). (Each horizontal bar in Subfigures (e) and (f) represents the average expression of
a marker and the error bar shows its standard deviation.) This metacluster represents lymphocytes denoted by medium SS and high CD45
expression and therefore does not express the AML-related markers measured in Tube 6. (f ) Expression of markers in a meta-cluster shown with
red bar in Subfigure (d). This meta-cluster denotes myeloblast cells as
defined by the SS and CD45 levels. This meta-cluster expresses HLADR− CD117+ CD34− CD38+ , a characteristic immunophenotype of APL.
Five AML samples sharing this meta-cluster are similar to each other as
shown in the red subtree in Subfigure (b).

126
the dissimilarity between its left and right children, whereas the horizontal placement
of a sample is arbitrary. In these trees, we observe twice as much heterogeneity in
the AML samples than among the healthy samples (in the dissimilarity measure),
despite the number of healthy samples being five times as numerous as the AML
samples. The larger heterogeneity among AML samples is observed in other tubes as
well. The template-tree for AML partitions these samples into different subtrees that
possibly denote different subtypes of AML. For example, the subtree in Fig. 7.2(b)
that is colored red includes samples (with subject ids 37, 58, 67, 89, and 117) with
immunophenotypes of Acute Promyelocytic Leukemia (APL) (discussed later in this
section).
Together, the meta-clusters in a healthy template represent a healthy immune
profile in the feature space of a tube from which the template is created. 22 metaclusters are obtained in the healthy template created from Tube 6. The percentage
of samples from the training set participating in each of these meta-clusters is shown
in Fig. 7.2(c). Observe that 60% or more of the healthy samples participate in the
nine most common meta-clusters (these constitute the core of the healthy template).
The remaining thirteen meta-clusters include populations from a small fraction of
samples. These populations could correspond to biological variability in the healthy
samples,variations in the FC experimental protocols, and possibly also from the splitting of populations that could be an artifact of the clustering algorithm.
The AML template created from Tube 6 consists of forty meta-clusters (almost
twice the number in the more numerous healthy samples). Fig. 7.2(d) shows that,
unlike the healthy samples, the AML samples are heterogeneous with respect to the
meta-clusters they participate in: There are 21 meta-clusters that include cell populations from at least 20% of the AML samples. Some of the meta-clusters common
to a large number of AML samples represent non-AML specific cell populations. For
example, Fig. 7.2(e) shows the average marker expressions of the meta-cluster shown
in the blue bar in Fig. 7.2(d). This meta-cluster has low to medium side scatter
and high CD45 expression, and therefore represents lymphocytes (Fig. 7.1). Since

127
lymphocytes are not affected by AML, this meta-cluster does not express any AMLrelated markers, and hence can be described as HLA-DR− CD117− CD34− CD38− , as
expected. Fig. 7.2(f) shows the expression profile of another meta-cluster shown in
the red bar in Fig. 7.2(d). This meta-cluster consists of five cell populations from five
AML samples (with subject ids 37, 58, 67, 89, and 117) and exhibits medium side
scatter and CD45 expression and therefore, represents myeloid blast cells. Furthermore, this meta-cluster is HLA-DR− CD117+ CD34− CD38+ , and represents a profile
known to be that of Acute Promyelocytic Leukemia (APL) [170]. APL is subtype
M3 in the FAB classification of AML [165]) and is characterized by chromosomal
translocation of retinoic acid receptor-alpha (RARα) gene on chromosome 17 with
the promyelocytic leukemia gene (PML) on chromosome 15, a translocation denoted
as t(15;17). In the feature space of Tube 6, these APL samples are similar to each
other while significantly different from the other AML samples. The template-based
classification algorithm groups these samples together in the subtree colored red in
the AML template tree shown in Fig. 7.2(b).

7.3.3 Identifying meta-clusters symptomatic of AML
In each tube, meta-clusters are registered across the AML and healthy templates
√
using the mixed edge cover (MEC) algorithm. The unmatch-penalty λ is set to 7
so that a pair of meta-clusters get matched only if the average squared deviation
across all dimensions is less than one. Meta-clusters in the AML template that are
not matched to any meta-clusters in the healthy template represent the abnormal,
AML-specific immunophenotypes while the matched meta-clusters represent healthy
or non-AML-relevant cell populations. Table 7.2 lists several unmatched meta-clusters
indicative of AML from different tubes. As expected, every unmatched meta-cluster
displays medium side scatter and CD45 expression characteristic of myeloid blast cells,
and therefore we can omit FS, SS, and CD45 values in Table 7.2. I briefly discuss

128
Table 7.2
Some of the meta-clusters characteristic of AML for the 23 AML samples
in the training set. In the second column, ‘−’, ‘low’, and ‘+’ denote very
low, low and high, abundance of a marker, respectively, and ± denotes
a marker that is positively expressed by some samples and negatively
expressed by others. The number of samples participating in a metacluster is shown in the third column. The average fraction of cells in a
sample participating in a meta-cluster, and the standard deviation, are
shown in the fourth column.
Tube

Marker expression

#Samples

Fraction of cells

2

Kappalow Lambdalow CD19+ CD20−

5

6.3%(±6.8)

3

CD7+ CD4− CD8− CD2−

4

18.0%(±4.8)

4

CD15− CD13+ CD16− CD56−

17

16.6%(±6.9)

4

CD15− CD13+ CD16− CD56+

8

11.1%(±5.7)

5

CD14− CD11c− CD64− CD33+

10

13.5%(±5.2)

5

CD14− CD11c+ CD64− CD33+

18

10.8%(±3.8)

5

CD14low CD11c+ CD64low CD33+

6

13.8%(±4.3)

6

HLA-DR+ CD117+ CD34+ CD38+

11

13.3%(±2.6)

6

HLA-DR+ CD117± CD34+ CD38+

13

17.3%(±6.6)

6

HLA-DR− CD117± CD34− CD38+

5

12.9%(±4.7)

7

CD5− CD19+ CD3− CD10−

3

12.3%(±2.4)

7

CD5+ CD19− CD3− CD10−

3

10.0%(±8.5)

7

CD5− CD19− CD3− CD10+

1

9.9%

the immunophenotypes represented by each AML-specific meta-cluster in each tube,
omitting the isotype control Tube 1 and unstained Tube 8.
Tube 6 is the most important panel for diagnosing AML since it includes several
markers expressed by AML blasts. HLA-DR is an MHC class II cell surface receptor
complex that is expressed on antigen-presenting cells, e.g., B cells, dendritic cells,
macrophages, and activated T cells. It is expressed by myeloblasts in most subtypes
of AML except M3 and M7 [171]. CD117 is a tyrosine kinase receptor (c-KIT)

129
expressed in blasts of some cases (30 − 100%) of AML [171]. CD34 is a cell adhesion
molecule expressed on different stem cells and on the blast cells of many cases of
AML (40%) [172]. CD38 is a glycoprotein found on the surface of blasts of several
subtypes of AML but usually not expressed in the M3 subtypes of AML [173]. In Tube
6, the matching algorithm has identified two AML-specific meta-clusters with high
expressions of HLA-DR and CD34. One of them also expresses CD117 and CD34,
and Fig. 7.3(c) shows the bivariate contour plots of the cell populations contained
in this meta-cluster. The second meta-cluster expresses positive but low levels of
CD117 and CD34. These two HLA-DR+ CD34+ meta-clusters together are present
in 18 out of the 23 training AML samples. The remaining five samples (subject id:
5, 7, 103, 165, 174) express HLA-DR− CD117± CD34− CD38+ myeloblasts, which is
an immunophenotype of APL [170] as was discussed earlier. Fig. 7.3(d) shows the
bivariate contour plots of this APL-specific meta-cluster.
Tube 5 contains several antigens typically expressed by AML blasts, of which
CD33 is the most important. CD33 is a transmembrane receptor protein usually
expressed on immature myeloid cells of the majority of cases of AML (91% reported
in [174]). The AML specific meta-clusters identified from markers in Tube 5 (see
Table 7.2) include CD33+ myeloblasts from every sample in the training set. Several
of the CD33+ populations also express CD11c, a type I transmembrane protein found
on monocytes, macrophages and neutrophils. CD11c is usually expressed by blast
cells in acute myelomonocytic leukemia (M4 subclass of AML), and acute monocytic
leukemia (M5 subclass of AML) [171]. Therefore CD14− CD11c+ CD64− CD33+ metacluster could represent patients with M4 and M5 subclasses of AML. I show the
bivariate contour plots of this meta-cluster in Fig. 7.3(b) .
Tube 4 includes several markers usually expressed by AML blasts, of which CD13
is the most important. CD13 is a zinc-metalloproteinase enzyme that binds to the cell
membrane and degrades regulatory peptides [172]. CD13 is expressed on the blast
cells of the majority of cases of AML (95% as reported in [174]). Table 7.2 shows
two AML-specific meta-clusters detected from the blast cells in Tube 4. Both of the

130
meta-clusters are CD13+ and they include populations from every AML sample in
the training set. In addition to CD13, eight AML samples express CD56 glycoprotein
that is naturally expressed on NK cells, a subset of CD4+ T cells and a subset of
CD8+ T cells. Raspadori et al. [175] reported that CD56 was more often expressed
by myeloblasts in FAB subclasses M2 and M5, which covers about 42% of AML cases
in a study by Legrand et al. [174]. In this dataset, we observe more AML samples expressing CD13+ CD56− blasts than expressing CD13+ CD56+ blasts, which conforms
to the findings of Raspadori et al. [175]. Fig. 7.3(a) shows the bivariate contour plots
of the CD13+ CD56− meta-cluster. CD15 is a carbohydrate adhesion molecule (not a
protein) expressed on mature glycoproteins and CD16 is an Fc (Fragment, crystallizable) receptor protein expressed on mature NK cells, macrophages, and neutrophils.
They are not usually expressed by myeloblasts and were absent in the AML-related
meta-clusters.
Tube 2 is a B cell panel measuring B cell markers CD19 and CD20, and Kappa
(κ) and Lambda (λ), immunoglobulin light chains present on the surface of antibodies
produced by B lymphocytes. This panel is used in diagnosing diseases such as B-cell
lymphomas and acute lymphoblastic leukemia (ALL) [171]. B-cell specific markers
are occasionally co-expressed with myeloid antigens especially in FAB M2 subtype of
AML (with chromosomal translocation t(8;21)) [171, 176]. In Tube 2, the matching
algorithm has identified a meta-cluster in the myeloblasts that expresses high levels
of CD19 and low levels of Kappa and Lambda. The five samples with subject ids 5,
7, 103, 165, and 174 participating in this meta-cluster possibly belong to the FAB-M2
subtype of AML.
Tube 3 is a T cell panel measuring T cell specific markers CD4, CD8, CD2, and
CD7. This panel is frequently used in diagnosing T-lineage ALL [171,172]. In significant minority of cases of AML (e.g., 37% of cases reported in [174]), CD7 is aberrantly
expressed by myeloblasts [171]. The matching algorithm identifies a meta-cluster in
the blast region, which includes four populations expressing CD7+ CD4− CD8− CD2− .

0

0

0

0

0.6
0.4

SS
SS

0.0

0.2

(a) Tube 6
HLA-DR+CD117+
CD34+CD38+
blasts

0.8

131

0.0 0.2 0.4 0.6 0.8 1.0 0.0 0.2 0.4 0.6 0.8 1.0 0.0

0.2

0.4

0.6

0.2

0.4

0.6

CD117−
PE
CD117−PE

0.8 0.0

0.2

0.4

0.6

0.8 0.0

0.2

0.4

0.6

CD34−
PC5
CD34−PC5

0.8 0.0

0.2

0.4

0.6

0.8

0.8 0.0

0.2

0.4

0.6

0.8

CD38−
PC7
CD38−PC7

0

0

0

0

0.6
0.4

SS
SS

0.0

0.2

(b) Tube 6
HLA-DR-CD117±
CD34-CD38+
blasts

HLA−
DR−
FITC
HLA−
DR−FITC

0.8

CD45−
ECD
CD45−ECD

0.0 0.2 0.4 0.6 0.8 1.0 0.0

CD45−
ECD
CD45−ECD

0.2

0.4

0.6

HLA−
DR−
FITC
HLA−
DR−FITC

0.8 0.0

CD117−
PE
CD117−PE

CD34−
PC5
CD34−PC5

CD38−
PC7
CD38−PC7

Figure 7.3. Bivariate contour plots (side scatter vs. individual marker)
for two meta-clusters (one in each row) indicative of AML. The ellipses
in a subplot denote the 95th quantile contour lines of cell populations included in the corresponding meta-cluster. Myeloblast cells have medium
side scatter (SS) and CD45 expressions. The red lines indicate approximate myeloblast boundaries (located on the left-most subfigures in each
row and extended horizontally to the subfigures on the right) and confirm
that these meta-clusters represent immunophenotypes of myeloblast cells.
Blue vertical lines denote the +/- boundaries of a marker. Gray subplots
show contour plots of dominant markers defining the meta-cluster in the
same row. (a) HLA-DR+ CD117+ CD34+ CD38+ meta-cluster shared by
11 AML samples in Tube 6. (b) HLA-DR− CD117± CD34− CD38+ metacluster shared by 5 AML samples in Tube 6. This meta-cluster is indicative of acute promyelocytic leukemia (APL). These bivariate plots are
shown for illustration only, since the populations of specific cell types are
identified from seven-dimensional data.

This finding confirms that T cell antigens are infrequently expressed by AML blasts,
and therefore, they are less useful in AML diagnosis and classification.
Tube 7 is a lymphocyte panel with several markers expressed on T and B lymphocytes and is less important in detecting AML since they are infrequently expressed
by AML blasts. In Tube 7, we obtain three samples with CD19+ , three samples with
CD5+ and a sample with CD10+ myeloblast cells. The meta-clusters in rows 11-13
in Table 7.2 confirm that lymphocyte antigens are infrequently expressed by AML
blasts and are less useful in AML diagnosis and classification [171, 176].

132
Table 7.3
Precision (P), Recall (R), Sensitivity (S) and F-measure (F) of the
template-based classification in the training set and test set of the AML
data. The statistical measures are computed for each tube separately and
two combinations of tubes.
Tubes

Training set

Test set

P

R

S

F

P

R

S

F

1

1.00

0.26

1.00

0.41

1.00

0.15

1.00

0.26

2

0.86

0.26

0.99

0.40

0.83

0.25

0.99

0.38

3

1.00

0.52

1.00

0.69

1.00

0.35

1.00

0.52

4

0.94

0.74

0.99

0.83

1.00

0.75

1.00

0.86

5

0.75

0.91

0.96

0.82

0.65

0.85

0.94

0.74

6

1.00

0.70

1.00

0.82

1.00

0.80

1.00

0.89

7

0.52

0.48

0.94

0.50

0.48

0.60

0.92

0.53

All (2-7)

1.00

0.74

1.00

0.85

1.00

0.85

1.00

0.92

4,5,6

1.00

0.96

1.00

0.98

1.00

1.00

1.00

1.00

7.3.4 Impact of each tube in the classification
As discussed in the methods section, I build six independent classifiers based
on the healthy and AML templates created from Tubes 2-7 of the AML dataset.
Tubes 1 and 8 are omitted since the former is an isotope control and the latter
is unstained, and therefore, they are uninformative for classification. A sample is
classified as an AML sample if the classification score is positive, and as a healthy
sample otherwise. Let true positives (TP) be the number of AML samples correctly
classified, true negatives (TN) be the number of healthy samples correctly classified,
false positives (FP) be the number of healthy samples incorrectly classified as AML,
and false negatives (FN) be the number of AML samples incorrectly classified as
healthy. Then, I evaluate the performance of each template-based classifier with the

0.5

AML

classification boundary

0

50

100

150

1.0

(b) Test set

Actual class
Healthy
AML

0.5

1.0

Healthy

classification boundary

0.0

Actual class
Sam

Classification score

(a) Training set

0.0

Classification score

133

0

Training samples, ordered

50

100

150

Test samples, ordered

Figure 7.4. Average classification score from Tubes 4,5,6 for each sample
in the (a) training set and (b) test set. Samples with scores above the
horizontal line are classified as AML, and as healthy otherwise. The actual
class of each sample is also shown. An AML sample (subject id 116) is
always misclassified in the training set, and this is discussed in the text.

well-known four statistical measures: Precision, Recall(Sensitivity), Specificity, and
TP
TP
, Recall(Sensitivity) = TP+FN
, Specificity =
TP+FP
2(Precision×Recall)
. These four measures take values in the interval
Precision+Recall

F-value, defined as Precision =
TN
,
FP+TN

and F-value =

[0,1], and the higher the values the better the classifier.
First, I evaluate the impact of each tube in the classification of the training samples. For a training sample X, the classification score is computed by comparing it
with the healthy and AML templates created from the training set after removing
X. The predicted status of X is then compared against true status to evaluate the
classification accuracy. Table 7.3 (left panel) shows various statistical measures for
the classifiers defined in Tubes 2-7 of the training set. The classifiers based on Tubes
4, 5, and 6 have the highest sensitivity because these tubes include several markers
relevant to AML diagnosis [170,171]. The number of true negatives TN is high in every tube since the identification of healthy samples does not depend on the detection
of AML-specific markers. Hence specificity is close to one for all tubes. Analogously,
FP is low for most tubes, and we observe high precision for most tubes. The F-value
is a harmonic mean of precision and recall, and denotes the superior classification
ability of markers in Tubes 4-6. Averaging scores from all tubes does not improve
the sensitivity and F-value dramatically. However, combining Tubes 4-6 gives almost

134
perfect classification with one misclassification for the training set. I plot the average
classification scores from Tubes 4-6 for the training samples in Fig. 7.4(a). On the xaxis, the healthy samples are placed first followed by the AML samples, and samples
in each group are placed in the ascending order of the average classification score.
The class labels of samples are also shown (blue circles for healthy and red triangles
for AML samples).
In Fig. 7.4(a), we observe an AML sample (subject id 116) with score below
the classification boundary. Fig. 7.5 shows the cell populations present in subject
116 projected on the SS and CD45 channels. In this subject, the proportion of
myeloid blasts is 4.4%, which is lower than the minimum 20% AML blasts necessary
to recognize a patient to be AML-positive according to the WHO guidelines [177]
(the FAB threshold is even higher, at 30%). (Recall Fig. 7.1 for a plot of the cell
types in healthy and AML samples.) Hence this is either a rare case of AML, or one
with minimal residual disease after therapy, or perhaps it was incorrectly labeled as
AML in the training set. Since the template-based classifier weighs individual clusters
with their cell proportions, the abnormal myelobasts contribute insignificantly in the
final score computed by Eq. 7.1. As a result, Subject 116 is placed with the healthy
samples in Fig. 7.4. Subject 116 was classified with the healthy samples by methods
in other published work [166].

7.3.5 Classifying test samples
Now we turn to the test samples. For each tube, I compute the classification
score for each sample in the test set using templates created from the training set
and applying Eq. 7.1. Since the average classification score from Tubes 4-6 performs
best for the training set, it is used as a classifier for the test set as well. Since
the status of test samples was released after the DREAM6/FlowCAP2 challenge, we
can determine the classification accuracy of the test samples. Fig. 7.4(b) shows the
classification scores of the test samples, where samples are placed in ascending order

0.8

135
Subject 116

0.6

Lymphoid blasts
Myeloid cells

0.4

SS (log)

Lymphocytes

Myeloid blasts
Monocytes

0.2

myeloid blasts (4.4%)
0.2

0.4

0.6

0.8

CD45−ECD (log)

Figure 7.5. Cell populations in a sample from subject 116. Even though
this sample is marked as AML by the organizers of DREAM6/FlowCAP2
competition, it contains only 4.4% myeloid blast cells (shown in red).
According to the World Health Organization (WHO) guidelines, AML is
only confirmed when peripheral blood contains at least 20% immature
myeloblasts. Hence, this subject is either a rare AML subtype, or has
been incorrectly labeled.

of classification scores. In Fig. 7.4(b), we observe perfect classification in the test
set. Similar to the training set, I tabulate statistical measures for the classifiers in
Table 7.3.
When classifying a sample X, we can assume the null hypothesis: X is healthy
(non-leukemic). The sample X receives a positive score if it contains AML-specific
immunophenotypes, and the higher the score, the stronger the evidence against the
null hypothesis. Since Tube 1 (isotype control) does not include any AML-specific
markers, it can provide a background distribution for the classification scores. In
Tube 1, 174 out of 179 training samples have negative classification scores, but five
samples have positive scores, with values less than 0.2. In the best classifier designed
from Tubes 4, 5, 6, we observe that two AML-positive samples in the training set
and three AML-positive samples in the test set have scores between 0 and 0.2. The
classifier is relatively less confident about these samples; nevertheless, the p-values of
these five samples (computed from the distribution in Tube 1) are still small (< 0.05),
so that they can be classified as AML-positive. The rest of the AML samples in the

136
training and test sets have scores greater than 0.2 and the classifier is quite confident
about their status (p-value zero).
Four AML samples in the test set (ids 239, 262, 285, and 326) were subclassified
as APL by comparing against distinct template trees for APL and the other AML
samples in the training set (cf. Fig. 7.2 (b)).
Finally, I state the computational times required on an iMac with four 2.7 GHz
cores and 8 GB memory. The code is written in C++ and R. Consider a single tube
with 359 samples in it. The k-means clustering of all samples took one hour, primarily
because we need to run the algorithm multiple times (about ten on the average) to
find the optimal value of the number of clusters. Creating the healthy template from
156 samples in the training set required 10 seconds (s) on one core, and the AML
template for 23 AML samples took 0.5s on one core. Cross validation (leave one out)
of the training set took 30 minutes, and computing the classification score for the 180
test samples took 15s, both on four cores. I could have reduced the running time by
executing the code in parallel on more cores. In an ongoing project, we have made
the dominant step, the k-means clustering of all the samples with an optimal number
of clusters, faster using a GPU, reducing the total time to a few minutes.

7.4 Conclusions
In this chapter, I have demonstrated that an algorithmic pipeline for templatebased classification can successfully identify immunophenotypes of clinical interest in
AML. These could be used to differentiate the subtypes of AML, which is advantageous since prognosis and treatment depends on the subtype. The templates enable
us to classify AML samples in spite of their heterogeneity. This was accomplished by
creating a scoring function that accounts for the subtleties in cell populations within
AML samples. We are currently applying this approach to a larger AML data set,
and intend to analyze other heterogeneous data sets.

137

8 CONCLUSIONS AND FUTURE WORK
8.1 Conclusions
In my dissertation, I have explored, designed and developed a collection of algorithms for analyzing multi-parametric flow cytometry data.

These algorithms

solve sample preprocessing, variance stabilization, clustering, population registration, meta-clustering, sample classification, and other related problems arising in FC
data analysis. I have assembled the algorithms into a data analysis pipeline, flowMatch [42], that is made available as an open-source R package in Bioconductor
(http://www.bioconductor.org/). The pipeline has been employed to analyze several practical datasets and the results are published in peer-reviewed journals and
conferences [36, 37, 46].
Flow cytometry (FC) is a widely used platform for measuring phenotypes of
individual cells from millions of cells in biological samples. Modern FC technology gives rise to high-dimensional and high-content data that challenges the ability
to manually investigate the data and interpret the results. To address the limitations of manual analysis, researchers have developed a new branch of research called
the “computational cytometry”. Along with a number of contemporary software
tools [14, 23, 24, 26, 27, 31, 32, 39, 56, 59], flowMatch automates different analysis steps
of FC data with an aim to prevent the data analysis from being the bottleneck in
scientific discovery based on cytometry.
The flowMatch pipeline consists of six well defined algorithmic modules for (1)
unmixing of spectra (compensation) to remove the effect of overlapping fluorescence
channels, (2) transforming data in order to stabilize variance and normalize data,
(3) identifying cell population by automated gating or clustering algorithm in the
high-dimensional marker space, (4) registering cell populations (cluster labeling or

138
matching) across samples, (5) representing a class of samples with high-level templates, and (6) classifying samples based on the phenotypic pattern of the cell clusters. Each module of flowMatch is designed to perform a specific task independent
of other modules of the pipeline. However, they can also be employed sequentially in
the order described in Fig. 1.6 to perform the complete data analysis.
I have developed a variance stabilization (VS) method called flowVS for removing
the mean-variance correlation arisen in fluorescence based flow cytometry. flowVS
stabilizes variance by transforming FC samples with the inverse hyperbolic sine function whose parameters are estimated by minimizing Bartlett’s likelihood-ratio statistics. For population identification, I demonstrate that several simple, off-the-shelf
clustering algorithms provide more accurate and robust partition of an FC sample. I
describe several cluster validation methods that can be used to select the optimum
parameters for a clustering algorithm (e.g., the optimum number of clusters), as well
as choosing the best algorithm for a dataset. Furthermore, I describe an algorithm
for computing the consensus of multiple clustering solutions, which performs better
than any individual algorithm.
For population registration [27,36], I developed a robust mixed edge cover (MEC)
algorithm that matches cell populations across a pair of FC samples. The MEC algorithm uses a robust graph-theoretic framework to match a cluster from a sample
to zero or more clusters in another sample and thus solves the problem of missing or
splitting populations. Next, I describe a hierarchical algorithm for encapsulating a
collection of sample belonging to the same class with a template. A template is a collection of relatively homogeneous meta-clusters commonly shared across samples of a
given class, thus describing the key immunophenotypes of an overall class of samples.
Finally, I demonstrate that the use of templates leads to efficient classification algorithms. By comparing a sample with class templates, the sample is predicted to come
from a class whose template it is most similar to. The template-base classification is
robust and efficient because it compares samples to cleaner and fewer class templates
rather than the large number of noisy samples themselves.

139
I have employed different components of flowMatch for classifying leukemia samples, evaluating the phosphorylation effects on T cells, classifying healthy immune
profiles, comparing the impact of two treatments against Multiple Sclerosis, and classifying the HIV vaccination status. In these analyses, flowMatch is able to reach
biologically meaningful conclusions with the automated algorithms. The algorithms
included in flowMatch can also be applied to problems outside of flow cytometry such
as from microarray data analysis and image recognitions.

8.2 Future work
Application to larger and higher-dimensional datasets: Thus far, I have employed flowMatch to five FC datasets, the largest of which is an AML dataset
with nearly 3000 seven-dimensional samples.

More rigorous testing with other

datasets will certainly increase the confidence about the correctness and efficiency
of the pipeline. I am in the process of getting access to large cytomics data from
Immune Tolerance Network (http://www.immunetolerance.org/), FlowRepository
(http://flowrepository.org/), Cytobank (http://www.cytobank.org), and from
other public repositories. I have tested the flowMatch pipeline with up to eight dimensional samples. However, the newly developed mass cytometry technology [7] can
investigate more than 40 parameters of a single cell. flowMatch needs to be tested
and enhanced (if needed) for this high dimensional data.
Enhancing the modules of the flowMatch pipeline: The flowMatch pipeline is still
under development. I plan to enhance different components of the pipeline with additional functionalities from which the users can choose depending on the objective
of the data analysis. For variance stabilization, in addition to the inverse hyperbolic
sine (asinh) function, several other transformations can be tested. It also remains a
future work to design and implement a multi-dimensional variance stabilization algorithm. In current work, I am incorporating the proportion of cells into the population
registration algorithm, which will lead to a between-sample distance metric similar

140
in spirit of the earth mover’s distance [133, 139]. For the meta-clustering algorithm, I
investigate the use of networks instead of trees to organize the templates, similar in
spirit to the use of networks rather than trees in phylogenetics [160]. Finally, I am
considering other classification algorithms, such as the logistic regression [178], for
complementing the template-based classification methods.
Parallelizing algorithms for faster processing: At present, the modules of flowMatch are implemented as serial algorithms. However, given the ever increasing
volume of data and the availability of high-performance computers, the algorithms
of the pipeline can be parallelized to analyze a dataset faster without incurring any
additional cost. I consider parallelizing flowMatch at different levels. The variance
stabilization algorithm is embarrassingly parallel where density peaks on different
channels can be identified and their likelihood-ratio test can be evaluated on different
processing units. A number of parallel clustering algorithms have been discussed in
the literature [179–181] and they can be integrated into the flowMatch pipeline. The
quality of partitions can be evaluated in parallel for different choices of clustering
parameters. The population registration problem can be solved faster by parallelizing the mixed edge cover algorithm. I have already developed algorithms for parallel
cardinality matching on bipartite graphs [47–49]. Developing parallel algorithms for
weighted matching problem remains a future work. However, the number of populations is generally small (tens to hundreds) in typical FC samples, and therefore
parallel population registration might not decrease the processing time significantly.
The samples are processed in a sequential order by the meta-clustering algorithm,
which is difficult to parallelize. However, we can relax the strict order of sample
processing, and then parallelize the hierarchical algorithm. In the dynamic classification algorithm, we can insert multiple samples into the template tree simultaneously
whenever the inserted samples update different parts of the template-tree.
Applying the pipeline to problem outside of the flow cytometry: Stabilizing variance, clustering, matching, creating templates are general concepts with applications
to different areas. Therefore, the algorithms developed in this dissertation can be

141
applied – possibly with simple modifications– to problems outside of flow cytometry.
I have already applied the variance stabilization framework to microarray data and
compared the results with a state-of-the-art software developed for microarrays in
Chapter 2. Likewise, other algorithms have applications to problems from microarrays, ChIp-Seq, etc.
FC data projected on a lower dimension has considerable similarities with images from tradition photography and from bio-imaging technologies such as imaging
cytometry, MRI, etc. Therefore, the algorithms in flowMatch have direct application in analyzing images from these technologies. For example, consider an image
recognition application where the clustering algorithm segments images into different
features (eyes, nose, etc.), the matching algorithm registers different features across
images, and the classification algorithm recognizes the images with templates created
from existing image library. This image recognition problem can be solved by the
clustering, matching and classification algorithms from the flowMatch pipeline.
I expect this dissertation to be a strong algorithmic contribution with application
to flow cytometry, as well as to domains outside of flow cytometry.

LIST OF REFERENCES

142

LIST OF REFERENCES

[1] R. Coico and G. Sunshine, Immunology: A Short Course. Wiley-Blackwell,
2009.
[2] J. W. Mellors, A. Munoz, J. V. Giorgi, J. B. Margolick, C. J. Tassoni, P. Gupta,
L. A. Kingsley, J. A. Todd, A. J. Saah, R. Detels, et al., “Plasma viral load
and CD4+ lymphocytes as prognostic markers of HIV-1 infection,” Annals of
Internal Medicine, vol. 126, no. 12, pp. 946–954, 1997.
[3] H. T. Maecker, J. P. McCoy, and R. Nussenblatt, “Standardizing immunophenotyping for the human immunology project,” Nature Reviews Immunology,
vol. 12, no. 3, pp. 191–200, 2012.
[4] J. Van Dongen, L. Lhermitte, S. Böttcher, J. Almeida, V. Van der Velden,
J. Flores-Montero, A. Rawstron, V. Asnafi, Q. Lécrevisse, P. Lucio, et al.,
“Euroflow antibody panels for standardized n-dimensional flow cytometric immunophenotyping of normal, reactive and malignant leukocytes,” Leukemia,
vol. 26, no. 9, pp. 1908–1975, 2012.
[5] H. M. Shapiro, Practical Flow Cytometry. Wiley-Liss, 2005.
[6] E. Lugli, M. Roederer, and A. Cossarizza, “Data analysis in flow cytometry:
The future just started,” Cytometry Part A, vol. 77, pp. 705–713, 2010.
[7] S. C. Bendall, E. F. Simonds, P. Qiu, D. A. El-ad, P. O. Krutzik, R. Finck, R. V.
Bruggner, R. Melamed, A. Trejo, O. I. Ornatsky, et al., “Single-cell mass cytometry of differential immune and drug responses across a human hematopoietic
continuum,” Science, vol. 332, no. 6030, pp. 687–696, 2011.
[8] S. P. Perfetto, P. K. Chattopadhyay, and M. Roederer, “Seventeen-colour flow
cytometry: Unravelling the immune system,” Nature Reviews Immunology,
vol. 4, no. 8, pp. 648–655, 2004.
[9] J. M. Peters and M. Q. Ansari, “Multiparameter flow cytometry in the diagnosis and management of acute leukemia,” Archives of Pathology & Laboratory
Medicine, vol. 135, no. 1, pp. 44–54, 2011.
[10] R. A. Seder, P. A. Darrah, and M. Roederer, “T-cell quality in memory and protection: Implications for vaccine design,” Nature Reviews Immunology, vol. 8,
no. 4, pp. 247–258, 2008.
[11] S. P. Perfetto, P. K. Chattopadhyay, L. Lamoreaux, R. Nguyen, D. Ambrozak,
R. A. Koup, and M. Roederer, “Amine reactive dyes: An effective tool to
discriminate live and dead cells in polychromatic flow cytometry,” Journal of
Immunological Methods, vol. 313, no. 1, pp. 199–208, 2006.

143
[12] N. Le Meur, A. Rossini, M. Gasparetto, C. Smith, R. R. Brinkman, and
R. Gentleman, “Data quality assessment of ungated flow cytometry data in
high throughput experiments,” Cytometry Part A, vol. 71, no. 6, pp. 393–403,
2007.
[13] M. Roederer, “Spectral compensation for flow cytometry: Visualization artifacts, limitations, and caveats,” Cytometry, vol. 45, no. 3, pp. 194–205, 2001.
[14] C. B. Bagwell and E. G. Adams, “Fluorescence spectral overlap compensation for any number of flow cytometry parameters,” Annals of the New York
Academy of Sciences, vol. 677, no. 1, pp. 167–184, 1993.
[15] D. Novo, G. Grégori, and B. Rajwa, “Generalized unmixing model for multispectral flow cytometry utilizing nonsquare compensation matrices,” Cytometry
Part A, vol. 83, pp. 508–520, May 2013.
[16] C. Snow, “Flow cytometer electronics,” Cytometry Part A, vol. 57, no. 2, pp. 63–
69, 2004.
[17] C. Bagwell, “Hyperlog – A flexible log-like transform for negative, zero, and
positive valued data,” Cytometry Part A, vol. 64, no. 1, pp. 34–42, 2005.
[18] D. Parks, M. Roederer, and W. Moore, “A new logicle display method avoids
deceptive effects of logarithmic scaling for low signals and compensated data,”
Cytometry Part A, vol. 69, no. 6, pp. 541–551, 2006.
[19] J. Dvorak and S. Banks, “Modified Box-Cox transform for modulating the dynamic range of flow cytometry data,” Cytometry, vol. 10, no. 6, pp. 811–813,
2005.
[20] D. Novo and J. Wood, “Flow cytometry histograms: Transformations, resolution, and display,” Cytometry Part A, vol. 73, no. 8, pp. 685–692, 2008.
[21] B. Efron, “Transformation theory: How normal is a family of distributions?,”
The Annals of Statistics, vol. 10, no. 2, pp. 323–339, 1982.
[22] W. Huber, A. Von Heydebreck, H. Sültmann, A. Poustka, and M. Vingron,
“Variance stabilization applied to microarray data calibration and to the
quantification of differential expression,” Bioinformatics, vol. 18, no. suppl 1,
pp. S96–S104, 2002.
[23] G. Finak, J. Perez, A. Weng, and R. Gottardo, “Optimizing transformations
for automated, high throughput analysis of flow cytometry data,” BMC Bioinformatics, vol. 11, no. 1, p. 546, 2010.
[24] S. Ray and S. Pyne, “A computational framework to emulate the human perspective in flow cytometric data analysis,” PLoS One, vol. 7, no. 5, p. e35693,
2012.
[25] C. Chan, F. Feng, J. Ottinger, D. Foster, M. West, and T. B. Kepler, “Statistical
mixture modeling for cell subtype identification in flow cytometry,” Cytometry
Part A, vol. 73, no. 8, pp. 693–701, 2008.
[26] K. Lo, R. Brinkman, and R. Gottardo, “Automated gating of flow cytometry
data via robust model-based clustering,” Cytometry Part A, vol. 73, no. 4,
pp. 321–332, 2008.

144
[27] S. Pyne, X. Hu, K. Wang, E. Rossin, T. Lin, L. Maier, C. Baecher-Allan,
G. McLachlan, P. Tamayo, D. Hafler, et al., “Automated high-dimensional flow
cytometric data analysis,” Proceedings of the National Academy of Sciences,
vol. 106, no. 21, pp. 8519–8524, 2009.
[28] Y. Qian, C. Wei, F. Eun-Hyung Lee, J. Campbell, J. Halliley, J. A. Lee, J. Cai,
Y. M. Kong, E. Sadat, E. Thomson, et al., “Elucidation of seventeen human
peripheral blood B-cell subsets and quantification of the tetanus response using
a density-based method for the automated identification of cell populations in
multidimensional flow cytometry data,” Cytometry Part B: Clinical Cytometry,
vol. 78, no. S1, pp. S69–S82, 2010.
[29] G. Walther, N. Zimmerman, W. Moore, D. Parks, S. Meehan, I. Belitskaya,
J. Pan, and L. Herzenberg, “Automatic clustering of flow cytometry data with
density-based merging,” Advances in Bioinformatics, vol. 2009, 2009.
[30] H. Zare, P. Shooshtari, A. Gupta, and R. Brinkman, “Data reduction for spectral clustering to analyze high throughput flow cytometry data,” BMC Bioinformatics, vol. 11, no. 1, p. 403, 2010.
[31] N. Aghaeepour, R. Nikolic, H. H. Hoos, and R. R. Brinkman, “Rapid cell
population identification in flow cytometry data,” Cytometry Part A, vol. 79,
no. 1, pp. 6–13, 2011.
[32] N. Aghaeepour, G. Finak, H. Hoos, T. R. Mosmann, R. Brinkman, R. Gottardo,
R. H. Scheuermann, et al., “Critical assessment of automated flow cytometry
data analysis techniques,” Nature Methods, vol. 10, no. 3, pp. 228–238, 2013.
[33] A. K. Jain, M. N. Murty, and P. J. Flynn, “Data clustering: A review,” ACM
Computing Surveys (CSUR), vol. 31, no. 3, pp. 264–323, 1999.
[34] M. Halkidi, Y. Batistakis, and M. Vazirgiannis, “On clustering validation techniques,” Journal of Intelligent Information Systems, vol. 17, no. 2-3, pp. 107–
145, 2001.
[35] K. Hornik and W. Böhm, “Hard and soft euclidean consensus partitions,”
in Data Analysis, Machine Learning and Applications, pp. 147–154, Springer,
2008.
[36] A. Azad, S. Pyne, and A. Pothen, “Matching phosphorylation response patterns
of antigen-receptor-stimulated T cells via flow cytometry,” BMC Bioinformatics, vol. 13, no. Suppl 2, p. S10, 2012.
[37] A. Azad, J. Langguth, Y. Fang, A. Qi, and A. Pothen, “Identifying rare cell
populations in comparative flow cytometry,” Lecture Notes in Computer Science, vol. 6293, pp. 162–175, 2010.
[38] D. B. Allison, X. Cui, G. P. Page, and M. Sabripour, “Microarray data analysis:
From disarray to consolidation and consensus,” Nature Reviews Genetics, vol. 7,
no. 1, pp. 55–65, 2006.
[39] J. Spidlen, A. Barsky, K. Breuer, P. Carr, M.-D. Nazaire, B. A. Hill, Y. Qian,
T. Liefeld, M. Reich, J. P. Mesirov, P. Wilkinson, R. H. Scheuermann, R.-P.
Sekaly, and R. R. Brinkman, “Genepattern flow cytometry suite,” Source Code
for Biology and Medicine, vol. 8, no. 1, p. 14, 2013.

145
[40] N. Kotecha, P. O. Krutzik, and J. M. Irish, “Web-based analysis and publication
of flow cytometry experiments,” Current Protocols in Cytometry, vol. 10, 2010.
[41] A. Azad, B. Rajwa, and A. Pothen, “flowMatch: An algorithmic pipeline for
flow cytometry data analysis,” Submitted, 2014.
[42] A. Azad, flowMatch: Matching and meta-clustering in flow cytometry, 2013. R
package version 0.99.2.
[43] R. C. Gentleman, V. J. Carey, D. M. Bates, B. Bolstad, M. Dettling, S. Dudoit,
B. Ellis, L. Gautier, Y. Ge, J. Gentry, et al., “Bioconductor: Open software
development for computational biology and bioinformatics,” Genome Biology,
vol. 5, no. 10, p. R80, 2004.
[44] L. Maier, D. Anderson, P. De Jager, L. Wicker, and D. Hafler, “Allelic variant
in CTLA4 alters T cell phosphorylation patterns,” Proceedings of the National
Academy of Sciences, vol. 104, no. 47, p. 18607, 2007.
[45] A. Azad, B. Rajwa, and A. Pothen, “Immunophenotypes of acute myeloid
leukemia from flow cytometry data using templates,” ArXiv, 2014.
[46] A. Azad, A. Khan, B. Rajwa, S. Pyne, and A. Pothen, “Classifying immunophenotypes with templates from flow cytometry,” in Proceedings of the International Conference on Bioinformatics, Computational Biology and Biomedical
Informatics (ACM BCB), p. 256, ACM, 2013.
[47] A. Azad, M. Halappanavar, S. Rajamanickam, E. G. Boman, A. Khan, and
A. Pothen, “Multithreaded algorithms for maximum matching in bipartite
graphs,” in IEEE Parallel & Distributed Processing Symposium (IPDPS),
pp. 860–872, IEEE, 2012.
[48] A. Azad, M. Halappanavar, F. Dobrian, and A. Pothen, “Computing maximum
matching in parallel on bipartite graphs: Worth the effort?,” in Proceedings of
the First Workshop on Irregular Applications: Architectures and Algorithm,
pp. 11–14, ACM, 2011.
[49] A. Azad and A. Pothen, “Multithreaded algorithms for matching in graphs with
application to data analysis in flow cytometry,” in IEEE Parallel and Distributed
Processing Symposium Workshops & PhD Forum (IPDPSW), pp. 2494–2497,
IEEE, 2012.
[50] P. J. Waddell and A. Azad, “Resampling residuals: Robust estimators
of error and fit for evolutionary trees and phylogenomics,” arXiv preprint
arXiv:0912.5288, 2009.
[51] P. J. Waddell, A. Azad, and I. Khan, “Resampling residuals on phylogenetic
trees: Extended results,” arXiv preprint arXiv:1101.0020, 2010.
[52] F. Hahne, A. Khodabakhshi, A. Bashashati, C. Wong, R. Gascoyne, A. Weng,
V. Seyfert-Margolis, K. Bourcier, A. Asare, T. Lumley, et al., “Per-channel basis
normalization methods for flow cytometry data,” Cytometry Part A, vol. 77,
no. 2, pp. 121–131, 2010.

146
[53] C. Brockmeyer, W. Paster, D. Pepper, et al., “T Cell Receptor (TCR)-induced
tyrosine phosphorylation dynamics identifies THEMIS as a new TCR signalosome component,” Journal of Biological Chemistry, vol. 286, no. 9, pp. 7535–
7547, 2011.
[54] N. Aghaeepour, P. K. Chattopadhyay, A. Ganesan, K. O’Neill, H. Zare,
A. Jalali, H. H. Hoos, M. Roederer, and R. R. Brinkman, “Early immunologic correlates of HIV protection can be identified from computational analysis
of complex multivariate T-cell flow cytometry assays,” Bioinformatics, vol. 28,
no. 7, pp. 1009–1016, 2012.
[55] P. Qiu, E. F. Simonds, S. C. Bendall, K. D. Gibbs Jr, R. V. Bruggner, M. D.
Linderman, K. Sachs, G. P. Nolan, and S. K. Plevritis, “Extracting a cellular
hierarchy from high-dimensional cytometry data with SPADE,” Nature Biotechnology, vol. 29, no. 10, pp. 886–891, 2011.
[56] J. P. Robinson, B. Rajwa, V. Patsekin, and V. J. Davisson, “Computational
analysis of high-throughput flow cytometry data,” Expert Opinion on Drug
Discovery, vol. 7, no. 8, pp. 679–693, 2012.
[57] H. T. Maecker, T. M. Lindstrom, W. H. Robinson, P. J. Utz, M. Hale, S. D.
Boyd, S. S. Shen-Orr, and C. G. Fathman, “New tools for classification and monitoring of autoimmune diseases,” Nature Reviews Rheumatology, vol. 8, no. 6,
pp. 317–328, 2012.
[58] A. Bashashati and R. R. Brinkman, “A survey of flow cytometry data analysis
methods,” Advances in Bioinformatics, vol. 2009, 2009.
[59] F. Hahne, N. LeMeur, R. Brinkman, B. Ellis, P. Haaland, D. Sarkar, J. Spidlen, E. Strain, and R. Gentleman, “flowcore: A bioconductor package for high
throughput flow cytometry,” BMC Bioinformatics, vol. 10, no. 1, p. 106, 2009.
[60] D. Sarkar, N. Le Meur, and R. Gentleman, “Using flowviz to visualize flow
cytometry data,” Bioinformatics, vol. 24, no. 6, pp. 878–879, 2008.
[61] K. Lo, F. Hahne, R. Brinkman, and R. Gottardo, “flowclust: A bioconductor
package for automated gating of flow cytometry data,” BMC Bioinformatics,
vol. 10, no. 1, p. 145, 2009.
[62] F. Hahne, N. Gopalakrishnan, A. Khodabakhshi, and C. Wong, flowStats: Statistical methods for the analysis of flow cytometry data. R package version 3.20,
available at http://www.bioconductor.org.
[63] R. Scheuermann, Y. Qian, C. Wei, and I. Sanz, “ImmPortFLOCK: Automated
cell population identification in high dimensional flow cytometry data,” The
Journal of Immunology, vol. 182, no. Meeting Abstracts 1, pp. 42–17, 2009.
[64] M. Schena, D. Shalon, R. W. Davis, and P. O. Brown, “Quantitative monitoring
of gene expression patterns with a complementary DNA microarray,” Science,
vol. 270, no. 5235, pp. 467–470, 1995.
[65] Y. Chen, E. R. Dougherty, and M. L. Bittner, “Ratio-based decisions and the
quantitative analysis of cDNA microarray images,” Journal of Biomedical optics, vol. 2, no. 4, pp. 364–374, 1997.

147
[66] B. P. Durbin, J. S. Hardin, D. M. Hawkins, and D. M. Rocke, “A variancestabilizing transformation for gene-expression microarray data,” Bioinformatics, vol. 18, no. suppl 1, pp. S105–S110, 2002.
[67] M. Bartlett, “Properties of sufficiency and statistical tests,” Proceedings of
the Royal Society of London. Series A: Mathematical and Physical Sciences,
vol. 160, no. 901, pp. 268–282, 1937.
[68] F. J. Anscombe, “The transformation of poisson, binomial and negativebinomial data,” Biometrika, vol. 35, no. 3/4, pp. 246–254, 1948.
[69] S. K. Bar-Lev and P. Enis, “On the classical choice of variance stabilizing transformations and an application for a poisson variate,” Biometrika, vol. 75, no. 4,
pp. 803–804, 1988.
[70] M. Bartlett, “The square root transformation in analysis of variance,” Supplement to the Journal of the Royal Statistical Society, vol. 3, no. 1, pp. 68–78,
1936.
[71] R. Tibshirani, “Estimating transformations for regression via additivity and
variance stabilization,” Journal of the American Statistical Association, vol. 83,
no. 402, pp. 394–405, 1988.
[72] B. Zhang, J. M. Fadili, and J.-L. Starck, “Wavelets, ridgelets, and curvelets for
poisson noise removal,” IEEE Transactions on Image Processing, vol. 17, no. 7,
pp. 1093–1108, 2008.
[73] Y. Qian, Y. Liu, J. Campbell, E. Thomson, Y. M. Kong, and R. H. Scheuermann, “FCSTrans: An open source software system for fcs file conversion and
data transformation,” Cytometry Part A, vol. 81, no. 5, pp. 353–356, 2012.
[74] M. B. Wilk and R. Gnanadesikan, “Probability plotting methods for the analysis
for the analysis of data,” Biometrika, vol. 55, no. 1, pp. 1–17, 1968.
[75] E. Motakis, G. P. Nason, P. Fryzlewicz, and G. Rutter, “Variance stabilization
and normalization for one-color microarray data using a data-driven multiscale
approach,” Bioinformatics, vol. 22, no. 20, pp. 2547–2553, 2006.
[76] P. Fryzlewicz and V. Delouille, “A data-driven haar-fisz transform for multiscale variance stabilization,” in IEEE/SP 13th Workshop on Statistical Signal
Processing, pp. 539–544, IEEE, 2005.
[77] H. Levene, “Robust tests for equality of variances1,” Contributions to Probability and Statistics: Essays in Honor of Harold Hotelling, vol. 2, p. 278, 1960.
[78] M. B. Brown and A. B. Forsythe, “Robust tests for the equality of variances,”
Journal of the American Statistical Association, vol. 69, no. 346, pp. 364–367,
1974.
[79] G. Finak, A. Bashashati, R. Brinkman, and R. Gottardo, “Merging mixture
components for cell population identification in flow cytometry,” Advances in
Bioinformatics, vol. 2009, 2009.
[80] I. P. Sugár and S. C. Sealfon, “Misty mountain clustering: Application to
fast unsupervised flow cytometry gating,” BMC Bioinformatics, vol. 11, no. 1,
p. 502, 2010.

148
[81] U. Naumann, G. Luta, and M. Wand, “The curvHDR method for gating flow
cytometry samples,” BMC Bioinformatics, vol. 11, no. 1, p. 44, 2010.
[82] I. Naim, S. Datta, G. Sharma, J. S. Cavenaugh, and T. R. Mosmann, “SWIFT:
Scalable weighted iterative sampling for flow cytometry clustering,” in IEEE
International Conference on Acoustics Speech and Signal Processing (ICASSP),
pp. 509–512, IEEE, 2010.
[83] J. Quinn, P. W. Fisher, R. J. Capocasale, R. Achuthanandam, M. Kam, P. J.
Bugelski, and L. Hrebien, “A statistical pattern recognition approach for determining cellular viability and lineage phenotype in cultured cells and murine
bone marrow,” Cytometry Part A, vol. 71, no. 8, pp. 612–624, 2007.
[84] K. Hornik, “A CLUE for CLUster Ensembles,” Journal of Statistical Software,
vol. 14, September 2005.
[85] H. Zare, P. Shooshtari, A. Gupta, and R. Brinkman, “Data reduction for spectral clustering to analyze high throughput flow cytometry data,” BMC Bioinformatics, vol. 11, no. 1, p. 403, 2010.
[86] J. A. Hartigan and M. A. Wong, “Algorithm AS 136: A k-means clustering algorithm,” Journal of the Royal Statistical Society. Series C (Applied Statistics),
vol. 28, no. 1, pp. 100–108, 1979.
[87] S. Lloyd, “Least squares quantization in PCM,” IEEE Transactions on Information Theory, vol. 28, no. 2, pp. 129–137, 1982.
[88] L. Kaufman and P. J. Rousseeuw, Finding Groups in Data: An Introduction to
Cluster Analysis, vol. 344. Wiley, 2009.
[89] D. Müllner, “fastcluster: Fast hierarchical, agglomerative clustering routines for
R and Python,” Journal of Statistical Software, vol. 53, no. 9, pp. 1–18, 2013.
[90] C. M. Bishop and N. M. Nasrabadi, Pattern Recognition and Machine Learning,
vol. 1. Springer New York, 2006.
[91] R. Lebret, S. Iovleff, and F. Langrognet, Rmixmod: An interface of MIXMOD.
R package version 2.0.1, available at http://cran.r-project.org.
[92] J. Herrero, A. Valencia, and J. Dopazo, “A hierarchical unsupervised growing
neural network for clustering gene expression patterns,” Bioinformatics, vol. 17,
no. 2, pp. 126–136, 2001.
[93] U. Von Luxburg, “A tutorial on spectral clustering,” Statistics and Computing,
vol. 17, no. 4, pp. 395–416, 2007.
[94] D. Yan, L. Huang, and M. Jordan, “Fast approximate spectral clustering,” in
Proceedings of the International Conference on Knowledge Discovery and Data
Mining (ACM SIGKDD), pp. 907–916, ACM, 2009.
[95] G. Gan, C. Ma, and J. Wu, Data Clustering: Theory, Algorithms, and Applications, vol. 20. SIAM, 2007.
[96] R Development Core Team, R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria, 2012.

149
[97] M. Maechler, P. Rousseeuw, A. Struyf, M. Hubert, and K. Hornik, Cluster:
Cluster analysis basics and extensions. R package version 1.14.4, available at
http://cran.r-project.org.
[98] G. Brock, V. Pihur, S. Datta, and S. Datta, “clValid, an R package for cluster
validation,” Journal of Statistical Software, vol. 25, no. 4, 2008.
[99] A. Zeileis, K. Hornik, A. Smola, and A. Karatzoglou, “Kernlab–an S4 package
for kernel methods in R,” Journal of Statistical Software, vol. 11, no. 9, pp. 1–20,
2004.
[100] M. Ramze Rezaee, B. P. Lelieveldt, and J. H. Reiber, “A new cluster validity
index for the fuzzy c-mean,” Pattern Recognition Letters, vol. 19, no. 3, pp. 237–
246, 1998.
[101] N. R. Pal and J. C. Bezdek, “On cluster validity for the fuzzy c-means model,”
IEEE Transactions on Fuzzy Systems, vol. 3, no. 3, pp. 370–379, 1995.
[102] X. L. Xie and G. Beni, “A validity measure for fuzzy clustering,” IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 13, no. 8, pp. 841–847,
1991.
[103] T. Caliński and J. Harabasz, “A dendrite method for cluster analysis,” Communications in Statistics-theory and Methods, vol. 3, no. 1, pp. 1–27, 1974.
[104] J. Dunn, “Well-separated clusters and optimal fuzzy partitions,” Journal of
Cybernetics, vol. 4, no. 1, pp. 95–104, 1974.
[105] P. Rousseeuw, “Silhouettes: A graphical aid to the interpretation and validation of cluster analysis,” Journal of Computational and Applied Mathematics,
vol. 20, pp. 53–65, 1987.
[106] D. Davies and D. Bouldin, “A cluster separation measure,” IEEE Transactions
on Pattern Analysis and Machine Intelligence, no. 2, pp. 224–227, 1979.
[107] M. Halkidi and M. Vazirgiannis, “Clustering validity assessment: Finding the
optimal partitioning of a data set,” in IEEE International Conference on Data
Mining (ICDM), pp. 187–194, IEEE, 2001.
[108] G. H. Ball and D. J. Hall, “ISODATA, a novel method of data analysis and
pattern classification,” Technical Report, DTIC Document, 1965.
[109] L. Hubert and J. Schultz, “Quadratic assignment as a general data analysis
strategy,” British Journal of Mathematical and Statistical Psychology, vol. 29,
no. 2, pp. 190–241, 1976.
[110] S. Ray and R. H. Turi, “Determination of number of clusters in k-means clustering and application in colour image segmentation,” in Proceedings of the
4th International Conference on Advances in Pattern Recognition and Digital
Techniques, pp. 137–143, 1999.
[111] A. Scott and M. J. Symons, “Clustering methods based on likelihood ratio
criteria,” Biometrics, pp. 387–397, 1971.

150
[112] Y. Liu, Z. Li, H. Xiong, X. Gao, and J. Wu, “Understanding of internal clustering validation measures,” in IEEE International Conference on Data Mining
(ICDM), pp. 911–916, IEEE, 2010.
[113] L. Nieweglowski., clv: Cluster validation techniques. R package version 0.3.2,
available at http://cran.r-project.org.
[114] G. Brock, V. Pihur, S. Datta, and S. Datta, clValid: Validation of clustering
results, 2011. R package version 0.6-4.
[115] B. Desgraupes, clusterCrit: Clustering indices. R package version 1.2.3, available at http://cran.r-project.org.
[116] C. D. Manning, P. Raghavan, and H. Schütze, Introduction to Information
Retrieval, vol. 1. Cambridge University Press Cambridge, 2008.
[117] W. M. Rand, “Objective criteria for the evaluation of clustering methods,”
Journal of the American Statistical Association, vol. 66, no. 336, pp. 846–850,
1971.
[118] P. Jaccard, “Distribution de la flore alpine dans le bassin des drouces et dans
quelques regions voisines,” Bulletin de la Société Vaudoise des Sciences Naturelles, vol. 37, no. 140, pp. 241–272, 1901.
[119] N. Jardine and R. Sibson, Mathematical Taxonomy. Wiley, New York, 1971.
[120] E. B. Fowlkes and C. L. Mallows, “A method for comparing two hierarchical
clusterings,” Journal of the American Statistical Association, vol. 78, no. 383,
pp. 553–569, 1983.
[121] D. Gusfield, “Partition-distance: A problem and class of perfect graphs arising
in clustering,” Information Processing Letters, vol. 82, no. 3, pp. 159–164, 2002.
[122] D. A. Konovalov, B. Litow, and N. Bajema, “Partition-distance via the assignment problem,” Bioinformatics, vol. 21, no. 10, pp. 2463–2468, 2005.
[123] I. Charon, L. Denoeud, A. Guénoche, and O. Hudry, “Maximum transfer distance between partitions,” Journal of Classification, vol. 23, no. 1, pp. 103–121,
2006.
[124] P. Arabie and S. A. Boorman, “Multidimensional scaling of measures of distance between partitions,” Journal of Mathematical Psychology, vol. 10, no. 2,
pp. 148–203, 1973.
[125] C. H. Papadimitriou and K. Steiglitz, Combinatorial Optimization: Algorithms
and Complexity. Courier Dover Publications, 1998.
[126] A. Gordon and M. Vichi, “Fuzzy partition models for fitting a set of partitions,”
Psychometrika, vol. 66, no. 2, pp. 229–247, 2001.
[127] E. Dimitriadou, A. Weingessel, and K. Hornik, “A combination scheme for
fuzzy clustering,” International Journal of Pattern Recognition and Artificial
Intelligence, vol. 16, no. 07, pp. 901–912, 2002.
[128] M. R. Gary and D. S. Johnson, Computers and Intractability: A Guide to the
Theory of NP-completeness. WH Freeman and Company, New York, 1979.

151
[129] N. Aghaeepour, flowMeans: Non-parametric flow cytometry data gating. R
package version 1.15, available at http://www.bioconductor.org.
[130] Q. Zeng, M. Wand, A. J. Young, J. Rawn, E. L. Milford, S. J. Mentzer, and
R. A. Greenes, “Matching of flow-cytometry histograms using information theory in feature space,” in Proceedings of the AMIA Symposium, p. 929, American
Medical Informatics Association, 2002.
[131] Q. T. Zeng, J. P. Pratt, J. Pak, D. Ravnic, H. Huss, and S. J. Mentzer, “Featureguided clustering of multi-dimensional flow cytometry datasets,” Journal of
Biomedical Informatics, vol. 40, no. 3, pp. 325–331, 2007.
[132] A. Schrijver, Combinatorial Optimization: Polyhedra and Efficiency, vol. 24.
Springer, 2003.
[133] N. Zimmerman, “A computational approach to identification and comparison
of cell subsets in flow cytometry data,” Doctoral Dissertation, 2011.
[134] H. Jeffreys, “An invariant form for the prior probability in estimation problems,” Proceedings of the Royal Society of London. Series A. Mathematical and
Physical Sciences, vol. 186, no. 1007, pp. 453–461, 1946.
[135] S. Kullback and R. Leibler, “On information and sufficiency,” The Annals of
Mathematical Statistics, vol. 22, no. 1, pp. 79–86, 1951.
[136] G. McLachlan, “Mahalanobis distance,” Resonance, vol. 4, no. 6, pp. 20–26,
1999.
[137] N. Smirnov, “Table for estimating the goodness of fit of empirical distributions,”
The Annals of Mathematical Statistics, vol. 19, no. 2, pp. 279–281, 1948.
[138] F. J. Massey Jr, “The kolmogorov-smirnov test for goodness of fit,” Journal of
the American Statistical Association, vol. 46, no. 253, pp. 68–78, 1951.
[139] Y. Rubner, C. Tomasi, and L. J. Guibas, “The earth mover’s distance as a
metric for image retrieval,” International Journal of Computer Vision, vol. 40,
no. 2, pp. 99–121, 2000.
[140] J. Berrington, D. Barge, A. Fenton, A. Cant, and G. Spickett, “Lymphocyte
subsets in term and significantly preterm UK infants in the first year of life analyzed by single platform flow cytometry,” Clinical & Experimental Immunology,
vol. 140, no. 2, pp. 289–292, 2005.
[141] F. Lacombe, F. Durrieu, A. Briais, P. Dumain, F. Belloc, E. Bascans, J. Reiffers,
M. Boisseau, and P. Bernard, “Flow cytometry CD45 gating for immunophenotyping of acute myeloid leukemia,” Leukemia, vol. 11, no. 11, pp. 1878–1886,
1997.
[142] W. Kern, U. Bacher, C. Haferlach, S. Schnittger, and T. Haferlach, “The role of
multiparameter flow cytometry for disease monitoring in AML,” Best Practice
& Research Clinical Haematology, vol. 23, no. 3, pp. 379–390, 2010.
[143] R. Sharan and T. Ideker, “Modeling cellular machinery through biological network comparison,” Nature Biotechnology, vol. 24, no. 4, pp. 427–433, 2006.

152
[144] R. Singh, J. Xu, and B. Berger, “Global alignment of multiple protein interaction networks with application to functional orthology detection,” Proceedings
of the National Academy of Sciences, vol. 105, no. 35, pp. 12763–12768, 2008.
[145] C. T. Ekstrøm and H. Sørensen, Introduction to Statistical Data Analysis for
the Life Sciences. CRC Press, 2011.
[146] J. Steiger, “Beyond the f test: Effect size confidence intervals and tests of close
fit in the analysis of variance and contrast analysis.,” Psychological Methods,
vol. 9, no. 2, p. 164, 2004.
[147] J. Cohen, Statistical Power Analysis for the Behavioral Sciences. Lawrence
Erlbaum, 1988.
[148] A. Fleishman, “Confidence intervals for correlation ratios,” Educational and
Psychological Measurement, vol. 40, no. 3, pp. 659–670, 1980.
[149] K. Kelley, “Confidence intervals for standardized effect sizes: Theory, application, and implementation,” Journal of Statistical Software, vol. 20, no. 8,
pp. 1–24, 2007.
[150] R. A. Johnson and D. W. Wichern, Applied Multivariate Statistical Analysis,
vol. 5. Prentice hall Upper Saddle River, NJ, 2002.
[151] H. Hotelling, “The generalization of student’s ratio,” The Annals of Mathematical Statistics, pp. 360–378, 1931.
[152] K. S. Pillai and P. Samson Jr, “On Hotelling’s generalization of T2 ,” Biometrika,
pp. 160–168, 1959.
[153] K. Ito and W. J. Schull, “On the robustness of the T20 test in multivariate analysis of variance when variance-covariance matrices are not equal,” Biometrika,
vol. 51, no. 1-2, pp. 71–82, 1964.
[154] D. T. Hughes and J. G. Saw, “Approximating the percentage points of
Hotelling’s generalized T20 statistic,” Biometrika, vol. 59, no. 1, pp. 224–226,
1972.
[155] H. Steyn Jr and S. Ellis, “Estimating an effect size in one-way multivariate
analysis of variance (MANOVA),” Multivariate Behavioral Research, vol. 44,
no. 1, pp. 106–129, 2009.
[156] K. Kelley, “Methods for the behavioral, educational, and social sciences
(MBESS): An R package,” Behavior Research Methods, vol. 39, no. 4, pp. 979–
984, 2007.
[157] D. Farber, O. Acuto, and K. Bottomly, “Differential T cell receptor-mediated
signaling in naive and memory CD4 T cells,” European Journal of Immunology,
vol. 27, no. 8, pp. 2094–2101, 1997.
[158] M. Ahmadzadeh, S. Hussain, and D. Farber, “Heterogeneity of the memory
CD4 T cell response: Persisting effectors and resting memory T cells,” The
Journal of Immunology, vol. 166, no. 2, p. 926, 2001.

153
[159] M. Ahmadzadeh, S. Hussain, and D. Farber, “Effector CD4 T cells are biochemically distinct from the memory subset: Evidence for long-term persistence of
effectors in vivo,” The Journal of Immunology, vol. 163, no. 6, p. 3053, 1999.
[160] A. Dress, K. T. Huber, J. Koolen, V. Moulton, and A. Spillner, Basic Phylogenetic Combinatorics. Cambridge University Press, 2012.
[161] R. Brunelli and T. Poggio, “Face recognition: Features versus templates,” IEEE
Transactions on Pattern Analysis and Machine Intelligence, vol. 15, no. 10,
pp. 1042–1052, 1993.
[162] M. De Wachter, M. Matton, K. Demuynck, P. Wambacq, R. Cools, and
D. Van Compernolle, “Template-based continuous speech recognition,” IEEE
Transactions on Audio, Speech, and Language Processing, vol. 15, no. 4,
pp. 1377–1390, 2007.
[163] L. Deng, H. Strik, et al., “Structure-based and template-based automatic speech
recognition-comparing parametric and nonparametric approaches,” in Proceedings of Interspeech, pp. 898–901, 2007.
[164] S. D. Connell and A. K. Jain, “Template-based online character recognition,”
Pattern Recognition, vol. 34, no. 1, pp. 1–14, 2001.
[165] J. M. Bennett, D. Catovsky, M. T. Daniel, G. Flandrin, D. A. Galton, H. R.
Gralnick, and C. Sultan, “Proposed revised criteria for the classification of
acute myeloid leukemia: A report of the French-American-British Cooperative
Group,” Annals of Internal Medicine, vol. 103, no. 4, pp. 620–625, 1985.
[166] M. Biehl, K. Bunte, and P. Schneider, “Analysis of flow cytometry data by matrix relevance learning vector quantization,” PLoS One, vol. 8, no. 3, p. e59401,
2013.
[167] T. Manninen, H. Huttunen, P. Ruusuvuori, and M. Nykter, “Leukemia prediction using sparse logistic regression,” PLoS One, vol. 8, no. 8, p. e72932,
2013.
[168] P. Qiu, “Inferring phenotypic properties from single-cell characteristics,” PLoS
One, vol. 7, no. 5, p. e37038, 2012.
[169] “DREAM6/FlowCAP2 molecular classification of acute myeloid leukaemia challenge.” http://www.the-dream-project.org/. Accessed: 2013-12-25.
[170] E. Paietta, “Expression of cell-surface antigens in acute promyelocytic
leukaemia,” Best Practice & Research Clinical Haematology, vol. 16, no. 3,
pp. 369–385, 2003.
[171] D. Campana and F. G. Behm, “Immunophenotyping of leukemia,” Journal of
Immunological Methods, vol. 243, no. 1, pp. 59–75, 2000.
[172] K. D. Mason, S. K. Juneja, and J. Szer, “The immunophenotype of acute
myeloid leukemia: is there a relationship with prognosis?,” Blood Reviews,
vol. 20, no. 2, pp. 71–82, 2006.

154
[173] A. Keyhani, Y. O. Huh, D. Jendiroba, L. Pagliaro, J. Cortez, S. Pierce, M. Pearlman, E. Estey, H. Kantarjian, and E. J. Freireich, “Increased CD38 expression
is associated with favorable prognosis in adult acute leukemia,” Leukemia Research, vol. 24, no. 2, pp. 153–159, 2000.
[174] O. Legrand, J.-Y. Perrot, M. Baudard, A. Cordier, R. Lautier, G. Simonin,
R. Zittoun, N. Casadevall, and J.-P. Marie, “The immunophenotype of 177
adults with acute myeloid leukemia: proposal of a prognostic score,” Blood,
vol. 96, no. 3, pp. 870–877, 2000.
[175] D. Raspadori, D. Damiani, M. Lenoci, D. Rondelli, N. Testoni, G. Nardi,
C. Sestigiani, C. Mariotti, S. Birtolo, M. Tozzi, et al., “CD56 antigenic expression in acute myeloid leukemia identifies patients with poor clinical prognosis,”
Leukemia, vol. 15, no. 8, pp. 1161–1164, 2001.
[176] K. Walter, P. Cockerill, R. Barlow, D. Clarke, M. Hoogenkamp, G. Follows,
S. Richards, M. Cullen, C. Bonifer, and H. Tagoh, “Aberrant expression of
CD19 in AML with t (8; 21) involves a poised chromatin structure and pax5,”
Oncogene, vol. 29, no. 20, pp. 2927–2937, 2010.
[177] E. Estey and H. Döhner, “Acute myeloid leukaemia,” The Lancet, vol. 368,
no. 9550, pp. 1894–1907, 2006.
[178] D. W. Hosmer Jr, S. Lemeshow, and R. X. Sturdivant, Applied Logistic Regression. Wiley. com, 2013.
[179] W. Zhao, H. Ma, and Q. He, “Parallel k-means clustering based on MapReduce,” in Cloud Computing, pp. 674–679, Springer, 2009.
[180] D. Foti, D. Lipari, C. Pizzuti, and D. Talia, “Scalable parallel clustering for data
mining on multicomputers,” in Parallel and Distributed Processing, pp. 390–398,
Springer, 2000.
[181] X. Li and Z. Fang, “Parallel clustering algorithms,” Parallel Computing, vol. 11,
no. 3, pp. 275–290, 1989.

VITA

155

VITA
Ariful Azad was born in Ullapara, in the district of Sirajganj, Bangladesh on
September 1, 1982. He is the youngest son of Anwar Hossain and Ayesha Begum. He
finished high school from Pabna Cadet College in 2000 and completed his Bachelors
in Computer Science and Engineering from Bangladesh University of Engineering and
Technology (BUET) in 2006. Ariful started his Ph.D. in Computer Science at Purdue
University in August 2008 under the supervision of Prof. Alex Pothen. His research
interests include bioinformatics, graph algorithms, and parallel computing. His Ph.D.
research has been published to several peer reviewed journals and conferences.
Ariful is a recipient of an IBM PhD fellowship (2013), outstanding poster award
(Cyto 2013), fellowship incentive grant (2010), Purdue research fellowship (2010) and
several travel awards from NSF, NIH and ISAC. He worked as a summer intern at
Pacific Northwest National Laboratory (PNNL) in summer 2010, 2011. During his
study at Purdue, he served as the president of Bangladesh students organization
(2012-13) and the webmaster of Purdue graduate student government (2009-11).
Ariful is married to Rubaya Pervin who is also a graduate of Bangladesh University
of Engineering and Technology (BUET). His favorite sports are Cricket and Tennis.
He enjoys to travel and watch movies in his leisure time.

