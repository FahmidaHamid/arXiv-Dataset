arXiv:1005.4956v1 [q-bio.PE] 26 May 2010

Restricted trees: simplifying networks with
bottlenecks
Stephen J. Willson
Department of Mathematics
Iowa State University
Ames, IA 50011 USA
swillson@iastate.edu
May 28, 2010
Abstract. Suppose N is a phylogenetic network indicating a complicated
relationship among individuals and taxa. Often of interest is a much simpler
network, for example, a species tree T , that summarizes the most fundamental
relationships. The meaning of a species tree is made more complicated by the
recent discovery of the importance of hybridizations and lateral gene transfers.
Hence it is desirable to describe uniform well-defined procedures that yield a
tree given a network N .
A useful tool toward this end is a connected surjective digraph (CSD) map
φ : N → N ′ where N ′ is generally a much simpler network than N . A set W
of vertices in N is “restricted” if there is at most one vertex from which there
is an arc into W , thus yielding a bottleneck in N . A CSD map φ : N → N ′ is
“restricted” if the inverse image of each vertex in N ′ is restricted in N . This
paper describes a uniform procedure that, given a network N , yields a welldefined tree called the “restricted tree” of N . There is a restricted CSD map
from N to the restricted tree. Many relationships in the tree can be proved to
appear also in N .
Key words: digraph, network, tree, connected, hybrid, phylogeny, homomorphism, restricted, phylogenetic network

1

Introduction

Since Darwin, phylogenetic trees have been utilized to display the evolutionary
relationships among taxa. Extant taxa correspond to the leaves of the trees. In
principle, the trees are directed in the direction of increasing time, and there is
a single root indicating the common ancestry of all the taxa in question.
The underlying reality is often a much more complicated network than a
tree. If every vertex corresponds to an individual and the species are sexu1

ally reproducing, then the underlying graph has vast numbers of vertices, each
with indegree 2. This underlying reality is too complicated to reconstruct. The
species phylogenetic tree is a dramatic simplification which summarizes the underlying reality.
More recently, events such as hybridization and lateral gene transfer have
been shown to have increased importance [9], [6]. Such possibilities have called
into question the adequacy of a phylogenetic species tree as a tool. Coalescence
methods [20], [8] have modeled relationships between species trees and gene
trees making use of a presumed network of the underlying reality. Moreover,
specific biological networks have been proposed for certain systems [6], [15].
Once we start to consider networks more general than trees, we must be
concerned about the assumptions that can be made about these networks. There
are astronomically more networks than even the large number of trees with a
given leaf set. Hence it becomes important to narrow the collection in a useful
manner. General frameworks for networks are discussed in [1], [2], [16], [17], and
[18]. Typically these frameworks model phylogenies by acyclic rooted directed
graphs.
Particular kinds of networks have been studied in various papers. Wang et
al. [22] and Gusfield et al. [11] study “galled trees” in which all recombination
events are associated with node-disjoint recombination cycles. Van Iersel and
others [14] generalized galled trees to “level-k” networks. Baroni, Semple, and
Steel [2] introduced the idea of a “regular” network, which coincides with its
cover digraph. Cardona et al. [5] discussed “tree-child” networks, in which
every vertex not a leaf has a child that is not a reticulation vertex. Moret et al.
[16] define a reduction R(N ) of a network N of use in analyzing displayed trees.
The possibilities of very complicated networks raise anew the question of the
relationship between the hugely complex underlying reality and the phylogenetic
trees and networks which simplify and summarize possible relationships.
Dress et al. [10] give several abstract constructions of manners in which a
very general network can give rise to trees, or, more generally, hierarchies. For
example, they define notions of tight clusters and strict clusters and show that
these produce trees or hierarchies. Both notions identify a kind of bottleneck in
the underlying network and produce trees.
In [23] the current author described a general approach giving relationships
between a complicated underlying network N and a much simpler network N ′ .
For example, N might be the largely unknown directed graph showing the underlying reality while N ′ might be the species tree. The basic tool is a connected
surjective digraph map or, more briefly, a CSD map φ from N to N ′ . The idea
is that every vertex v of N is taken to a vertex φ(v) of N ′ in such a manner
that the following hold:
(a) If (u, v) is an arc of N , then either φ(u) = φ(v) or else (φ(u), φ(v)) is an arc
of N ′ .
(b) The map is surjective both on vertices of N ′ and on arcs of N ′ .
(c) For each vertex v ′ of N ′ , the set of vertices of N mapping to v ′ forms a
connected set.
Details are given in section 2.
2

Many properties of CSD maps are given in [23]. While (a) is very similar to
the notion of a homomorphism of digraphs [12], [13], the essential new condition
is (c). Without (c), knowledge of N ′ gives very little information about N ; the
notion without (c) is too general. With (c), the notion is much more rigid, and
information about N ′ implies structure in N . For example, if N ′ is a binary tree
and φ : N → N ′ is a CSD map, then there is a wired lift of N ′ into N , showing
that as an undirected network N ′ embeds in N . If, instead, φ : N → N ′ satisfied
merely (a) and (b), then when N ′ is a binary tree, N could still be trivial or a
star tree. Further details are given in section 2 and [23].
The cluster of a vertex v in a network N is the set of leaves which can be
reached by directed paths starting at v. A network N is successively clusterdistinct if whenever (u, v) is an arc, then u and v have distinct clusters. In [23]
I gave a construction, given any network N , of a successively cluster-distinct
network ClDis(N ). I showed that there is a CSD map φ : N → ClDis(N ),
and moreover that φ had a certain “universal” property. I argued that it was
therefore reasonable to restrict one’s attention to networks that were successively
cluster-distinct.
In this paper I elaborate further. Given a network N , I describe a general
method to construct a restricted tree denoted ResT r(N ). In some ways the
procedure resembles that given in [10] of tight clusters in that it detects bottlenecks of a certain sort. The construction differs, however, in that it always
yields a CSD map φ : N → ResT r(N ); the construction in [10] may not have
this property.
The computation of ResT r(N ) will typically have more resolution when it
is applied to a network N that is already successively cluster-distinct.
The heart of the construction is the notion of a restricted set B, given in
section 3. Such a set B is a set of vertices in N such that there is at most one
vertex u for which there is any arc (u, w) with u ∈
/ W but w ∈ W . Such a
vertex identifies a bottleneck in the network N . It is shown in Section 3 how
to construct the smallest restricted set R(v) containing a given vertex v. These
sets are utilized to construct ResT r(N ).
Section 4 focuses on properties of restricted CSD maps—those CSD maps for
which the inverse images of each point is a restricted set. It is shown that any
such map defined on N factors through ResT r(N ), making ResT r(N ) “universal” for such maps. Thus ResT r(N ) not only permits wired lifts into the network
N , but any restricted map factors through ResT r(N ). Hence ResT r(N ) is an
invariantly defined tree with interesting universal properties.
Section 4 also contains an example of the construction of ResT r(N ).

2

Fundamental Concepts

A directed graph or digraph N = (V, A) consists of a finite set V of vertices and
a finite set A of arcs, each consisting of an ordered pair (u, v) where u ∈ V ,
v ∈ V , u 6= v. Sometimes we write V (N ) for V . We interpret (u, v) as an
arrow from u to v and say that the arc starts at u and ends at v. There are no

3

multiple arcs and no loops. If (u, v) ∈ A, say that u is a parent of v and v is a
child of u. A directed path is a sequence u0 , u1 , · · · , uk of vertices such that for
i = 1, · · · , k, (ui−1 , ui ) ∈ A. The path is trivial if k = 0. Write u ≤ v if there is
a directed path starting at u and ending at v. Write u < v if u ≤ v and u 6= v.
The digraph is acyclic if there is no nontrivial directed path starting and ending
at the same point. If the digraph is acyclic, it is easy to see that ≤ is a partial
order on V .
The digraph (V, A) has root r if there exists r ∈ V such that for all v ∈ V ,
r ≤ v. The graph is rooted if it has a root.
The indegree of vertex u is the number of v ∈ V such that (v, u) ∈ A. The
outdegree of u is the number of v ∈ V such that (u, v) ∈ A. If (V, A) is rooted
at r then r is the only vertex of indegree 0. A leaf is a vertex of outdegree 0.
A normal (or tree-child ) vertex is a vertex of indegree 1. A hybrid vertex (or
recombination vertex or reticulation node) is a vertex of indegree at least 2.
Let X denote a finite set. Typically in phylogeny, X is a collection of species.
An X-network N = (V, A, r, X) is a digraph (V, A) with root r such that
(1) there is a one-to-one map φ : X → V such that the image of φ is the set of
all leaves of (V, A), and
(2) for every v ∈ V there is a leaf u and a directed path from v to u.
Thus the set of leaves of N may be identified with the set X; every vertex is
ancestral to a leaf.
In biology most X-networks are acyclic. The set X provides a context for N ,
giving a hypothesized relationship among the members of X. For convenience,
we will write x for the leaf φ(x).
An X-tree is an X-network such that the underlying digraph is a rooted
tree.
If N = (V, A, r, X) is an X-network and v ∈ V , the cluster of v, denoted
cl(v), is {x ∈ X : v ≤ x}. We say that N is successively cluster-distinct provided
that, whenever (u, v) is an arc, then cl(u) 6= cl(v).
Let N = (V, A, r, X) and N ′ = (V ′ , A′ , r′ , X) be X-networks. An Xisomorphism ψ : N → N ′ is a map ψ : V → V ′ such that
(1) ψ : V → V ′ is one-to-one and onto,
(2) ψ(r) = r′ ,
(3) for each x ∈ X, ψ(x) = x,
(4) (ψ(u), ψ(v)) is an arc of N ′ iff (u, v) is an arc of N .
We say N and N ′ are isomorphic if there is an X-isomorphism ψ : N → N ′ .
A graph (or, for emphasis, an undirected graph) (V, E) consists of a finite
set V of vertices and a finite set E of edges, each consisting of a subset {v1 , v2 }
where v1 and v2 are two distinct members of V . Thus an edge has no direction,
while an arc has a direction. If G = (V, E) is a graph and W is a subset of V ,
the induced subgraph G[W ] is the graph (W, E[W ]) where the edge set E[W ] is
the collection of all {v1 , v2 } in E such that v1 ∈ W and v2 ∈ W . Thus G[W ]
contains all edges both of whose endpoints are in W .
A graph G = (V, E) is connected if, given any two distinct v and w in
V there exists a sequence v = v0 , v1 , v2 , · · · , vk = w of vertices such that for
i = 0, · · · , k − 1, {vi , vi+1 } ∈ E. A subset W of V is connected if the induced
4

subgraph G[W ] is connected.
Given a digraph G = (V, A) define U nd(G) = (V, E) where E = {{u, v} :
there is an arc (u, v) ∈ A}. Then U nd(G) is an undirected graph with the
same vertex set as G and with edges obtained by ignoring the directions of arcs.
A subset W of V is connected if U nd(G)[W ] is connected. Thus a connected
subset of G is defined ignoring the directions of arcs.
Let N = (V, A, r, X) and N ′ = (V ′ , A′ , r′ , X) be X-networks whose leaf sets
are identified with the same set X. An X-digraph map f : N → N ′ is a map
f : V → V ′ such that
(a) f (r) = r′ ,
(b) for all x ∈ X, f (x) = x, and
(c) if (u, v) is an arc of N , then either f (u) = f (v) or else (f (u), f (v)) is an arc
of N ′ .
Call f connected if for each v ′ ∈ V ′ , f −1 (v ′ ) is a connected subset of N ,
i.e., if the induced subgraph Ind(N )[f −1 (v ′ )] is connected. Call f surjective if
for each v ′ ∈ V , f −1 (v ′ ) is nonempty and for each arc (a, b) of N ′ there exist
vertices u and v of N such that (u, v) is an arc of N , f (u) = a, and f (v) = b.
The kernel of f is the partition {{f −1(v ′ )} : v ′ ∈ V ′ } of V .
We are interested primarily in X-digraph maps that are both connected and
surjective. They will be called connected surjective digraph maps or CSD maps.
Many of their properties are analogous to properties of homomorphisms [13] but
properties involving the leaf set X and connectivity require special attention.
The following basic results are in the paper [23].
Let N = (V, A, r, X) be an X-network. If ∼ is an equivalence relation on V ,
denote by [v] the equivalence class of the vertex v. An equivalence relation ∼
on V is called leaf-preserving provided that for every x ∈ X whenever u ∈ [x]
and (u, v) is an arc, then v ∈ [x].
Let N = (V, A, r, X) be an X-network. Suppose ∼ is an equivalence relation
on V . Let P = {[v] : v ∈ V } be the partition of V into equivalence classes.
Define the quotient digraph N ′ by N ′ = (V ′ , A′ , r′ , X) where
(i) V ′ is the set of equivalence classes [v].
(ii) r′ = [r].
(iii) The member x ∈ X corresponds to [x]; i.e., the identification is given by
φ′ : X → V ′ by φ′ (x) = [φ(x)].
(iv) Let [u] and [v] be two equivalence classes. There is an arc ([u], [v]) ∈ A′ iff
[u] 6= [v] and there exists u′ ∈ [u] and v ′ ∈ [v] such that (u′ , v ′ ) ∈ A′ .
Alternative notations for N ′ will be N/ ∼ or N/P.
Theorem 2.1. Let N = (V, A, r, X) be an X-network. Suppose ∼ is a leafpreserving equivalence relation on V . Let N ′ = N/ ∼ = (V ′ , A′ , r′ , X) be the
quotient digraph. Then
(1) N ′ is an X-network.
(2) The natural map φ : N → N ′ given by φ(u) = [u] is a surjective X-digraph
map with kernel the set of equivalence classes under ∼.
(3) If each equivalence class [u] is connected in N , then φ is connected.
Theorem 2.2. Let N = (V, A, r, X) and N ′ = (V ′ , A′ , r′ , X) be X-networks.
5

Suppose f : N → N ′ is a surjective X-digraph map. Define the relation ∼ on
V by u ∼ v iff f (u) = f (v). Then ∼ is a leaf-preserving equivalence relation
and the equivalence classes are [u] = f −1 (f (u)). Moreover the quotient digraph
N/ ∼ is isomorphic with N ′ via the map φ : N/ ∼ → N ′ given by φ([u]) = f (u).
Theorem 2.3. Let N and N ′ be X-networks. Let f : N → N ′ and g : N ′ → N ′′
be X-digraph maps.
(a) The composition g ◦ f : N → N ′′ is an X-digraph map.
(b) If f and g are surjective, then g ◦ f is surjective.
(c) If f and g are connected and surjective, then g◦f is connected and surjective.
Suppose N = (V, A, r, X) is an X-network. A partition Q of V is subordinate
to a partition P of V provided, for each A ∈ Q, there exists B ∈ P such that
A ⊆ B.
Theorem 2.4. Let N = (V, A, r, X) and N ′ = (V ′ , A′ , r′ , X) be X-networks.
Let f : N → N ′ be a surjective X-digraph map with kernel P = {f −1 (v) : v ∈
V ′ }. Suppose Q is a partition of V that is subordinate to P.
(1) There exist surjective X-digraph maps g : N → N/Q and h : N/Q → N ′
such that f = h ◦ g.
(2) If in addition f is connected and each member of Q is connected, then both
h and g are connected.
Let N = (V, A, r, X) and N ′ = (V ′ , A′ , r′ , X) be X-networks. Suppose
f : N → N ′ is a surjective digraph map. A wired lift of N ′ is a subgraph
M = (W, E) of U nd(N ) such that the following hold:
(1) For each arc (u′ , v ′ ) of N ′ there is exactly one arc (u, v) of N such f (u) = u′ ,
f (v) = v ′ , and {u, v} is an edge of M . The set of all edges {u, v} so obtained
will be denoted E1 and the set of all vertices which occur in any of the arcs
(u, v) ∈ E1 will be denoted V1′ . Let V1 = V1′ ∪ X.
(2) Every edge {a, b} ∈ E either lies in E1 or else satisfies f (a) = f (b).
(3) For each vertex u′ of N ′ , let V (v ′ ) = {w ∈ V1 : f (w) = v ′ }. The induced
subgraph M [f −1 (u′ ) ∩ W ] is a tree with leafset V (v ′ ).
We call E1 the set of nondegenerate edges of M , since the image under f of
each such edge is an edge of N ′ , not just a single vertex. Note that W ⊆ V and
E ⊆ E(U nd(N )).
Intuitively, M is a subgraph of U nd(N ) that is a resolution of U nd(N ′ ) in
that for each vertex v ′ of N ′ , [f −1 (v ′ )] ∩ W consists of the vertices of a tree,
all of whose vertices map to v ′ , not necessarily a single point. The name “lift”
suggests that N ′ is being lifted into the domain of f .
The following theorem gives sufficient conditions for a wired lift to exist
given any choice of E1 . The essential property is that f be connected.
Theorem 2.5. Let N = (V, A, r, X) and N ′ = (V ′ , A′ , r′ , X) be X-networks.
Suppose f : N → N ′ is a CSD map. For each arc (u′ , v ′ ) of N ′ choose an arc
(u, v) of N such that φ(u) = u′ , φ(v) = v ′ . Let E1 denote the set of edges {u, v}
of U nd(N ) so obtained. Then f has a wired lift M for which E1 is the set of
nondegenerate edges. Each such wired lift M is a resolution of U nd(N ′ ).
6

3

Restricted sets

Let N = (V, A, r, X) be a rooted acyclic X-network. We seek natural methods
to assign standard networks of various sorts to N . For example, even if N has
many hybridization events, we might be able to assign some standard tree that
might correspond to some consensus species tree.
This section proposes one such construction, which will be denoted ResT r(N ).
An example is given in Section 4. ResT r(N ) will have the form N/ ∼ for a certain equivalence relation ∼ on the vertices of N . Because of the construction,
there will be a CSD map f : N → ResT r(N ). Consequently, by Theorem 2.5,
ResT r(N ) will have a wired lift into N .
In this section we shall assume that N = (V, A, r, X) is a rooted acyclic
network with leaf set X. We shall sometimes assume that every leaf is treechild (with indegree 1).
The construction involves identifying subsets of V here called “restricted
subsets.”
A set B of vertices is called closed if, whenever b1 and b2 are in B and
b1 < b2 , then every vertex v such that b1 < v < b2 also lies in B.
A nonempty set B of vertices not containing r has restricted entry or is
restricted if there exists a unique vertex w′ such that
(1) w′ ∈
/ B,
(2) for some b ∈ B there is an arc (w′ , b),
(3) whenever (w, b) is an arc, w ∈
/ B, b ∈ B, then w = w′ .
We call this unique vertex w′ the anchor of B and write Anc(B) = w′ . A set
B of vertices containing r has restricted entry or is restricted if there is no arc
(w, b) with b ∈ B and w ∈
/ B.
Lemma 3.1. A restricted set B is closed.
Proof. Suppose first that B does not contain r. Suppose b1 < v < b2 with
b1 ∈ B, b2 ∈ B, v ∈
/ B. We may assume (v, b2 ) is an arc, whence v = Anc(B).
But since r is the root, there is a directed path P from r to b1 ; since r ∈
/ B and
b1 ∈ B, Anc(B) lies on P . It follows Anc(B) < b1 < Anc(B), so that N has a
directed cycle, contradicting that N is acyclic.
To see that B is closed if B contains r, suppose b1 < v < b2 with b1 ∈ B,
b2 ∈ B, v ∈
/ B. We may assume (v, b2 ) is an arc, contradicting that B is
restricted.
Lemma 3.2. Let N = (V, A, r, X) be an acyclic X-network. Suppose B is
restricted and r ∈
/ B. For every b ∈ B there is a directed path from Anc(B) to
b such that all vertices on the path except Anc(B) itself lie in B.
Proof. Choose a path from r to b, say r = u0 , u1 , · · · , uk = b. Since r ∈
/ B and
uk ∈ B, there exists i such that ui ∈
/ B, ui+1 ∈ B. Since B has an anchor, it
follows ui = Anc(B). Since ui+1 ∈ B and uk ∈ B, every vertex on the path
from ui+1 to uk lies in B because B is closed by Lemma 3.1.

7

Theorem 3.3. Let N = (V, A, r, X) be an acyclic X-network. Suppose B and
C are restricted subsets and B ∩ C is nonempty. Then B ∪ C is restricted.
Proof. Assume w ∈ B ∩ C. We prove the result via three cases.
Case 1. Suppose r is in neither B nor C. Then both B and C have anchors.
I claim first that either Anc(B) ∈ C or Anc(C) ∈ B or Anc(B) = Anc(C).
To see this, suppose Anc(B) ∈
/ C. Since w ∈ B by Lemma 3.2 there is a
directed path P from Anc(B) to w such that all vertices after the first lie in
B. Since Anc(B) ∈
/ C, there is a vertex v on the path P which is not in C but
whose child on the path lies in C. Hence v = Anc(C). It follows that either
Anc(C) = Anc(B) or else Anc(C) ∈ B. This proves the claim.
Now there are three subcases:
Subcase (1a). Suppose Anc(B) ∈ C.
To show that B ∪ C is restricted, since r ∈
/ B ∪ C, it suffices to show that
Anc(C) is an anchor for B ∪ C. To see this, suppose (u, d) is an arc with
d ∈ B ∪ C and u ∈
/ B ∪ C. If d ∈ C, then u = Anc(C). If d ∈ B, then
u = Anc(B), but this implies u ∈ C, contradicting that u ∈
/ B ∪ C; so this latter
case cannot occur.
Subcase (1b) Suppose Anc(C) ∈ B. Then Anc(B) is an anchor for B ∪ C
and B ∪ C is restricted by arguments like those in subcase (1a).
Subcase (1c) Suppose Anc(B) = Anc(C). I claim Anc(B) is an anchor for
B ∪ C. To see this, suppose (u, d) is an arc with d ∈ B ∪ C and u ∈
/ B ∪ C. If
d ∈ B then u = Anc(B). If d ∈ C then u = Anc(C) = Anc(B).
Hence the result is true in Case 1.
Case 2. Suppose B has an anchor but r ∈ C. I claim B ∪ C is restricted.
Since r ∈ B ∪ C, we suppose (u, d) is an arc with u ∈
/ B ∪ C but d ∈ B ∪ C,
and we derive a contradiction. Since C is restricted and contains r, it follows
d∈
/ C. Hence d ∈ B and u = Anc(B).
Since B has an anchor and w ∈ B, by Lemma 3.2 there is a path from
Anc(B) to w such that all vertices after the first lie in B. Since r is the root, we
obtain a path from r to Anc(B) and then to w. Since w ∈ C and C is closed by
Lemma 3.1, it follows Anc(B) ∈ C. This contradicts that Anc(B) = u ∈
/ B ∪ C.
Hence the result is true in Case 2.
Case 3. Suppose r ∈ B and r ∈ C. I claim B ∪ C is restricted. Since
r ∈ B ∪ C we suppose (u, d) is an arc with u ∈
/ B ∪ C but d ∈ B ∪ C, and we
derive a contradiction. Note that we cannot have d ∈ B since B is restricted,
and we cannot have d ∈ C since C is restricted. Hence the situation is not
possible.
Another way to combine restricted sets into a new restricted set is given in
the next result:
Lemma 3.4. Suppose B and C are restricted sets and there is an arc (b, c) with
b ∈ B and c ∈ C. Then B ∪ C is restricted.
Proof. If B and C intersect, then the result follows from Theorem 3.3. So we
may assume that B and C are disjoint. Since b ∈
/ C and C is restricted, it
8

follows that b = Anc(C). Now suppose that (u, v) is an arc with v ∈ B ∪ C
and u ∈
/ B ∪ C. If v ∈ C, then u = Anc(C), so u ∈ B, a contradiction. Hence
v ∈ B, so r ∈
/ B and u = Anc(B). Since u is uniquely determined, B ∪ C is
restricted.
Now, whenever v ∈ V , we construct an interesting restricted set denoted
R(v). It will turn out that R(v) is the smallest restricted set that contains v.
The basic construction is the following:
Algorithm Smallest restricted set
Input. An acyclic X-network N = (V, A, r, X) and v ∈ V .
Output. A subset R(v) of V .
Procedure: Define a sequence of sets Ri of vertices as follows:
(1) Let R0 = {v}.
(2) Recursively, given Ri perform the following: Suppose there exist u ∈
/ Ri and
w ∈ Ri with arc (u, w). Let Ri+1 := Ri ∪ {u} if either of the following holds:
(a) there exists w′ ∈ Ri such that u  w′ ;
(b) there exist u′ ∈ V − Ri , v ′ ∈ Ri , u′ 6= u, and arc (u′ , v ′ ) such that u  u′ .
(3) Iterate the procedure until for some m, Rm has been constructed and there
are no further changes possible according to (2). Define R(v) = Rm .
An example of the algorithm is given in section 4.
In step (2), if there are two vertices u and u′ not in Ri , u 6= u′ , and arcs
(u, v ′ ), (u′ , v ′′ ) with v ′ and v ′′ in Ri , then we cannot have both u ≤ u′ and u′ ≤ u
since that would force u = u′ . Hence at least one of u and u′ will be adjoined
to Ri . It is possible that both u and u′ will be adjoined to Ri in separate steps.
It is easy to see that R(v) is well-defined. This assertion means that when
the algorithm terminates, the result R(v) is independent of the order in which
the operations were carried out as long as they were legitimate when performed.
To see this, suppose at a certain time we have u1 , u2 not in Ri , v1 ∈ Ri ,
v2 ∈ Ri , u1 6= u2 , and arcs (u1 , v1 ), (u2 , v2 ). If there exists w ∈ Ri and u1  w,
we could adjoin u1 . Alternatively if we are able to adjoin u2 first and then
consider u1 , it is still true that w ∈ Ri and u1  w, so we can still adjoin
u1 . Another possible scenario is that u1  u2 and u2  u1 , so either could be
adjoined first. Then we may adjoin u1 and at a later stage u2 still meets the
criterion for adjoining u2 since now w′ = u1 applies for (2a).
Note that if u has indegree 1, then R(u) = {u} since no operation of type
(2) can be carried out.
Theorem 3.5. Let N = (V, A, r, X) be an acyclic X-network. For each v ∈ V ,
R(v) is restricted.
Proof. Suppose first that r ∈ R(v). We must show that there is no vertex w,
w∈
/ R(v), such that there is an arc (w, b) with b ∈ R(v). Otherwise, if such w
exists, then there is a path from r to w then to b with w ∈
/ R(v). Note that
R(v) = Rm for some m. Moreover w  r since this can happen only when
9

w = r and w ∈
/ Rm but r ∈ Rm . Hence step (2a) could be used to define
Rm+1 := Rm ∪ {w}, contrary to the assumption that no more operations of
type (2) can be performed.
Now suppose that r ∈
/ R(v). We show that R(v) has an anchor. Since
r∈
/ R(v) there is a path from r to some member b ∈ R(v) and a vertex w on the
path which is not in R(v) but such that the next vertex on the path lies in R(v).
This proves there exists w ∈
/ R(v) and an arc (w, b) with b ∈ R(v). To have an
anchor, this vertex w must be unique, in which case R(v) is restricted. Suppose
there were two vertices w1 and w2 with arcs (w1 , b1 ) and (w2 , b2 ), w1 6= w2 ,
w1 ∈
/ R(v), w2 ∈
/ R(v), b1 ∈ R(v), b2 ∈ R(v). Note that R(v) = Rm for some
m. If w1  w2 then step (2b) could be used to enlarge Rm by adjoining w1 ,
and similarly if w2  w1 then Rm could be enlarged by adjoining w2 . Hence
w1 ≤ w2 and w2 ≤ w1 , implying w1 = w2 . This proves that the vertex w is
unique, so R(v) is restricted.
The sets R(v) have other nice properties. The next result shows that R(v)
is the smallest restricted set that contains v.
Theorem 3.6. Let N = (V, A, r, X) be an acyclic X-network. Suppose B is a
restricted set and w ∈ B. Then R(w) ⊆ B.
Proof. Let the sequence Ri be used to compute R(w). Initially R0 = {w} ⊆ B.
The proof will be by induction. We will assume Ri ⊆ B but the algorithm does
not terminate with Ri . We will prove Ri+1 ⊆ B. It is immediate that R0 ⊆ B.
Note that Ri+1 arises from Ri . Hence there exist u ∈
/ Ri , v ∈ Ri , and arc
(u, v) such that u is adjoined to Ri in one of two ways. We must show that
u ∈ B.
Suppose (2a) applies. Hence there exists w′ ∈ Ri such that u  w′ ; we show
u ∈ B. If not, then since v ∈ B and B is restricted, it follows u = Anc(B).
Since w′ ∈ Ri , we have w′ ∈ B since Ri ⊆ B, whence by Lemma 3.2, u ≤ w′ , a
contradiction. Hence u ∈ B so Ri+1 ⊆ B.
Suppose instead (2b) applies. Hence there exist u′ ∈
/ Ri , u 6= u′ , v ′ ∈ Ri ,
′ ′
′
and arc (u , v ), such that u  u . We show u ∈ B. If not, then u = Anc(B)
since v ∈ B. We cannot have u′ ∈
/ B, since then u′ = Anc(B) = u. Hence
′
u ∈ B, whence by Lemma 3.2, u = Anc(B) ≤ u′ , a contradiction. This proves
u ∈ B so Ri+1 ⊆ B.
Corollary 3.7. If u ∈ R(v), then R(u) ⊆ R(v).
Proof. By Theorem 3.4, R(v) is restricted. The result follows now from Theorem
3.6.
In fact, given any subset B of V , the algorithm computes the smallest restricted set that contains B provided that we use R0 = B.
In general it need not be the case that a restricted set B is connected. For
example, suppose that N is an X-tree and the leaves x and y form a cherry,
so there are a vertex u and arcs (u, x), (u, y) with no other arcs into x or y.
Then {x, y} is restricted with anchor u but is not connected. Consequently, the
following result that each set R(v) is connected is of interest.
10

Lemma 3.8. For v ∈ V , if w ∈ R(v), then there is a directed path in R(v)
from w to v. Moreover, R(v) is connected.
Proof. We show the properties for each Ri used to define R(v). Initially R0 =
{v} and the properties are immediate. Each operation (2a) or (2b) applied to
Ri results in a connected set Ri+1 and adds a vertex with a path to v inside
Ri+1 .
Let Q = {R(v) : v ∈ V }. Note that Q does not need to be a partition of V ,
but each v ∈ V lies in at least one member of Q.
We now make some modifications of Q to create a partition P of V . Roughly
we merge together members of Q that have nonempty intersection until no more
such merges can be performed.
More precisely, if R(v) and R(w) are in Q, define R(v) ∼ R(w) if R(v) ∩
R(w) 6= ∅. Define R(v) ≈ R(w) iff there exist v = v0 , v1 , · · · , vk = w such that
for i = 0, · · · , k, R(vi ) ∈ Q and for i = 0, · · · , k − 1, R(vi ) ∼ R(vi+1 ). Then ≈
is an equivalence relation. Define R′ (v) = ∪{R(w) : R(v) ≈ R(w)}, so R′ (v) is
the union of sets equivalent to R(v). Let P = {R′ (v)} be the set of distinct sets
R′ (v). It is clear that P is a partition of V . For v ∈ V , R′ (v) is the member of
P containing v.
Lemma 3.9. Each set R′ (v) is a restricted subset of V and is connected.
Proof. The fact that R′ (v) is restricted follows from Theorems 3.3 and 3.5 by
an obvious induction. That R′ (v) is connected follow from a similar induction,
also using Lemma 3.8.
Let ResT r(N ) = N/P be the quotient X-network. The map φ : N →
ResT r(N ) given by φ(v) = R′ (v) will be called the natural projection map.
Theorem 3.10. Suppose N = (V, A, r, X) is a rooted acyclic network with leaf
set X such that every leaf has indegree 1. Then ResT r(N ) is an X-network.
The natural projection map φ : N → ResT r(N ) is a CSD map.
Proof. For x ∈ X, since x has indegree 1, it follows R(x) = {x}. If v is not a
leaf, then each w ∈ R(v) satisfies w ≤ v by Lemma 3.8; it follows that a leaf x
cannot lie in R(v) when v is not a leaf. Hence R′ (x) = {x}. By Theorem 2.1,
it follows that ResT r(N ) is a rooted digraph with leaf set X. By Theorem 2.1
and Lemma 3.9, the natural projection map φ : N → N ′ is a CSD map.
It will turn out (Theorem 4.1) that ResT r(N ) is an X-tree, and we will call
it the (standard) restricted tree of N . The corresponding kernel P will be called
the restricted tree kernel.

4

Restricted maps

A CSD map f : N → N ′ with kernel Q is restricted if each member of Q is
restricted. Equivalently, f is restricted if for each vertex v ′ of N ′ , f −1 (v ′ ) is a
restricted set.
11

The natural projection map φ : N → ResT r(N ) is a restricted map since
each member of the kernel P is a restricted set.
Suppose a network N is successively cluster-distinct. Then a restricted set
B is a natural generalization of a taxon unit in a tree. Each restricted set B
corresponds to a connected collection of taxa all deriving from the single taxon
Anc(B). If N is a tree, then each vertex is already restricted; the image of
a restricted map thus generalizes the notion of a tree. Note that [10] argues
that the extant human population forms a tight cluster. If N is successively
cluster-distinct, the same argument would suggest that it forms a restricted set.
A restricted CSD map f : N → N ′ is universal (for restricted maps) provided
that given any restricted map g : N → N ′′ there is a unique restricted CSD
map h : N ′ → N ′′ such that g = h ◦ f .
We shall see below that the natural projection map φ : N → ResT r(N ) is
universal for restricted maps.
The first result is that the image of a restricted map is always a tree.
Theorem 4.1. Let N = (V, A, r, X) be an acyclic X-network and let T =
(V ′ , A′ , r′ , X) be an X-network. Assume f : N → T is a restricted CSD map.
Then T is a tree.
Proof. We show that T has no hybrid vertices. Suppose otherwise, so we may assume V ′ contains distinct vertices u′1 , u′2 , and u′3 while A′ contains arcs (u′1 , u′3 ),
(u′2 , u′3 ). Let Bi = f −1 (u′i ). Since f is restricted, each Bi is a restricted set.
Since f is a CSD map, there exist u1 ∈ B1 , w1 ∈ B3 , u2 ∈ B2 , and w2 ∈ B3
such that (u1 , w1 ) and (u2 , w2 ) are arcs of N . Note u1 ∈
/ B3 and u2 ∈
/ B3 . Since
B3 is restricted, it follows u1 = Anc(B3 ) and u2 = Anc(B3 ). Hence u1 = u2 so
u′1 = f (u1 ) = f (u2 ) = u′2 , a contradiction.
Corollary 4.2. Let N = (V, A, r, X) be an acyclic X-network. Then ResT r(N )
is an X-tree.
Proof. The natural projection map φ : N → ResT r(N ) is a restricted CSD
map.
The next result shows that many relationships among leaves observed in
ResT r(N ) are also present in N .
Corollary 4.3. Let N = (V, A, r, X) be an acyclic X-network. There is a wired
lift of ResT r(N ) into N .
Proof. This follows from Theorem 2.5.
Restricted maps have interesting functorial properties, as seen in the next
results.
Lemma 4.4. Suppose N = (V, A, r, X) and N ′ = (V ′ , A′ , r′ , X) are X-networks.
Suppose f : N → N ′ is restricted. If B ⊆ V ′ is restricted and connected, then
f −1 (B) is restricted.

12

′
Proof. Let B = {w1′ , w2′ , · · · , wm
} ⊆ V ′ . Since B is connected, for some p there
′
′
′
exist p arcs (wi1 , wj1 ), · · · , (wip , wj′ p ) such the arcs connect the members of B.
Now each set f −1 (wi′ ) is restricted. Since f is a CSD map for each k there is an
arc (wik , wjk ) with wik ∈ f −1 (wi′k ) and wjk ∈ f −1 (wj′ k ). The result now follows
from Lemma 3.4.

Theorem 4.5. Suppose N = (V, A, r, X), N ′ = (V ′ , A′ , r′ , X), and N ′′ =
(V ′′ , A′′ , r′′ , X) are X-networks and f : N → N ′ and g : N ′ → N ′′ are restricted
CSD maps. Then the composition g ◦ f : N → N ′′ is restricted.
Proof. Suppose v ′′ ∈ V ′′ . We must show that (g ◦ f )−1 (v ′′ ) = f −1 (g −1 (v ′′ )) is
restricted. Since g is a restricted CSD map, g −1 (v ′′ ) is restricted and connected.
Since f is restricted, f −1 (g −1 (v ′′ )) is also restricted by Lemma 4.4.
We can now prove the universality property of ResT r(N ).
Theorem 4.6. Let φ : N → ResT r(N ) be the natural projection map. Then φ
is universal for restricted maps.
Proof. Let g : N → T be a restricted map with kernel Q. Let P denote the
kernel of φ. Note that each member B ∈ P is restricted and each member
C ∈ Q is restricted.
We use Theorem 2.4 to define a CSD map h : ResT r(N ) → T such that
g = h ◦ φ. We first show that P is subordinate to Q. Let B ∈ P. We must show
that there exists a member C ∈ Q such that B ⊆ C.
For any vertex v of N there exists C(v) ∈ Q such that v ∈ C(v) since Q
is a partition. Since C(v) is restricted, R(v) ⊆ C(v) by Theorem 3.4. If R(v ′ )
intersects R(v) then C(v) intersects C(v ′ ), whence because Q is a partition it
follows C(v) = C(v ′ ); hence R(v) ∪ R(v ′ ) ⊆ C(v). A simple induction then
shows that the member B ∈ P that contains v satisfies B ⊆ C(v). This shows
that P is subordinate to Q.
For an example, consider the network N shown in Figure 1. We demonstrate
the construction of ResT r(N ), also shown in Figure 1. Let v be a vertex of N .
If v ∈
/ {14, 16}, then R(v) = {v} since v has indegree 1. To compute R(16),
initially R0 = {16}. Since (15, 16) and (17, 16) are arcs and 15  17, we can
add 15 to R0 by (2b) yielding R1 = {15, 16}. Since 17  15 we can add 17 to
R1 by (2a), yielding R2 = {15, 16, 17}. Since (12, 15) is an arc and 12  17,
we can adjoin 12 by (2a), so R3 = {12, 15, 16, 17}. Since (18, 17) is an arc and
18  12, we can adjoin 18 by (2a), so R4 = {12, 15, 16, 17, 18}. Now the only
arcs (u, v) with v ∈ R4 and u ∈
/ R4 are (11, 12) and (11, 18), so we cannot adjoin
11 using (2b). For all v ∈ R4 , 11 ≤ v so we cannot adjoin 11 by (2a). Hence
the algorithm terminates with R(16) = R4 = {12, 15, 16, 17, 18}.
Similarly R(14) = {13, 14, 15}. Since R(16) ∩ R(14) = {15} is nonempty,
R′ (14) = R′ (16) = R(14) ∪ R(16) = {12, 13, 14, 15, 16, 17, 18}. For all v ∈
/
R′ (16), R′ (v) = R(v) = {v}. Now ResT r(N ) is the quotient digraph.
As promised, ResT r(N ) is a tree. Note that the resolution of the cluster
{3, 4} in N is lost while that of {5, 6} is preserved; this is because the hybrid
13

N

20

	
9

?
8
	
7

10
@
@
R 1
@
	11
@
@
@
R 12
	18
@
@ 13
?17
15 ? @
R
@
@
@
@
@
@
R 2
R	16
@
R?14 @
@
@
@
?19
? @
R 3
4
@
@
	
R
@
6
5

10
@
@
R1
@
	11

ResT r(N )

9

20


	
8

	
7
	
6

′
?R (16)
-2
H
@H
H
@ HH 3
j
H
?19 @
@
@
@ 4
@
R
@
R
@
5

Figure 1: An X-network N with X = {1, 2, 3, 4, 5, 6, 7, 8, 9} and ResT r(N ).

vertex 16 had outdegree 1 while the hybrid vertex 14 had outdegree 2. The
natural projection map φ takes φ(v) = v except that for v ∈ R′ (16), φ(v) =
R′ (16).
To illustrate the universality of the map φ in this example, consider the map
f : N → T where Figure 2 shows N and T in which the vertices of N have been
labelled by the vertices of T in order to display the map f . One checks that
f is restricted. For example, f −1 (a) is the set of vertices in N labelled a and
is restricted. Then f factors as f = g ◦ φ where g : ResT r(N ) → T satisfies
that g(R′ (16)) = a = g(19), g(11) = 10, g(20) = b, and for other vertices v of
ResT r(N ), g(v) = v.
It is interesting that the vertex 11 in ResT r(N ) cannot be removed from
ResT r(N ) by contracting the arc (11, R′ (16)) and still retain universality. In
the example of Figure 2, both 11 and 10 in ResT r(N ) are mapped to 10 in
T . But a simple modification could yield an example in which 11 and 10 in
ResT r(N ) must go to distinct vertices of the modified T .
The network ResT r(N ) detects narrow bottlenecks in N . Perhaps it is most
appropriate to apply to ClDis(N ) (see [23]) rather than to N itself, since large
regions in N of vertices all with the same cluster can become bottlenecks in
ClDis(N ).

References
[1] H.-J. Bandelt and A. Dress, (1992). Split decomposition: a new and useful
approach to phylogenetic analysis of distance data, Molecular Phylogenetics
14

N

b

	
9

?
8
	
7

10
@
@
R 1
@
	10
@
@
@
R a
	a
@
@ a
?a
a ? @
R
@
@
@
@
@
@
R 2
R	a
@
R?a @
@
@
@
?a
? @
R 3
4
@
@
	
R
@
6
5

T

9
	
8

10
@
 @
R1
@




b

-2
a
H
@H
H
 @ HH 3
j
H
@
	 
@
7 

@ 4

R
@
?
6
5

Figure 2: A restricted map f : N → T for N as in Figure 1 is given by the
labelling of the vertices of N. The map factors through ResT r(N ).

and Evolution 1, 242-252.
[2] M. Baroni, C. Semple, and M. Steel, (2004), A framework for representing
reticulate evolution, Annals of Combinatorics 8, 391-408.
[3] P. Buneman, (1971), The recovery of trees from measures of dissimilarity.
In: Mathematics in the Archaeological and Historical Sciences (ed. F.R.
Hodson, D.G. Kendall, and P. Tautu), Edinburgh University Press, Edinburgh, pp. 387-395.
[4] G. Cardona, M. Llabrés, F. Rosselló, and G. Valiente, (2008), A distance
metric for a class of tree-sibling phylogenetic networks, Bioinformatics 24,
1481-1488.
[5] G. Cardona, F. Rosselló, and G. Valiente, (2009), Comparison of treechild phylogenetic networks, IEEE/ACM Transactions on Computational
Biology and Bioinformatics, 6(4): 552-569.
[6] T. Dagan, Y. Artzy-Randrup, and W. Martin, (2008), Modular networks
and cumulative impact of lateral transfer in prokaryote genome evolution,
Proc. Natl. Acad. Sci. USA. 105, 10039-10044.
[7] A. Daneshgar, H. Hajiabolhassan, and N. Hamedazimi, (2008), On connected colourings of graphs, Ars Combinatoria 89, 115-126.
[8] J. H. Degnan, N. A. Rosenberg, (2006), Discordance of species trees with
their most likely gene trees, PLos Genetics 2 (5) : e68.
15

[9] W. F. Doolittle and E. Bapteste, (2007), Pattern pluralism and the Tree
of Life hypothesis, Proc. Natl. Acad. Sci. USA. 104, 2043-2049.
[10] A. Dress, V. Moulton, M. Steel, and T. Wu, (2010), Species, clusters and
the ‘tree of life’: a graph-theoretic perspective. Submitted.
[11] D. Gusfield, S. Eddhu, and C. Langley, (2004), Optimal, efficient reconstruction of phylogenetic networks with constrained recombination, Journal
of Bioinformatics and Computational Biology 2, 173-213.
[12] G. Hahn and C. Tardif, (1997). Graph homomorphisms: structure and
symmetry, in Graph Symmetry: Algebraic Methods and Applications (G.
Hahn and G. Sabidussi, eds) NATO Adv. Sci. Inst. Ser. C: Math. Phys.
Sci., vol. 497, Kluwer Academic Publishers, Dordrecht, 1997, pp. 107-166.
[13] P. Hell and J. Nešetřil, (2004), Graphs and Homomorphisms, Oxford University Press, Oxford.
[14] L. J. J. van Iersel, J. C. M. Keijsper, S. M. Kelk, L. Stougie, F. Hagen,
and T. Boekhout, (2009), Constructing level-2 phylogenetic networks from
triplets, IEEE/ACM Transactions on Computational Biology and Bioinformatics, 6(43): 667-681.
[15] G. Jin, L. Nakhleh, S. Snir, and T. Tuller, (2007), Inferring phylogenetic
networks by the maximum parsimony criterion: a case study, Mol. Biol.
Evol. 24(1): 324-337.
[16] B.M.E. Moret, L. Nakhleh, T. Warnow, C.R. Linder, A. Tholse, A.
Padolina, J. Sun, and R. Timme, (2004), Phylogenetic networks: modeling, reconstructibility, and accuracy, IEEE/ACM Transactions on Computational Biology and Bioinformatics 1, 13-23.
[17] D.A. Morrison, (2009), Phylogenetic networks in systematic biology (and
elsewhere). In R.M. Mohan (ed.) Research Advances in Systematic Biology
(Global Research Network, Trivandrum, India) pp. 1-48.
[18] L. Nakhleh, T. Warnow, and C.R. Linder, (2004), Reconstructing reticulate evolution in species–theory and practice, in P.E. Bourne and D. Gusfield, eds., Proceedings of the Eighth Annual International Conference on
Computational Molecular Biology (RECOMB ’04, March 27-31, 2004, San
Diego, California), ACM, New York, 337-346.
[19] N. Rosenberg, (2002), The probability of topological concordance of gene
trees and species trees, Theoretical Population Ecology 61, 225-247.
[20] N. Rosenberg and R. Tao, (2008). Discordance of species trees with their
most likely gene trees: the case of five taxa, Systematica Biology, 57:1,
131-140.

16

[21] C. Semple and M. Steel, (2003), Phylogenetics, Oxford University Press,
Oxford.
[22] L. Wang, K. Zhang, and L. Zhang, (2001), Perfect phylogenetic networks
with recombination, Journal of Computational Biology 8, 69-78.
[23] S.J. Willson, (2010), Relationships among phylogenetic networks,
arXiv:1005.2108v1 [q-bio.PE].

17

