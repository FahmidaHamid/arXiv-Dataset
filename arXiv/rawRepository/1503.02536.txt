Genomic Imaging Based on Codongrams and a2grams
E.A. BOUTON1, H.M. DE OLIVEIRA1, R.M. CAMPELLO DE SOUZA1,
N.S. SANTOS-MAGALHÃES2
1

Dep. de Eletrônica e Sistemas, 2Dep. de Bioquímica, Lab. de Imunologia Keizo-Asami
Universidade Federal de Pernambuco
Caixa postal 7.800  CDU, 51.711-970, Recife, PE
BRAZIL
{hmo,ricardo,nssm}@ufpe.br http://www2.ee.ufpe.br/coded/deOliveira.html

Abstract: - This paper introduces new tools for genomic signal processing, which can assist for genomic

attribute extracting or describing biologically meaningful features embedded in a DNA. The codongrams and
a2grams are offered as an alternative to spectrograms and scalograms. Twenty different a2grams are defined for
a genome, one for each amino acid (valgram is an a2gram for valine; alagram is an a2gram for alanine and so on).
They provide information about the distribution and occurrence of the investigated amino acid. In particular, the
metgram can be used to find out potential start position of genes within a genome. This approach can help
implementing a new diagnosis test for genetic diseases by providing a type of DNA-medical imaging.
Key-Words: - genomic analysis, codongrams, a2grams, diagnosis of genetic diseases, DNA medical imaging.

1

Introduction

Genes carry information that must be accurately
copied and transmitted in live beings. Since the
human genome was sequenced [1  4], the genomic
signal analysis is attracting wide-ranging interest
because of its implication to conceive new diagnosis
of diseases, its relevance in the gene therapy and the
discovering of new drugs [5,6]. Motivated by the
impact of genes for concrete goals primarily for the
pharmaceutical industry  huge efforts have been
devoted to exploit DNA sequences.
Protein synthesis involves two steps: transcription
and translation. Transcription, which consists of
mapping DNA into messenger RNA (m-RNA),
occurs first; then translation maps the m-RNA into a
protein, according to the genetic code [7,8]. There are
only four different nucleic bases so the code uses a
4-symbol alphabet. DNA sequences are strings of the
nucleotides A, T, C, and G. Actually, the DNA
information is transcribed into single-strand
RNAthe mRNA. In this circumstance, thymine (T)
is replaced by the uracil (U). The information is
transmitted by a start-stop protocol. The genetic
source is entirely characterized by the alphabet
:={U,C,A,G}. The input alphabet  3 is the set of
‘codons’  3:={c1,c2,c3 | ci , i=1,2,3}. The output
alphabet A is the set of amino acids including the
nonsense ‘codons’ (Stop elements): A:={Leu, Pro,
Arg, Gln, His, Ser, Phe, Trp, Tyr, Asn, Lys, Ile, Met,
Thr, Asp, Cys, Glu, Gly, Ala, Val, Stop}. Therefore,
the genetic code maps the 64 radix-3 ‘codons’ (5’ to
3’ DNA) of the DNA characters into one of the 20

possible amino acids (or into a punctuation mark).
The genetic code is a mapping GC: 3 A that maps
triplets (c1,c2,c3) into one amino acid Ai. For instance,
GC(UAC)=Stop
and
GC(CAC)=His.
New
representations for the GC were recently introduced
[9]. Let ||.|| denote the cardinality of a set. Evaluating
the cardinality of the input and the output alphabets,
we have, ||  3||=||  ||3=64 and ||A||=21, thereby
showing that GC is an extensively degenerated code.
The aim of this paper is to introduce new tools for
genomic signal analysis (GSA) [10]. Specifically,
two new representations of genome, namely
‘codongrams’ and ‘a2grams’, are defined. The idea
behind these spectrum-like diagrams is to perform
genome decomposition. The ‘codongram’ describes
the distribution of a ‘codon’ through the genome. The
‘a2gram’ for a particular amino acid provides
information about the sections of the DNA strand,
which potentially leads to the synthesis of such an
amino acid. DNA ‘codongrams’ and ‘a2grams’ are
among powerful visual tools for GSA like
spectrograms and scalograms [11,12], which can be
applyied when searching for particular nucleotide
patterns.

2 Codon Representation and Codon
Inner Product
Each ‘codon’ is represented by a triplet c1,c2,c3,
where ci are nucleotides, ci N:={A,T,C,G}, i=1,2,3.
Nucleotides can be replaced by binary labels
according to the rule (x  y denotes the operator
replace x by y): T [11]; A [00]; G[10]; C[01].

The usefulness of this specific labeling can be
corroborated by the following argument. The
'complementary base pairing' property can be
interpreted with the aid of binary labels as some sort
of parity check. There are several relations between
DNA and error-correcting codes [9,13]. The DNA
parity can be defined as the modulo 2 sum of all
binary coordinates of the nucleotide representations
(Table 1). As expected, the only checked parities are
A=T and C G (biochemistry chemical notation), the
main diagonal apart.

Another interesting new concept is the
‘anti-amino acid’. All triplets (‘codons’) that encode
the same amino acid will be referred to as its
homophones. Given an amino acid, their anti-amino
acid corresponds to the amino acid set generated by
the anti-homophones. For example, {GCG, GCA,
GCC, GCU} are homophones for alanine. The set of
its anti-homophones is {CGC, CGU, CGG, CGA},
which are always translated into arginine. Table 3
shows the anti-amino acids of each amino acid.
Table 3. Anti-amino acids.

Table 1. Parity-check on nucleotides of the DNA.
parity check [00]A [01]C [10]G
even
odd
odd
[00]A
odd
even
even
[01]C
odd
even
even
[10]G
even
odd
odd
[11]T

[11]T
even
odd
odd
even

Labelling for paired bases in a DNA strand gives an
error-correcting code as shown in Table 2. Each
binary codeword belongs to a constant weight code.
Table 2. Double-strand DNA short section of the
icosahedral bacterial virus X174 [14]: base-pairs
and their corresponding binary label sequences.
DNA
G...C
A...T
G...C
T...A
T...A
T...A
T...A
A...T
T...A
G...C
G...C
C...G
T...A

Codeword
10
01
00
11
10
01
11
00
11
00
11
00
11
00
00
11
11
00
10
01
10
01
01
10
11
00

The complementary nucleotides are defined to match
with the hydrogen bonds that appear in the
'complementary base pairing'. They are computed by
the operator * in such a way that A*=T, T*=A, C*G,
and G*C.
Definition 1 (anticodon). The ‘anticodon’ c*  N3 of
a ‘codon’ c = (c1, c2, c3), ci  N, is defined by c* :=
(c1*, c2*, c3*). 
The ‘anticodon’ corresponds to applying a NOT gate
of the corresponding binary labels. For instance,
c=(A,T,C) and c*=(T,A,G) are complementary
‘codons’. Their binary (0,1)-valued representations
are consequently
c=(0 0 1 1 0 1) and c* =(1 1 0 0 1 0)=NOT( c ).

Complementary amino acid
Ala* = Arg
Arg* = (Ala, Ser)
Asn* = Leu
Asp* = Leu
Cys* = Thr
Gln* = Val
Glu* = Leu
Gly* = Pro
His* = Val
Ile* = (Stop, Tyr)
Leu* = (Asn, Glu, Asp)
Lys* = Phe
Met* = Tyr
Phe* = Lys
Pro* = Gly
Ser* = (Ser, Arg)
Stop* = (Ile, Thr)
Thr* = (Cys, Stop, Trp)
Trp* = Thr
Tyr* = (Met, Ile)
Val*=(His, Gln)

A more suitable binary labelling of nucleotides to
define an inner product should be
T [11]; A  [-1-1]; G [1-1]; C [-11].
Definition 2 (‘codon’ inner product). An inner
product between two ‘codons’ c1 and c2 can be
induced by the usual inner product between their
corresponding binary labels, that is,
<c1, c2>:= < (c1,1, c1,2, c1,3), (c2,1, c2,2, c2,3)>. 
For instance, the inner product between AGT and
TTG, denoted by < A G T, T T G>, is given by:
<AGT,TTG>=<(-1-1 1-1 1 1),(1 1 1 1 1-1)>=–2.
Some direct properties of the ‘codon inner product’
follow from this definition:
Properties
P1. The ‘codon inner product’ is commutative, i.e.,
< c1, c2> = < c2, c1>, (c1, c2  N3).
P2. The inner product between two ‘codons’ is one of
the integers of the set I:={0, 2, 4, 6}.

P3. The inner product between a ‘codon’ and itself
achieves the maximum value
< c, c > = 6 ( cN3).
P4. The product of a ‘codon’ by its complementary
‘codon’ reaches the minimum value,
< c, c* > = -6 ( c N3).
P5. If none of the corresponding nucleotides of two
‘codons’ are identical or complementary then they
are orthogonal, i.e., < c1, c2> =0.
The ‘codon inner product’ can also be computed by
means of the Hamming distance between their
 c1 , c 2  2. D H (c1 , c *2 )  D H (c1 , c 2 )
nucleotides:
where DH is the Hamming distance.
P6. Two 'codons' c1 and c2 are orthogonal if and only
if they are half-way between being identical or
D (c , c )  DH (c1 , c*2 )
complementary, that is, H 1 2
.





3 Genomic Analysis Based on the
Product of DNA Sequences
The number of base pairs of a DNA in its haploid
genome is usually referred to as the C-value of the
genome. This concept is especially useful to discuss
the C-value paradox [14, p.1133]. Typically, the
C-value does not divide 3, so the genome does not
have, necessarily, an integer number of ‘codons’.
A few operations are introduced below in order to
handle genomic sequences.
Operation 1 (genomic padding). A single-strand
DNA is first converted into a DNA vector g = (the
genomic sequence) by appending -C (mod 3) zeroes
to the original sequence. 
Whether zeroes must or not be appended depends on
the original length of the genome. This operation is
necessary to guarantee that the number of
components (nucleotides or stuffing) of the vector g
is divisible by 3. The C-value of the padded-sequence
becomes ||g||= 3.C / 3 , where



3’ T C A G C A G G T T C A G 5’
This genome has a C-value 13 so 2 null-components
should be appended (stuffing). Therefore, g = (A G T
C G T C C A A G T C 0 0).
If the analysed genome is cyclic as it often occurs in
most viruses, the stuffing components must be done
by repeating the start portion of the DNA string
instead of appending zeroes. In the above example,
the genomic sequence should be
g = (A G T C G T C C A A G T C A G). 
Another genomic operation is defined in order to
deal with the different reading frames of the DNA
sequence [8,14].
Operation 2 (reading frames). Three sequences at
different reading frames (rf) can be generated from a
g

,
,
.
The number of dots corresponds to the reading
frame of the sequence g.
Example 1 (revisited)
The short genome presented in example 1 possesses
the following reading frame sequences:
g

= (A G T : C G T : C C A : A G T : C A G).

g

= (A G A : G T C : G T C : C A A : G T C).

g

= (G A G : T C G : T C C : A A G : T C A). 
The inner product of DNA strings of same length
is defined by means of the ‘codon inner product’.
Definition 3 (Inner product of DNA sequences).
Given two DNA sequences of length 3.C / 3 , say,
1,1

g 1  (c c
g 2  (c

2 ,1

1, 2

c

g  (c c c c c c ... c1
1

2

3

4

1, 3

c

the inner product

c2

C / 3

g  (c c c c ... c 

c3

)

,

that is,
.
The components of g are therefore ‘codons’ or
‘pseudo-codons’, the latter including at least a
stuffing nucleotide.
Example 1
The genomic padding process is illustrated below by
analysing a hypothetically short DNA double-strand
5’ A G T C G T C C A A G T C 3’

1, C / 3 

... c

g g
1

)

c





2

c1i , j , c 2i , j , c3i , j

)

,

is defined by

2

C / 3

i, j

,

2 , C / 3 

g  g :

Here,

)

... c

2, 3

1

C / 3  C / 3  C / 3 

2 2 2
1 2 3

c

2,2

classical ceiling function.

1 1 1
1 2 3

g

g  g g  D 2 ( g ) g  D(g )

denote the

The genomic vector g is given by

g

given genome sequence g, namely ,
, . They
are compatible with cyclic shifts of the original
sequence. If D denotes the cyclic shift operator, then



 c1, j , c 2, j 

.

j 1



 N3 are ‘codons’ or

‘pseudo-codons’, for i=1,2; j=1,2,…, C / 3 .
Example 2
The inner product between the DNA-sequences
A T C T G C C G A and A C G G G T A T T is
g g
1

2

=<ATC,ACG>+<TGC,GGT>+<CGA,ATT>

g g 0

g

g

If 1 2
then the genomes 1 and 2 are said to
be orthogonal DNA, as usual. 
Besides the inner product between DNA
sequences, a vector product can also be defined.

Definition 4 (vector product of DNA sequences).
Given two DNA sequences

g

and

1

g

2

1}
L {AGT

of length

2}
L {AGT

3.C / 3 (the padding operation could be required),
g  (c1,1 c1,2 c1,3 ... c1,C / 3 )
1

g  (c 2,1 c 2, 2 c 2,3 ... c 2, C / 3 )
2

the vector product
length
of
by  c

1,1

,c

2,1

,  c

g g

1, 2

1

,

2

is a vector with the same
both
genomes
given

,c

2, 2

The vector product
I-valued coordinates.

,...,  c

1, C / 3

g g
1

2

,c

2 , C / 3

=L{2}(F(AGT),g):= (-2 -4 0 -2 -2),

3}
L {AGT

=L{3}(F(AGT),g):= (-2 0 0 -2 0).
For details, see example 3. For instance L{1} is given
by (AGT AGT AGT AGT AGT)(AGT CGT CCA
AGT C00). 
Operation 3 (combining ‘codon–localisers’).
L1  ( L1,1 , L1, 2 ,..., L1,C / 3 )



Let

C / 3

C / 3 be two ‘codon-localisers’.

 

has thus

=L{1}(F(AGT),g):= (6 4 -4 6 0),

2,1

2, 2

L 2  (L , L

2 , C / 3

,..., L

i, j

), L

and

 I , i=1,2, j=1,2,…,

They can be combined according to the following

4 Codon-Finder Sequences and Amino
Acid Localisers
Suppose that all the occurrences of a particular
‘codon’ c=c1c2c3 must be found within a given
genomic sequence g.
Definition 5 (codon-finder sequence). The
‘c-codon-finder’ sequence F(c) is a sequence of same
length as g in which c1c2c3 is repeated until it achieves
the length of g. 
Example 3 (AGT-finder sequence).
Let g be the genomic sequence of the example 1.
g = (A G T C G T C C A A G T C 0 0), so the
AGT-finder sequence at the reading frame 1 is the
sequence
F(AGT) :=(A G T A G T A G T A G T A G T).
The ‘codon-finder sequence’ may also take into
account a specific reading frame in which the ‘codon’
c=c1c2c3 must be found. It suffices to include suitable
pseudo-nucleotides (stuffing nucleotides) as shown
below.
F{rf=1}(AGT) :=(A G T A G T A G T A G T A G T),
F{rf=2}(AGT) :=(G T A G T A G T A G T A G T A ),
F{rf=3}(AGT) :=(T A G T A G T A G T A G T A G ).
The value of the parameter rf selects the reading
frame. 
The ‘codon-finder sequence’ is used to help
identifying the positions in the padded-sequence
where the ‘codon’ takes place.
Definition 6 (codon-localiser). Let c be the ‘codon’
to be localised. The ‘c-localiser’ at the rf-th reading
frame is a vector defined by the vector product
between the genomic sequence and the ‘codon-finder
sequence’ at the reading frame rf, i.e.,
L{rf}(F(c),g):= F{rf}(c)  g. 

L

{rf }

The ‘codon-localiser’ will be denoted by c .
Example 4
The AGT-localisers for the genome given in the
example 1 are

rule: L : L1  L 2 is a new localising vector of same
length as Li, whose coordinates are the maximum
value between the corresponding coordinates of L1
and L2, that is,

L : ( L1 , L2 ,..., LC / 3 )



1, j

2, j

L : MAX L , L



,

where j
.
The AGT-localiser at different reading frames as
shown in example 4 can be combined into a single
AGT-localiser:
1}
2}
3}
L AGT : L{AGT
 L{AGT
 L {AGT

= (6 4 0 6 0).
This operation preserves the positions where the
‘codon’ was found regardless the reading frame.
Three localisers are then collapsed into a single one.
The ‘codongram’ is a visual representation of the
‘codon-localiser’. The one-dimensional vector L is
firstly rearranged into a two-dimensional array. The
C /3

.
number of rows and columns is given by ~ 
The ‘codongram’ is derived by associating a colour
map with the array corresponding to the localiser L.
The combining operation of ‘codon-localisers’ is
mainly useful to deal with amino acids. As previously
discussed, the genetic code is highly degenerated and
several ‘codons’ yield the same amino acid.
Definition 7 (amino acid localisers). The
‘a2-localiser’ for an amino acid Ai at a reading frame
rf is defined by
L {Arf } :
  L {rf } F (c1 , c 2 , c 3 ), g .
i
GC ( c1c1c3 )  Ai



The sum  denotes a summation using the special
“addition” defined in operation 3.
L {1}

 L {1}  L {1}  L {1}

TAA
TGA
TAG .
For instance, STOP
Localisers of an amino acid at different reading
frames can thus be combined. The ‘amino acid
full-localiser’ is thereby the mixture of all
‘codon-localisers’ that are homophones of such an
amino acid, not considering the reading frame,

3



L A :
i



L {crfc }c

rf 1 GC ( c1c2 c3 )  Ai

1 2 3

.
Given a newly sequenced genome, suppose that
the start positions of genes are to be located. We are
looking for incidence of the ‘codon’ that is coded into
the methionine. Since GC(AUG)=Met,
3

L MET 

rf }
  L {ATG

{rf }

, where L ATG =L{rf}(F(ATG),g), for
rf=1,2,3. The STOP-localiser, for instance, is
rf 1

L STOP 

1}
L {STOP

2}
 L {STOP

3}
 L {STOP
,

L {rf }  L {rf }  L {rf }  L {rf }

TAA
TGA
TAG .
where STOP
2
The ‘a -localiser’ can be plotted as an ‘a2gram’ in
the same way as done for ‘codongrams’. The tag of
the ‘a2gram’ is specified according to the amino acid
under investigation: The valgram is an ‘a2gram’ for
valine; the alagram is an ‘a2gram’ for alanine, etc.
A few a2gram for the phague X174 [15] are shown
in Fig. 1.

Figure 2. Start-Stop-Mask for  X174 at rf=2.
Abscissa 1-5386 indicates the nucleotide position in
the RNA. The binary mask is 1 if the position is
between a start and a stop, zero otherwise.
Setting a particular reading frame, a
start-stop-mask is generated from the localizer
sequences LATG{rf} and LStop{rf}. It is a binary sequence
starting with zero, which is set to 1 after each position
where LATG{rf} =6, and is forced to 0 after reaching a
position where LStop{rf} =6. The mask turns black all
the positions of ‘noncoding codons’. Figure 2 shows
start-stop mask derived for the coliphage  X174.
The mask can be applied to any a2gram. Figure 3
shows the Metgram applied to the known
RNA-cyclic bacterial virus X174, which has only
ten genes [14], after submitted to the start-stop-mask.

a

b

(a)

(b)

Figure 1. a2gram for the X174 virus: a) metgram; b)
phegram. “Hot” points correspond to maximum value.
Colour map:{-6(magenta), -4(blue), -2(cyan),
0(green), 2(yellow), 4(orange), and 6(red)}.
c

Figure 3. Metgram for the phage X174 at different
reading frames (rf). Genes start with a “hot” point and
finish with a “black” point. a) rf=2; b) rf=1; c) rf=3.

Definition 8. If S1 and S2 are start-stop strings then S1
is said to be covered by S2, if and only if S1 can be
found in S2. 
Start-stop strings control the synthesis of proteins.
However, besides start-stop portions corresponding
to the genes of the phage (Table 4), there exists many
short start-stop regions that do not specify genes.

5

Conclusions

The evaluation of a patient´s health is, as a rule,
involved in the higher-level, location-based
interpretation on DNA sequences. Transform-based
DNA imaging has a computational complexity by far
much greater than a2grams, since the latter only
requires integer additions. Much of GSA approaches
for genomic feature extraction and functional
cataloguing have been focused on oligonucleotide
patterns in the linear primary sequences of genomes
[5,6,10,16]. Analysing a specific chromosome,
explicit patterns will emerge due to a genetic disease.
The new tools, ‘codongrams’ and ‘a2grams’, are
DNA-medical imaging, which can be applied for the
human DNA. Several neurological diseases are
associated with trinucleotide repeat expansion
(fragile X syndrome, myotonic dystrophy,
Huntington’s disease etc.) [14]. For instance, the
Huntington’s disease, a devasting neurodegenerative
disorder, typically appears after an age of ~40 years.
It is characterized by a polymorphic (CAG)n repeat
more than 40 times in the chromosome 4. In contrast,
this nucleotide sequence is only repeated about 6
times for people not affected by this disorder. The
F

‘condon-finder sequence’ CAG could be used for
analysing the DNA-content of the chromosome 4. As
a result, a codongram-based diagnosis test can be
implemented.

Acknowledgements: this study was partially
supported by the Brazilian National Council for
Scientific and Technological Development (CNPq)
under research grants N.306180 (HMO) and
N.306049 (NSSM).
References:
[1] Int. Human Genome Sequencing Consortium,
Initial Sequencing and Analysis of the human
genome, Nature, Vol.409, 2001, pp.860-921.
[2] S.K. Moore, Understanding the Human Genome,
IEEE Spectrum, Vol.37, 2000, pp.33-35.
[3] NIH (2004) National Center for Biotechnology
Information, GenBank [on line], Available:
http://www.ncbi.nlm.nih.gov/Genomes/idex.html
[4] EII (2004) European BioInformatics Institute,

Available: http://www.ebi.ac.uk/
[5] J.P. Fitch, B. Sokhansanj, Genomic Engineering:
Moving Beyond DNA Sequence to Function, Proc. of
the IEEE, Vol.88, 2000, pp.1949-1971.
[6] X-Y. Zhang, F. Chen, Y-T. Zhank, S.C. Agner, M.
Akay, Z-H. Lu, M.M.Y. Waye, S. K-W. Tsui, Signal
Processing Techniques in Genomic Engineering,
Proc. IEEE, Vol.90, 2002, pp.1822-1833.
[7] D.L. Nelson, M.M. Cox, Lehninger Principles of
Biochemistry, 3rd ed., New York: Worth Publishers,
2000.
[8] B. Alberts, D. Bray, A. Johnson, J. Lewis, M. Raff,
K. Roberts, P. Walter, Essential Cell Biology, New
York: Garland Pub., 1998.
[9] H.M. de Oliveira, N.S. Santos-Magalhães, The
genetic code revisited: the inner-to-outer map, the
2D-Gray map and world-map genetic representations.
Lecture Notes in Computer Science, Heidelberg,
Springer Verlag, 2004 (in press).
[10] D. Anastassiou, Genomic Signal Processing,
IEEE Signal Processing Magazine, 2001, pp.8-20.
[11] N. Kawagashira, Y. Ohtomo, K. Murakimi, K.
Matsubara, J. Kawai, P. Carninci, Y. Hayashizaki, S.
L. Kikuchi, Wavelet Profiles: Their Application in
Oryza sativa DNA Signals, Proc. IEEE Computer
Society Bioinformatics, CSB'02, 2002, pp.1-2.
[12] A. A. Tsonis, P. Kumar, J.B. Elsner, P.A. Tsonis,
Wavelet Analysis of DNA Sequences, Physical
Review E, Vol.53, 1996, pp.1828-1834.
[13] G. Battail, Is Biological Evolution Relevant to
Information Theory and Coding? Proc. Int. Symp. on
Coding Theory and Applications, ISCTA, Ambleside,
UK, 2001, pp.343-351.
[14] D. Voet, J. Voet, Biochemistry, 2nd ed., Wiley,
1995.
[15] F. Sangler, A.R. Loulson, T. Friedmann, G.M.
Air, B.G. Barrel, N.L. Brown, C.A. Fiddes, C.A.
Hutchinson, P.M. Slocombe, M. Smith, Nucleotide
Sequence of Bacteriophage phiX174 DNA, Nature,
Vol. 265, 1997, pp.687-695.
[16] I. Abnizova, M. Schilistra, R. Te Boeckhorst,
C.L. Newhaniv, A statistical approach to distinguish
between different DNA functional parts, WSEAS
Trans. on Computers, Vol. 2, October, 2003,
p.1180-1187.

Appendix
Table 4. Potential genes of the coliphage  X174
according to the ‘gene-localiser’ operator. Only
single-strand sequences between a start and a stop
that yield more than 50 amino acids are shown. The
genes A and B have two different reading frames.
This happens because 5386 does not divide 3.

Position
51 - 219
390 - 846
1038 - 1194
1599 - 1773
1998 - 2232
2931 - 3195
3981 (rf3) – 135 (rf2)
849 - 963
1002 - 2283
2544 - 2730
5076 (rf2) – 51 (rf1)
132 -390
567 - 840
2394 - 2919
3075 - 3681
3741 - 3927
3945 - 4260
4620 - 4854
4881 - 5061

Protein
length
(aa)
56
152
52
58
78
328
455
38
427
62
120
86
91
175
202
62
105
78
60

Gene
K
D
None  F
None  F
None  F
H
A
J
F
None G
B
C
E
G
Unknown
Unknown
Unknown
none  A
none  A

Reading
frame
3
3
3
3
3
3
3, 2
2
2
2
2, 1
1
1
1
1
1
1
1
1

